<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>FunctionNaming:AiMessageText.kt$@Composable private fun ClickableText( text: AnnotatedString, modifier: Modifier = Modifier, style: TextStyle = TextStyle.Default, maxLines: Int = Int.MAX_VALUE, onLongPress: () -> Unit, onClick: (Int) -> Unit, )</ID>
    <ID>FunctionNaming:AiMessageText.kt$@Composable public fun AiMessageText( message: Message, currentUser: User?, typingState: TypingState, modifier: Modifier = Modifier, onAnimationState: (Boolean) -> Unit, onLongItemClick: (Message) -> Unit, onLinkClick: ((Message, String) -> Unit)? = null, )</ID>
    <ID>FunctionNaming:AiMessagesScreen.kt$@Composable internal fun BoxScope.DefaultAiStartButton( isAiStarted: Boolean, onStartAiAssistant: () -> Unit, onStopAiAssistant: () -> Unit, )</ID>
    <ID>FunctionNaming:AiMessagesScreen.kt$@Composable internal fun DefaultBottomBarContent( viewModelFactory: MessagesViewModelFactory, onComposerLinkPreviewClick: ((LinkPreview) -> Unit)? = null, skipPushNotification: Boolean = false, skipEnrichUrl: Boolean = false, )</ID>
    <ID>FunctionNaming:AiMessagesScreen.kt$@Composable internal fun DefaultTopBarContent( viewModelFactory: MessagesViewModelFactory, backAction: BackAction, onHeaderTitleClick: (channel: Channel) -> Unit, onChannelAvatarClick: () -> Unit, )</ID>
    <ID>FunctionNaming:AiMessagesScreen.kt$@Composable public fun AiMessagesScreen( viewModelFactory: MessagesViewModelFactory, isAiStarted: Boolean, onStartAiAssistant: () -> Unit, onStopAiAssistant: () -> Unit, showHeader: Boolean = true, typingState: TypingState, reactionSorting: ReactionSorting = ReactionSortingByFirstReactionAt, onBackPressed: () -> Unit = {}, onComposerLinkPreviewClick: ((LinkPreview) -> Unit)? = null, onHeaderTitleClick: (channel: Channel) -> Unit = {}, onChannelAvatarClick: () -> Unit = {}, onMessageLinkClick: ((Message, String) -> Unit)? = null, onUserAvatarClick: (User) -> Unit = {}, skipPushNotification: Boolean = false, skipEnrichUrl: Boolean = false, threadMessagesStart: ThreadMessagesStart = ThreadMessagesStart.BOTTOM, aiStartButton: @Composable BoxScope.() -> Unit = { DefaultAiStartButton( isAiStarted = isAiStarted, onStartAiAssistant = onStartAiAssistant, onStopAiAssistant = onStopAiAssistant, ) }, topBarContent: @Composable (BackAction) -> Unit = { DefaultTopBarContent( viewModelFactory = viewModelFactory, backAction = it, onHeaderTitleClick = onHeaderTitleClick, onChannelAvatarClick = onChannelAvatarClick, ) }, bottomBarContent: @Composable (isAnimating: Boolean) -> Unit = { DefaultBottomBarContent( viewModelFactory = viewModelFactory, onComposerLinkPreviewClick = onComposerLinkPreviewClick, skipPushNotification = skipPushNotification, skipEnrichUrl = skipEnrichUrl, ) }, )</ID>
    <ID>FunctionNaming:AiRegularMessageContent.kt$@Composable internal fun DefaultMessageTextContent( message: Message, currentUser: User?, typingState: TypingState, onAnimationState: (Boolean) -> Unit, onLongItemClick: (Message) -> Unit, onLinkClick: ((Message, String) -> Unit)? = null, )</ID>
    <ID>FunctionNaming:AiRegularMessageContent.kt$@Composable public fun AiRegularMessageContent( messageItem: MessageItemState, modifier: Modifier = Modifier, onLongItemClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, onQuotedMessageClick: (Message) -> Unit = {}, onAnimationState: (Boolean) -> Unit, onLinkClick: ((Message, String) -> Unit)? = null, typingState: TypingState, onMediaGalleryPreviewResult: (MediaGalleryPreviewResult?) -> Unit = {}, )</ID>
    <ID>FunctionNaming:AiTypingIndicator.kt$@Composable private fun SingleDot( scale: Float, shimmerInstance: Shimmer, )</ID>
    <ID>FunctionNaming:AiTypingIndicator.kt$@Composable public fun AiTypingIndicator( modifier: Modifier = Modifier, text: String, textStyle: TextStyle = TextStyle( fontSize = 16.sp, color = ChatTheme.colors.textHighEmphasis, ), )</ID>
    <ID>LongMethod:AiMessageContentFactory.kt$AiMessageContentFactory$@Composable override fun MessageFooterContent(messageItem: MessageItemState)</ID>
    <ID>LongMethod:AiMessageText.kt$@Composable public fun AiMessageText( message: Message, currentUser: User?, typingState: TypingState, modifier: Modifier = Modifier, onAnimationState: (Boolean) -> Unit, onLongItemClick: (Message) -> Unit, onLinkClick: ((Message, String) -> Unit)? = null, )</ID>
    <ID>LongMethod:AiMessagesScreen.kt$@Composable public fun AiMessagesScreen( viewModelFactory: MessagesViewModelFactory, isAiStarted: Boolean, onStartAiAssistant: () -> Unit, onStopAiAssistant: () -> Unit, showHeader: Boolean = true, typingState: TypingState, reactionSorting: ReactionSorting = ReactionSortingByFirstReactionAt, onBackPressed: () -> Unit = {}, onComposerLinkPreviewClick: ((LinkPreview) -> Unit)? = null, onHeaderTitleClick: (channel: Channel) -> Unit = {}, onChannelAvatarClick: () -> Unit = {}, onMessageLinkClick: ((Message, String) -> Unit)? = null, onUserAvatarClick: (User) -> Unit = {}, skipPushNotification: Boolean = false, skipEnrichUrl: Boolean = false, threadMessagesStart: ThreadMessagesStart = ThreadMessagesStart.BOTTOM, aiStartButton: @Composable BoxScope.() -> Unit = { DefaultAiStartButton( isAiStarted = isAiStarted, onStartAiAssistant = onStartAiAssistant, onStopAiAssistant = onStopAiAssistant, ) }, topBarContent: @Composable (BackAction) -> Unit = { DefaultTopBarContent( viewModelFactory = viewModelFactory, backAction = it, onHeaderTitleClick = onHeaderTitleClick, onChannelAvatarClick = onChannelAvatarClick, ) }, bottomBarContent: @Composable (isAnimating: Boolean) -> Unit = { DefaultBottomBarContent( viewModelFactory = viewModelFactory, onComposerLinkPreviewClick = onComposerLinkPreviewClick, skipPushNotification = skipPushNotification, skipEnrichUrl = skipEnrichUrl, ) }, )</ID>
    <ID>LongMethod:AiRegularMessageContent.kt$@Composable public fun AiRegularMessageContent( messageItem: MessageItemState, modifier: Modifier = Modifier, onLongItemClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, onQuotedMessageClick: (Message) -> Unit = {}, onAnimationState: (Boolean) -> Unit, onLinkClick: ((Message, String) -> Unit)? = null, typingState: TypingState, onMediaGalleryPreviewResult: (MediaGalleryPreviewResult?) -> Unit = {}, )</ID>
    <ID>MagicNumber:AiMessageText.kt$10</ID>
    <ID>MagicNumber:AiMessagesScreen.kt$0.75f</ID>
    <ID>MagicNumber:AiMessagesScreen.kt$300f</ID>
    <ID>MagicNumber:AiTypingIndicator.kt$0.55f</ID>
    <ID>MagicNumber:AiTypingIndicator.kt$4</ID>
    <ID>TopLevelPropertyNaming:AiMessageText.kt$/** * The tag used to annotate URLs in the message text. */ internal const val AnnotationTagUrl: AnnotationTag = "URL"</ID>
    <ID>TopLevelPropertyNaming:AiMessageText.kt$/** * The tag used to annotate emails in the message text. */ internal const val AnnotationTagEmail: AnnotationTag = "EMAIL"</ID>
    <ID>TopLevelPropertyNaming:AiTypingIndicator.kt$private const val delayUnit = 200</ID>
  </CurrentIssues>
</SmellBaseline>
