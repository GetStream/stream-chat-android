if (!rootProject.ext.sonar.ignoreModules.contains(name) && file("src/test").exists()) {
    apply plugin: "org.jetbrains.kotlinx.kover"
    apply plugin: "org.sonarqube"

    afterEvaluate {
        def isAndroidModule = plugins.hasPlugin("com.android.library") || plugins.hasPlugin("com.android.application")
        def hasPaparazziPlugin = plugins.hasPlugin("app.cash.paparazzi")

        if (isAndroidModule) {
            android {
                buildTypes {
                    debug {
                        testCoverageEnabled = true
                        enableUnitTestCoverage = true
                        enableAndroidTestCoverage true
                    }
                }
            }
        }

        def testTaskName = isAndroidModule
                ? (hasPaparazziPlugin ? "verifyPaparazziDebug" : "testDebugUnitTest")
                : "test"

        tasks.register("testCoverage") {
            group = "verification"
            description = "Run module-specific tests and generate coverage reports"
            dependsOn(testTaskName)

            if (isAndroidModule) {
                dependsOn "koverXmlReportDebug", "koverHtmlReportDebug"
            } else {
                dependsOn "koverXmlReport", "koverHtmlReport"
            }
        }

        kover {
            reports {
                verify {
                    warningInsteadOfFailure = true
                }
                filters {
                    excludes {
                        // Existing sonar excludes
                        classes(rootProject.ext.sonar.excludeFilter as String[])
                        // Exclude Compose-generated singletons
                        classes("*ComposableSingletons*")
                        // Exclude Compose previews
                        annotatedBy("androidx.compose.ui.tooling.preview.Preview")
                    }
                }
            }
        }

        sonarqube {
            properties {
                def mainSources = []
                if (file("src/main/java").exists()) mainSources += "src/main/java"
                if (file("src/main/kotlin").exists()) mainSources += "src/main/kotlin"

                property "sonar.sources", mainSources.join(",")

                def xmlReportPaths = isAndroidModule
                        ? "$buildDir/reports/kover/reportDebug.xml"
                        : "$buildDir/reports/kover/report.xml"

                property "sonar.junit.reportPaths", "${buildDir}/test-results/${testTaskName}"
                property "sonar.coverage.jacoco.xmlReportPaths", xmlReportPaths
            }
        }
    }
}
