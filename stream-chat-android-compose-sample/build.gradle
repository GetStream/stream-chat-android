import io.getstream.chat.android.Dependencies
import io.getstream.chat.android.Versions

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

apply from: "${rootDir}/scripts/android.gradle"
apply from: "${rootDir}/scripts/detekt-compose.gradle"

android {
    defaultConfig {
        targetSdk io.getstream.chat.android.Configuration.sampleTargetSdk
        applicationId "io.getstream.chat.android.compose.sample"
        versionCode sampleAppVersionCode
        versionName sampleAppVersionName
    }

    File signFile = rootProject.file('.sign/keystore.properties')
    if (signFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signFile))
        signingConfigs {
            release {
                storeFile rootProject.file(properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
    } else {
        signingConfigs {
            release {
                storeFile rootProject.file('.sign/debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }

    signingConfigs.debug {
        storeFile rootProject.file('.sign/debug.keystore')
        storePassword 'android'
        keyAlias 'androiddebugkey'
        keyPassword 'android'
    }

    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }
        benchmark {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion Versions.ANDROIDX_COMPOSE_COMPILER
    }

    lintOptions {
        disable 'MissingTranslation'
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += [
                '-opt-in=kotlin.RequiresOptIn',
        ]
    }
}

dependencies {
    implementation project(':stream-chat-android-compose')
    implementation project(":stream-chat-android-offline")

    implementation Dependencies.androidxCoreKtx
    implementation Dependencies.androidxAppCompat
    implementation Dependencies.materialComponents
    implementation Dependencies.streamPushFirebase

    // Compose
    implementation Dependencies.composeCompiler
    implementation Dependencies.composeUi
    implementation Dependencies.composeUiTooling
    implementation Dependencies.composeFoundation
    implementation Dependencies.composeMaterial

    implementation Dependencies.composeActivity
    implementation Dependencies.composeViewModel
    implementation Dependencies.composeAccompanistPermissions
    implementation Dependencies.composeAccompanistPager

    // Coil
    implementation Dependencies.composeCoil

    // Firebase
    implementation Dependencies.firebaseAnalytics
    implementation Dependencies.firebaseCrashlytics

    detektPlugins(Dependencies.detektFormatting)
}
