<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:AttachmentDestination.kt$AttachmentDestination$attachment.type == ModelType.attach_file || attachment.type == ModelType.attach_video || attachment.type == ModelType.attach_audio || attachment.mimeType?.contains(VIDEO_MIME_TYPE_PREFIX) == true</ID>
    <ID>ComplexCondition:FileAttachmentsView.kt$FileAttachmentViewHolder$item.uploadState is Attachment.UploadState.Idle || item.uploadState is Attachment.UploadState.InProgress || (item.uploadState is Attachment.UploadState.Success &amp;&amp; item.fileSize == 0)</ID>
    <ID>ComplexCondition:MessageInputFieldView.kt$MessageInputFieldView$!hasValidContent() &amp;&amp; (mode is Mode.CustomAttachmentMode || mode is Mode.FileAttachmentMode || mode is Mode.MediaAttachmentMode)</ID>
    <ID>ComplexCondition:MessageListScrollHelper.kt$MessageListScrollHelper$isInitialList || isLastMessageMine() || isAtBottom || alwaysScrollToBottom</ID>
    <ID>ComplexMethod:AttachmentDestination.kt$AttachmentDestination$public fun showAttachment(message: Message, attachment: Attachment)</ID>
    <ID>ComplexMethod:MessageInputViewStyle.kt$MessageInputViewStyle.Companion$internal operator fun invoke(context: Context, attrs: AttributeSet?): MessageInputViewStyle</ID>
    <ID>ComplexMethod:MessageListItemDiffCallback.kt$MessageListItemDiffCallback$override fun areContentsTheSame(oldItem: MessageListItem, newItem: MessageListItem): Boolean</ID>
    <ID>ComplexMethod:MessageListItemViewHolderFactory.kt$MessageListItemViewHolderFactory$ public open fun createViewHolder( parentView: ViewGroup, viewType: Int, ): BaseMessageItemViewHolder&lt;out MessageListItem></ID>
    <ID>ComplexMethod:MessageOptionsView.kt$MessageOptionsView$internal fun configure( configuration: Configuration, style: MessageListViewStyle, isMessageTheirs: Boolean, syncStatus: SyncStatus, isMessageAuthorMuted: Boolean, isMessagePinned: Boolean, )</ID>
    <ID>EmptyFunctionBlock:SuggestionListControllerListener.kt$DefaultSuggestionListControllerListener${}</ID>
    <ID>ForbiddenComment:MediaAttachmentGridView.kt$MediaAttachmentGridView.SharedMediaSpaceItemDecorator$// TODO: leaves empty space after pagination</ID>
    <ID>ForbiddenComment:SearchViewModel.kt$SearchViewModel$// TODO: use the pagination based on "limit" nad "next" params here</ID>
    <ID>LargeClass:MessageInputView.kt$MessageInputView : ConstraintLayout</ID>
    <ID>LargeClass:MessageListView.kt$MessageListView : ConstraintLayout</ID>
    <ID>LongMethod:AvatarStyle.kt$AvatarStyle.Companion$operator fun invoke(context: Context, attrs: AttributeSet?): AvatarStyle</ID>
    <ID>LongMethod:ChannelActionsDialogViewStyle.kt$ChannelActionsDialogViewStyle.Companion$operator fun invoke(context: Context, attrs: AttributeSet?): ChannelActionsDialogViewStyle</ID>
    <ID>LongMethod:ChannelListViewStyle.kt$ChannelListViewStyle.Companion$operator fun invoke(context: Context, attrs: AttributeSet?): ChannelListViewStyle</ID>
    <ID>LongMethod:FileAttachmentViewStyle.kt$FileAttachmentViewStyle.Companion$operator fun invoke(context: Context, attrs: AttributeSet?): FileAttachmentViewStyle</ID>
    <ID>LongMethod:GiphyViewHolderStyle.kt$GiphyViewHolderStyle.Companion$operator fun invoke(context: Context, attributes: TypedArray): GiphyViewHolderStyle</ID>
    <ID>LongMethod:MentionListViewStyle.kt$MentionListViewStyle.Companion$operator fun invoke(context: Context, attrs: AttributeSet?): MentionListViewStyle</ID>
    <ID>LongMethod:MessageInputViewStyle.kt$MessageInputViewStyle.Companion$internal operator fun invoke(context: Context, attrs: AttributeSet?): MessageInputViewStyle</ID>
    <ID>LongMethod:MessageListHeaderViewStyle.kt$MessageListHeaderViewStyle.Companion$operator fun invoke(context: Context, attrs: AttributeSet?): MessageListHeaderViewStyle</ID>
    <ID>LongMethod:MessageListItemStyle.kt$MessageListItemStyle.Builder$fun build(): MessageListItemStyle</ID>
    <ID>LongMethod:MessageListViewModelBinding.kt$ @JvmName("bind") public fun MessageListViewModel.bindView( view: MessageListView, lifecycleOwner: LifecycleOwner, enforceUniqueReactions: Boolean = true, )</ID>
    <ID>LongMethod:MessageListViewStyle.kt$MessageListViewStyle.Companion$operator fun invoke(context: Context, attrs: AttributeSet?): MessageListViewStyle</ID>
    <ID>LongMethod:MessageOptionsDialogFragment.kt$MessageOptionsDialogFragment$private fun setupOptionsClickListeners( messageOptionsHandlers: MessageOptionsHandlers, isMessageAuthorMuted: Boolean, isMessagePinned: Boolean, )</ID>
    <ID>LongMethod:MessageOptionsView.kt$MessageOptionsView$internal fun configure( configuration: Configuration, style: MessageListViewStyle, isMessageTheirs: Boolean, syncStatus: SyncStatus, isMessageAuthorMuted: Boolean, isMessagePinned: Boolean, )</ID>
    <ID>LongMethod:MessageReplyStyle.kt$MessageReplyStyle.Companion$operator fun invoke(attributes: TypedArray, context: Context): MessageReplyStyle</ID>
    <ID>LongMethod:PinnedMessageListViewStyle.kt$PinnedMessageListViewStyle.Companion$operator fun invoke(context: Context, attrs: AttributeSet?): PinnedMessageListViewStyle</ID>
    <ID>LongMethod:SearchResultListViewStyle.kt$SearchResultListViewStyle.Companion$operator fun invoke(context: Context, attrs: AttributeSet?): SearchResultListViewStyle</ID>
    <ID>LongMethod:SuggestionListViewStyle.kt$SuggestionListViewStyle.Companion$operator fun invoke(context: Context, attrs: AttributeSet?): SuggestionListViewStyle</ID>
    <ID>LongMethod:SwipeViewHolder.kt$SwipeViewHolder$@SuppressLint("ClickableViewAccessibility") public fun setSwipeListener(view: View, swipeListener: ChannelListView.SwipeListener?)</ID>
    <ID>LongParameterList:ChannelViewHolder.kt$ChannelViewHolder$( parent: ViewGroup, private val channelClickListener: ChannelListView.ChannelClickListener, private val channelLongClickListener: ChannelListView.ChannelLongClickListener, private val channelDeleteListener: ChannelListView.ChannelClickListener, private val channelMoreOptionsListener: ChannelListView.ChannelClickListener, private val userClickListener: ChannelListView.UserClickListener, private val swipeListener: ChannelListView.SwipeListener, private val style: ChannelListViewStyle, private val binding: StreamUiChannelListItemViewBinding = StreamUiChannelListItemViewBinding.inflate( parent.streamThemeInflater, parent, false ), private val globalState: GlobalState = ChatClient.instance().globalState, )</ID>
    <ID>LongParameterList:EditReactionsBubbleDrawer.kt$EditReactionsBubbleDrawer$( context: Context, canvas: Canvas, bubbleWidth: Int, bubbleHeight: Int, isMyMessage: Boolean, isSingleReaction: Boolean, )</ID>
    <ID>LongParameterList:MessageListItemDecoratorProvider.kt$MessageListItemDecoratorProvider$( dateFormatter: DateFormatter, isDirectMessage: () -> Boolean, messageListViewStyle: MessageListViewStyle, showAvatarPredicate: MessageListView.ShowAvatarPredicate, messageBackgroundFactory: MessageBackgroundFactory, deletedMessageListItemPredicate: MessageListView.MessageListItemPredicate, isCurrentUserBanned: () -> Boolean )</ID>
    <ID>LongParameterList:MessageOptionsDialogFragment.kt$MessageOptionsDialogFragment.Companion$( message: Message, configuration: MessageOptionsView.Configuration, style: MessageListViewStyle, messageViewHolderFactory: MessageListItemViewHolderFactory, messageBackgroundFactory: MessageBackgroundFactory, attachmentFactoryManager: AttachmentFactoryManager, showAvatarPredicate: MessageListView.ShowAvatarPredicate, )</ID>
    <ID>LongParameterList:MessageOptionsDialogFragment.kt$MessageOptionsDialogFragment.Companion$( optionsMode: OptionsMode, message: Message, configuration: MessageOptionsView.Configuration, style: MessageListViewStyle, messageViewHolderFactory: MessageListItemViewHolderFactory, messageBackgroundFactory: MessageBackgroundFactory, attachmentFactoryManager: AttachmentFactoryManager, showAvatarPredicate: MessageListView.ShowAvatarPredicate, )</ID>
    <ID>LongParameterList:MessageOptionsDialogFragment.kt$MessageOptionsDialogFragment.MessageOptionsHandlers$( val threadReplyHandler: MessageListView.ThreadStartHandler, val retryHandler: MessageListView.MessageRetryHandler, val editClickHandler: MessageListView.MessageEditHandler, val flagClickHandler: MessageListView.MessageFlagHandler, val pinClickHandler: MessageListView.MessagePinHandler, val unpinClickHandler: MessageListView.MessageUnpinHandler, val muteClickHandler: MessageListView.UserMuteHandler, val unmuteClickHandler: MessageListView.UserUnmuteHandler, val blockClickHandler: MessageListView.UserBlockHandler, val deleteClickHandler: MessageListView.MessageDeleteHandler, val replyClickHandler: MessageListView.MessageReplyHandler, )</ID>
    <ID>LongParameterList:MessageOptionsView.kt$MessageOptionsView$( configuration: Configuration, style: MessageListViewStyle, isMessageTheirs: Boolean, syncStatus: SyncStatus, isMessageAuthorMuted: Boolean, isMessagePinned: Boolean, )</ID>
    <ID>MagicNumber:AttachmentGalleryActivity.kt$AttachmentGalleryActivity$500</ID>
    <ID>MagicNumber:AvatarBitmapCombiner.kt$AvatarBitmapCombiner$3</ID>
    <ID>MagicNumber:AvatarBitmapFactory.kt$AvatarBitmapFactory$4</ID>
    <ID>MagicNumber:AvatarView.kt$AvatarView$10f</ID>
    <ID>MagicNumber:AvatarView.kt$AvatarView$8f</ID>
    <ID>MagicNumber:ChannelItemSwipeListener.kt$ChannelItemSwipeListener$100</ID>
    <ID>MagicNumber:ChannelViewHolder.kt$ChannelViewHolder$99</ID>
    <ID>MagicNumber:ColorUtils.kt$255</ID>
    <ID>MagicNumber:EditReactionsView.kt$EditReactionsView$5</ID>
    <ID>MagicNumber:EditReactionsViewStyle.kt$EditReactionsViewStyle.Builder$5</ID>
    <ID>MagicNumber:ImageAttachmentsGroupView.kt$ImageAttachmentsGroupView$3</ID>
    <ID>MagicNumber:MediaAttachmentGridView.kt$MediaAttachmentGridView.SharedMediaSpaceItemDecorator$4</ID>
    <ID>MagicNumber:MessageInputView.kt$MessageInputView$1000</ID>
    <ID>MagicNumber:MessageInputView.kt$MessageInputView$300</ID>
    <ID>MagicNumber:MessageListItemStyle.kt$MessageListItemStyle.Builder$0.75</ID>
    <ID>MagicNumber:MessageListItemStyle.kt$MessageListItemStyle.Builder$5</ID>
    <ID>MagicNumber:MessageListScrollHelper.kt$MessageListScrollHelper$3</ID>
    <ID>MagicNumber:MessageListView.kt$MessageListView$20</ID>
    <ID>MagicNumber:MessageListView.kt$MessageListView$500</ID>
    <ID>MagicNumber:TypingIndicatorAnimationView.kt$TypingDrawable$0.5f</ID>
    <ID>MagicNumber:TypingIndicatorAnimationView.kt$TypingDrawable$255</ID>
    <ID>MaxLineLength:AttachmentActivity.kt$AttachmentActivity$Toast.makeText(this, getString(R.string.stream_ui_message_list_attachment_display_error), Toast.LENGTH_SHORT).show()</ID>
    <ID>MaxLineLength:AttachmentGalleryActivity.kt$AttachmentGalleryActivity$showInChatHandler = { setResultAndFinish(AttachmentOptionResult.ShowInChat(attachmentGalleryResultItem)) }</ID>
    <ID>MaxLineLength:AttachmentSelectionDialogStyle.kt$AttachmentSelectionDialogStyle.Companion$allowAccessToCameraIcon = context.getDrawableCompat(R.drawable.stream_ui_attachment_permission_camera)!!</ID>
    <ID>MaxLineLength:AttachmentSelectionDialogStyle.kt$AttachmentSelectionDialogStyle.Companion$allowAccessToGalleryIcon = context.getDrawableCompat(R.drawable.stream_ui_attachment_permission_media)!!</ID>
    <ID>MaxLineLength:AutoLinkableTextTransformer.kt$AutoLinkableTextTransformer$*</ID>
    <ID>MaxLineLength:AutoLinkableTextTransformer.kt$AutoLinkableTextTransformer$public</ID>
    <ID>MaxLineLength:AvatarView.kt$AvatarView$*</ID>
    <ID>MaxLineLength:ChannelActionsDialogViewStyle.kt$ChannelActionsDialogViewStyle$*</ID>
    <ID>MaxLineLength:ChannelListPayloadDiff.kt$ChannelListPayloadDiff$return nameChanged || avatarViewChanged || usersChanged || lastMessageChanged || readStateChanged || unreadCountChanged || extraDataChanged</ID>
    <ID>MaxLineLength:ChannelListView.kt$ChannelListView$is ChannelListViewModel.ErrorEvent.DeleteChannelError -> R.string.stream_ui_channel_list_error_delete_channel</ID>
    <ID>MaxLineLength:ChannelListViewModel.kt$ChannelListViewModel$*</ID>
    <ID>MaxLineLength:ChannelListViewModel.kt$ChannelListViewModel$logger.logE("Could not delete channel with id: ${channel.id}. Error: ${chatError.message}. Cause: ${chatError.cause?.message}")</ID>
    <ID>MaxLineLength:ChannelListViewModel.kt$ChannelListViewModel$logger.logE("Could not hide channel with id: ${channel.id}. Error: ${chatError.message}. Cause: ${chatError.cause?.message}")</ID>
    <ID>MaxLineLength:ChannelListViewModel.kt$ChannelListViewModel$logger.logE("Could not leave channel with id: ${channel.id}. Error: ${chatError.message}. Cause: ${chatError.cause?.message}")</ID>
    <ID>MaxLineLength:ChannelListViewModel.kt$ChannelListViewModel$logger.logE("Could not load more channels. Error: ${chatError.message}. Cause: ${chatError.cause?.message}")</ID>
    <ID>MaxLineLength:ChannelListViewModel.kt$ChannelListViewModel$logger.logE("Could not mark all messages as read. Error: ${chatError.message}. Cause: ${chatError.cause?.message}")</ID>
    <ID>MaxLineLength:ChannelListViewModel.kt$ChannelListViewModel$queryChannelsState.chatEventHandler = chatEventHandlerFactory.chatEventHandler(queryChannelsState.channels)</ID>
    <ID>MaxLineLength:ChannelListViewModelFactory.kt$ChannelListViewModelFactory$*</ID>
    <ID>MaxLineLength:ChannelListViewStyle.kt$ChannelListViewStyle$*</ID>
    <ID>MaxLineLength:Context.kt$theme.resolveAttribute(R.attr.streamUiTheme, typedValue, true) -> ContextThemeWrapper(this, typedValue.resourceId)</ID>
    <ID>MaxLineLength:CustomAttachmentsViewHolder.kt$CustomAttachmentsViewHolder$this.innerAttachmentViewHolder</ID>
    <ID>MaxLineLength:DefaultStreamTransliterator.kt$DefaultStreamTransliterator$logger.logD("This android version: ${Build.VERSION.SDK_INT} doesn't support transliteration natively. User a custom StreamTransliterator to add transliteration.")</ID>
    <ID>MaxLineLength:DeletedMessageListItemPredicate.kt$DeletedMessageListItemPredicate$* Predicate class used to filter [MessageListItem.MessageItem] items which are deleted. Used by [MessageListView.setDeletedMessageListItemPredicate].</ID>
    <ID>MaxLineLength:DeletedMessageListItemPredicate.kt$DeletedMessageListItemPredicate.VisibleToAuthorOnly$* Predicate object used to hide deleted [MessageListItem.MessageItem] items from everyone except for the author of the message.</ID>
    <ID>MaxLineLength:FileAttachmentsViewHolder.kt$FileAttachmentsViewHolder$*</ID>
    <ID>MaxLineLength:FileAttachmentsViewHolder.kt$FileAttachmentsViewHolder$AttachmentDownloadClickListener(container.attachmentDownloadClickListener::onAttachmentDownloadClick)</ID>
    <ID>MaxLineLength:FootnoteDecorator.kt$FootnoteDecorator$SyncStatus.IN_PROGRESS</ID>
    <ID>MaxLineLength:GapView.kt$GapView$constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context.createStreamThemeWrapper(), attrs, defStyleAttr)</ID>
    <ID>MaxLineLength:GiphyAttachmentViewHolder.kt$GiphyAttachmentViewHolder$*</ID>
    <ID>MaxLineLength:GiphyMediaAttachmentViewStyle.kt$GiphyMediaAttachmentViewStyle$*</ID>
    <ID>MaxLineLength:GiphyMediaAttachmentViewStyle.kt$GiphyMediaAttachmentViewStyle.Companion$attributes.getDrawable(R.styleable.GiphyMediaAttachmentView_streamUiGiphyMediaAttachmentPlaceHolderIcon)</ID>
    <ID>MaxLineLength:GiphyMediaAttachmentViewStyle.kt$GiphyMediaAttachmentViewStyle.Companion$attributes.getDrawable(R.styleable.GiphyMediaAttachmentView_streamUiGiphyMediaAttachmentProgressIcon)</ID>
    <ID>MaxLineLength:GiphyViewHolderStyle.kt$GiphyViewHolderStyle$*</ID>
    <ID>MaxLineLength:ImageAttachmentViewHolder.kt$ImageAttachmentViewHolder$data.message.attachments.count { it.uploadState == null || it.uploadState == Attachment.UploadState.Success }</ID>
    <ID>MaxLineLength:ImageAttachmentViewStyle.kt$ImageAttachmentViewStyle$*</ID>
    <ID>MaxLineLength:MediaAttachmentDialogFragment.kt$MediaAttachmentDialogFragment$viewModel.attachmentGalleryItemsLiveData.observe(viewLifecycleOwner, mediaAttachmentGridView::setAttachments)</ID>
    <ID>MaxLineLength:MentionListViewModel.kt$MentionListViewModel$logger.logD("Getting mentions (offset: ${currentState.results.size}, limit: $QUERY_LIMIT, user ID: ${currentUser.id})")</ID>
    <ID>MaxLineLength:MessageBackgroundFactoryImpl.kt$MessageBackgroundFactoryImpl$// however, if a user has specified a background color attribute, we use it for _all_ message backgrounds.</ID>
    <ID>MaxLineLength:MessageInputFieldView.kt$MessageInputFieldView$*</ID>
    <ID>MaxLineLength:MessageInputFieldView.kt$MessageInputFieldView$if</ID>
    <ID>MaxLineLength:MessageInputView.kt$MessageInputView$binding.messageInputFieldView.selectedAttachmentsCount.value > messageInputViewStyle.maxAttachmentsCount</ID>
    <ID>MaxLineLength:MessageInputView.kt$MessageInputView$consumeSelectedAttachmentsCount(attachmentsCount = binding.messageInputFieldView.selectedAttachmentsCount.value)</ID>
    <ID>MaxLineLength:MessageInputView.kt$MessageInputView.Companion.&lt;no name provided>$throw IllegalStateException("MessageInputView#messageSendHandler needs to be configured to send messages")</ID>
    <ID>MaxLineLength:MessageInputView.kt$MessageInputView.Companion.&lt;no name provided>$throw IllegalStateException("MessageInputView#sendMessageWithCustomAttachments needs to be configured to send messages")</ID>
    <ID>MaxLineLength:MessageInputView.kt$MessageInputView.Companion.&lt;no name provided>$throw IllegalStateException("MessageInputView#sendToThreadWithCustomAttachments needs to be configured to send messages")</ID>
    <ID>MaxLineLength:MessageInputView.kt$MessageInputView.MessageInputViewModeListener$*</ID>
    <ID>MaxLineLength:MessageInputView.kt$MessageInputView.SelectedAttachmentsCountListener$*</ID>
    <ID>MaxLineLength:MessageInputView.kt$MessageInputView.UserLookupHandler$*</ID>
    <ID>MaxLineLength:MessageInputViewStyle.kt$MessageInputViewStyle$*</ID>
    <ID>MaxLineLength:MessageInputViewStyle.kt$MessageInputViewStyle.Companion$require(maxAttachmentsCount &lt;= AttachmentConstants.MAX_ATTACHMENTS_COUNT) { "maxAttachmentsCount cannot by greater than ${AttachmentConstants.MAX_ATTACHMENTS_COUNT}! Current value: $maxAttachmentsCount" }</ID>
    <ID>MaxLineLength:MessageInputViewStyle.kt$MessageInputViewStyle.Companion$val</ID>
    <ID>MaxLineLength:MessageListHeaderViewStyle.kt$MessageListHeaderViewStyle$*</ID>
    <ID>MaxLineLength:MessageListItemDecoratorProvider.kt$MessageListItemDecoratorProvider$*</ID>
    <ID>MaxLineLength:MessageListItemDiffCallback.kt$MessageListItemDiffCallback$is MessageListItem.DateSeparatorItem -> oldItem.date == (newItem as? MessageListItem.DateSeparatorItem)?.date</ID>
    <ID>MaxLineLength:MessageListItemDiffCallback.kt$MessageListItemDiffCallback$is MessageListItem.TypingItem</ID>
    <ID>MaxLineLength:MessageListItemDiffCallback.kt$MessageListItemDiffCallback$reactions = (oldMessage.reactionCounts != newMessage.reactionCounts) || (oldMessage.reactionScores != newMessage.reactionScores)</ID>
    <ID>MaxLineLength:MessageListItemStyle.kt$MessageListItemStyle$*</ID>
    <ID>MaxLineLength:MessageListItemStyle.kt$MessageListItemStyle.Builder$require(messageMaxWidthFactorMine in 0.75..1.0) { "messageMaxWidthFactorMine cannot be lower than 0.75 and greater than 1! Current value: $messageMaxWidthFactorMine" }</ID>
    <ID>MaxLineLength:MessageListItemStyle.kt$MessageListItemStyle.Builder$require(messageMaxWidthFactorTheirs in 0.75..1.0) { "messageMaxWidthFactorTheirs cannot be lower than 0.75 and greater than 1! Current value: $messageMaxWidthFactorTheirs" }</ID>
    <ID>MaxLineLength:MessageListItemViewHolderFactory.kt$MessageListItemViewHolderFactory$*</ID>
    <ID>MaxLineLength:MessageListListenerContainerImpl.kt$MessageListListenerContainerImpl$attachmentDownloadClickListener: AttachmentDownloadClickListener = AttachmentDownloadClickListener(EmptyFunctions.ONE_PARAM)</ID>
    <ID>MaxLineLength:MessageListView.kt$MessageListView$*</ID>
    <ID>MaxLineLength:MessageListView.kt$MessageListView$public</ID>
    <ID>MaxLineLength:MessageListView.kt$MessageListView.MessagesStart.Companion$?:</ID>
    <ID>MaxLineLength:MessageListView.kt$MessageListView.NewMessagesBehaviour.Companion$?:</ID>
    <ID>MaxLineLength:MessageListViewModelFactory.kt$MessageListViewModelFactory$?:</ID>
    <ID>MaxLineLength:MessageListViewStyle.kt$MessageListViewStyle$*</ID>
    <ID>MaxLineLength:MessageOptionsDialogFragment.kt$MessageOptionsDialogFragment$return ChatClient.instance().globalState.user.value?.mutes?.any { mute -> mute.target.id == message.user.id } == true</ID>
    <ID>MaxLineLength:MessageOptionsView.kt$MessageOptionsView.Configuration.Companion$reactionsEnabled</ID>
    <ID>MaxLineLength:MessageReplyStyle.kt$MessageReplyStyle$*</ID>
    <ID>MaxLineLength:MessageReplyView.kt$MessageReplyView$setStrokeTint(style?.messageStrokeColorTheirs ?: context.getColorCompat(R.color.stream_ui_grey_whisper))</ID>
    <ID>MaxLineLength:MessageReplyView.kt$MessageReplyView$val tintColor = style?.messageBackgroundColorTheirs ?: context.getColorCompat(R.color.stream_ui_white)</ID>
    <ID>MaxLineLength:ReactionsDecorator.kt$ReactionsDecorator$expectedReactionsAndOffsetWidth > rootConstraintLayout.measuredWidth -> expectedReactionsAndOffsetWidth - rootWidth</ID>
    <ID>MaxLineLength:ScrollButtonViewStyle.kt$ScrollButtonViewStyle$*</ID>
    <ID>MaxLineLength:SearchResultListViewStyle.kt$SearchResultListViewStyle$*</ID>
    <ID>MaxLineLength:SelectedCustomAttachmentAdapter.kt$BaseSelectedCustomAttachmentViewHolder$*</ID>
    <ID>MaxLineLength:SelectedCustomAttachmentAdapter.kt$SelectedCustomAttachmentViewHolderFactory$*</ID>
    <ID>MaxLineLength:SelectedCustomAttachmentAdapter.kt$SelectedCustomAttachmentViewHolderFactory$public</ID>
    <ID>MaxLineLength:ShapeAppearanceModelFactory.kt$ShapeAppearanceModelFactory$* Class that creates the default version of ShapeAppearanceModel used in the background of messages, attachments, pictures...</ID>
    <ID>MaxLineLength:SimpleChannelListView.kt$SimpleChannelListView$check(::adapter.isInitialized.not()) { "Adapter was already initialized, please set ChannelListItemViewHolderFactory first" }</ID>
    <ID>MaxLineLength:SuggestionListController.kt$SuggestionListController$by Delegates.observable(MessageInputView.DefaultUserLookupHandler(emptyList())) { _, _, _ -> computeSuggestions() }</ID>
    <ID>MaxLineLength:SuggestionListController.kt$SuggestionListController$private</ID>
    <ID>MaxLineLength:SuggestionListController.kt$SuggestionListController$suggestionListControllerListener?.onSuggestionListUiVisibilityChanged(suggestionListUi.isSuggestionListVisible())</ID>
    <ID>MaxLineLength:SuggestionListControllerListener.kt$DefaultSuggestionListControllerListener$internal</ID>
    <ID>MaxLineLength:SuggestionListViewStyle.kt$SuggestionListViewStyle$*</ID>
    <ID>MaxLineLength:SwipeViewHolder.kt$SwipeViewHolder$* If the swipe view is swiped of not. When true, swipe view is completely swiped, when false it is in the default state</ID>
    <ID>MaxLineLength:TypingIndicatorViewStyle.kt$TypingIndicatorViewStyle$*</ID>
    <ID>MaxLineLength:ViewReactionsBubbleDrawer.kt$ViewReactionsBubbleDrawer$"You need to specify either bubbleBorderColorTheirs and bubbleBorderWidthTheirs to draw a border for another user reaction bubble"</ID>
    <ID>NestedBlockDepth:MessageListHeaderView.kt$MessageListHeaderView$private fun renderSubtitleState()</ID>
    <ID>ReturnCount:AttachmentDestination.kt$AttachmentDestination$public fun showAttachment(message: Message, attachment: Attachment)</ID>
    <ID>ReturnCount:ChatFontsImpl.kt$ChatFontsImpl$private fun getFont(@FontRes fontRes: Int): Typeface?</ID>
    <ID>ReturnCount:ChatFontsImpl.kt$ChatFontsImpl$private fun getFont(fontPath: String): Typeface?</ID>
    <ID>ReturnCount:DefaultUserLookupHandler.kt$private fun levenshtein(search: CharSequence, target: CharSequence): Int</ID>
    <ID>SerialVersionUIDInSerializableClass:AttachmentOptionsView.kt$AttachmentOptionsView$Configuration : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:MessageOptionsDialogFragment.kt$MessageOptionsDialogFragment$MessageOptionsHandlers : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:MessageOptionsView.kt$MessageOptionsView$Configuration : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:TextStyle.kt$TextStyle : Serializable</ID>
    <ID>SwallowedException:WebLinkDestination.kt$WebLinkDestination$e: ActivityNotFoundException</ID>
    <ID>TooGenericExceptionCaught:ChatFontsImpl.kt$ChatFontsImpl$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:MessageInputView.kt$MessageInputView$e: Exception</ID>
    <ID>TooManyFunctions:ChannelListView.kt$ChannelListView : FrameLayout</ID>
    <ID>TooManyFunctions:MessageInputFieldView.kt$MessageInputFieldView : FrameLayout</ID>
    <ID>TooManyFunctions:MessageInputView.kt$MessageInputView : ConstraintLayout</ID>
    <ID>TooManyFunctions:MessageListHeaderView.kt$MessageListHeaderView : FrameLayout</ID>
    <ID>TooManyFunctions:MessageListItemViewHolderFactory.kt$MessageListItemViewHolderFactory</ID>
    <ID>TooManyFunctions:MessageListView.kt$MessageListView : ConstraintLayout</ID>
    <ID>TooManyFunctions:SimpleChannelListView.kt$SimpleChannelListView : RecyclerView</ID>
    <ID>UnnecessaryAbstractClass:InnerAttachmentViewHolder.kt$InnerAttachmentViewHolder</ID>
    <ID>UnusedImports:ChannelListViewStyle.kt$import io.getstream.chat.android.ui.channel.list.adapter.viewholder.internal.ChannelViewHolder</ID>
    <ID>UnusedImports:MessageListItemStyle.kt$import io.getstream.chat.android.ui.message.list.reactions.edit.internal.EditReactionsView</ID>
    <ID>UnusedImports:MessageListItemStyle.kt$import io.getstream.chat.android.ui.message.list.reactions.view.internal.ViewReactionsView</ID>
    <ID>UnusedImports:MessageListViewStyle.kt$import io.getstream.chat.android.ui.message.list.adapter.viewholder.internal.GiphyViewHolder</ID>
    <ID>UnusedImports:MessageListViewStyle.kt$import io.getstream.chat.android.ui.message.list.internal.ScrollButtonView</ID>
    <ID>UnusedPrivateClass:MediaAttachmentGridView.kt$MediaAttachmentGridView$SharedMediaSpaceItemDecorator : ItemDecoration</ID>
    <ID>UnusedPrivateMember:MessageInputViewStyle.kt$MessageInputViewStyle.Companion$val messageInputHintTextColor = a.getColor( R.styleable.MessageInputView_streamUiMessageInputHintTextColor, context.getColorCompat(R.color.stream_ui_text_color_hint) )</ID>
    <ID>UnusedPrivateMember:MessageInputViewStyle.kt$MessageInputViewStyle.Companion$val messageInputTextColor = a.getColor( R.styleable.MessageInputView_streamUiMessageInputTextColor, context.getColorCompat(R.color.stream_ui_text_color_primary) )</ID>
    <ID>UnusedPrivateMember:MessageInputViewStyle.kt$MessageInputViewStyle.Companion$val messageInputTextSize = a.getDimensionPixelSize( R.styleable.MessageInputView_streamUiMessageInputTextSize, context.resources.getDimensionPixelSize(R.dimen.stream_ui_text_size_input) ).toFloat()</ID>
    <ID>VariableNaming:ChannelListView.kt$ChannelListView$private val CHANNEL_LIST_VIEW_ID = generateViewId()</ID>
  </CurrentIssues>
</SmellBaseline>
