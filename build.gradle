import io.getstream.chat.android.Dependencies
import io.getstream.chat.android.command.changelog.plugin.ChangelogReleaseSectionPlugin
import io.getstream.chat.android.command.release.plugin.ReleasePlugin
import io.getstream.chat.android.command.unittest.plugin.UnitTestsPlugin
import io.getstream.chat.android.command.version.plugin.VersionBumpPlugin
import io.getstream.chat.android.command.version.plugin.MinorBumpPlugin
import io.getstream.chat.android.command.version.plugin.VersionPrintPlugin
import io.getstream.chat.android.command.changelog.plugin.ChangelogAddModelSectionPlugin

apply plugin: "com.github.ben-manes.versions"
apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply plugin: 'binary-compatibility-validator'
apply plugin: 'org.jetbrains.dokka'
apply from: "${rootDir}/scripts/sample-app-versioner.gradle"
apply plugin: UnitTestsPlugin
apply plugin: ReleasePlugin
apply plugin: ChangelogReleaseSectionPlugin
apply plugin: VersionBumpPlugin
apply plugin: MinorBumpPlugin
apply plugin: VersionPrintPlugin
apply plugin: ChangelogAddModelSectionPlugin

buildscript {
    repositories {
        // fetch plugins from google maven (https://maven.google.com)
        google() {
            content {
                includeGroupByRegex("androidx\\..*")
                includeGroupByRegex("com\\.android(\\..*|)")
                includeGroupByRegex("com\\.google\\.android\\..*")
                includeGroupByRegex("com\\.google\\.firebase(\\..*|)")
                includeGroupByRegex("com\\.google\\.gms(\\..*|)")
                includeGroupByRegex("com\\.google\\.mlkit")
                includeGroupByRegex("com\\.google\\.oboe")
                includeGroupByRegex("com\\.google\\.prefab")
                includeGroupByRegex("com\\.google\\.testing\\.platform")
            }
            mavenContent {
                releasesOnly()
            }
        }

        maven {
            url "https://jitpack.io"
            content {
                includeModule("com.github.passsy", "gradle-gitVersioner-plugin")
            }
        }

        // fetch plugins from gradle plugin portal (https://plugins.gradle.org)
        gradlePluginPortal()

        // Fallback for the rest of the dependencies
        mavenCentral()
    }

    dependencies {
        classpath Dependencies.androidGradlePlugin
        classpath Dependencies.kotlinGradlePlugin
        classpath Dependencies.composeCompilerPlugin
        classpath Dependencies.googleServicesPlugin
        classpath Dependencies.androidJunit5GradlePlugin
        classpath Dependencies.gitversionerPlugin
        classpath Dependencies.firebaseCrashlyticsPlugin
        classpath Dependencies.gradleVersionsPlugin
        classpath Dependencies.navigationSafeArgsGradlePlugin
        classpath Dependencies.gradleNexusPublishPlugin
        classpath Dependencies.paparazziPlugin
        classpath Dependencies.baselineProfilePlugin
        classpath Dependencies.dokka
        classpath Dependencies.kotlinBinaryValidator
        classpath Dependencies.shot
        classpath Dependencies.spotlessGradlePlugin
        classpath Dependencies.ksp
        classpath Dependencies.detektPlugin
    }
}

subprojects {
    if (it.name != 'stream-chat-android-docs'
            && it.buildFile.exists()) {
        apply from: "${rootDir}/spotless/spotless.gradle"
    }
    apply plugin: "io.gitlab.arturbosch.detekt"
}

allprojects {
    repositories {
        // fetch plugins from google maven (https://maven.google.com)
        google() {
            content {
                includeGroupByRegex("androidx\\..*")
                includeGroupByRegex("com\\.android(\\..*|)")
                includeGroupByRegex("com\\.google\\.android\\..*")
                includeGroupByRegex("com\\.google\\.firebase(\\..*|)")
                includeGroupByRegex("com\\.google\\.gms(\\..*|)")
                includeGroupByRegex("com\\.google\\.mlkit")
                includeGroupByRegex("com\\.google\\.oboe")
                includeGroupByRegex("com\\.google\\.prefab")
                includeGroupByRegex("com\\.google\\.testing\\.platform")
            }
            mavenContent {
                releasesOnly()
            }
        }

        // Fallback for the rest of the dependencies
        mavenCentral()
    }
}

versionPrint {
    printFilePath = "build/tmp/temp-version"
}

unitTestDebugScript {
    outputPath = "build/tmp/unit-tests-command.sh"
}

releaseScript {
    changelogPath = "CHANGELOG.md"
}

changelogReleaseSection {
    changelogPath = "CHANGELOG.md"
}

changelogAddModelSection {
    changelogPath = "CHANGELOG.md"
    changelogModel = "CHANGELOG_MODEL.md"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

dependencyUpdates {
    rejectVersionIf {
        Dependencies.isStable(it.currentVersion) && Dependencies.isNonStable(it.candidate.version)
    }
}

apiValidation {
    ignoredPackages += [
            'com/getstream/sdk/chat/databinding',
            'io/getstream/chat/android/ui/databinding',
    ]

    ignoredProjects += [
            'stream-chat-android-docs',
            'stream-chat-android-ui-components-sample',
            'stream-chat-android-test',
            'stream-chat-android-compose-sample',
            'stream-chat-android-ui-guides',
    ]

    nonPublicMarkers += [
            'io.getstream.chat.android.core.internal.InternalStreamChatApi',
    ]
}

apply from: "${rootDir}/scripts/publish-root.gradle"
