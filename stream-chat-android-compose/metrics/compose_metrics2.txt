restartable skippable fun LoadMoreHandler(
  stable listState: LazyListState
  stable loadMoreThreshold: Int = @dynamic LiveLiterals$LoadMoreHandlerKt.Int$param-loadMoreThreshold$fun-LoadMoreHandler()
  stable loadMore: Function0<Unit>
)
restartable fun ObservePermissionChanges(
  unstable <this>: DownloadPermissionHandler
)
fun reactionOption1(
  unused stable <this>: PreviewReactionOptionData
): ReactionOptionItemState
fun reactionOption2(
  unused stable <this>: PreviewReactionOptionData
): ReactionOptionItemState
fun reactionOption3(
  unused stable <this>: PreviewReactionOptionData
): ReactionOptionItemState
fun reactionOption4(
  unused stable <this>: PreviewReactionOptionData
): ReactionOptionItemState
fun oneReaction(
  stable <this>: PreviewReactionOptionData
): List<ReactionOptionItemState>
fun manyReactions(
  stable <this>: PreviewReactionOptionData
): List<ReactionOptionItemState>
fun user1Reaction(
  unused stable <this>: PreviewUserReactionData
): UserReactionItemState
fun user2Reaction(
  unused stable <this>: PreviewUserReactionData
): UserReactionItemState
fun user3Reaction(
  unused stable <this>: PreviewUserReactionData
): UserReactionItemState
fun user4Reaction(
  unused stable <this>: PreviewUserReactionData
): UserReactionItemState
fun oneUserReaction(
  stable <this>: PreviewUserReactionData
): List<UserReactionItemState>
fun manyUserReactions(
  stable <this>: PreviewUserReactionData
): List<UserReactionItemState>
restartable fun RunningWaveForm(
  unstable restartKey: Any
  stable newValueKey: Int
  stable latestValue: Int?
  stable modifier: Modifier? = @static Companion
  stable maxInputValue: Int = @dynamic LiveLiterals$AudioRecordingKt.Int$param-maxInputValue$fun-RunningWaveForm()
  stable barMinHeight: Float = @dynamic LiveLiterals$AudioRecordingKt.Float$param-barMinHeight$fun-RunningWaveForm()
  stable barWidth: Dp = @dynamic LiveLiterals$AudioRecordingKt.Int$$$this$call-$get-dp$$param-barWidth$fun-RunningWaveForm().dp
  stable barGap: Dp = @dynamic LiveLiterals$AudioRecordingKt.Int$$$this$call-$get-dp$$param-barGap$fun-RunningWaveForm().dp
  stable barCornerRadius: CornerRadius = @dynamic CornerRadius(barWidth.value / LiveLiterals$AudioRecordingKt.Float$arg-0$call-div$arg-0$call-CornerRadius$param-barCornerRadius$fun-RunningWaveForm(), barWidth.value / LiveLiterals$AudioRecordingKt.Float$arg-0$call-div$arg-1$call-CornerRadius$param-barCornerRadius$fun-RunningWaveForm())
  stable barBrush: Brush? = @dynamic Companion.linearGradient(
  colorStops   =   Pair  (  LiveLiterals$AudioRecordingKt  .  Float$arg-0$call-$init$$0$vararg$arg-0$call-linearGradient$param-barBrush$fun-RunningWaveForm  (  )  ,   ChatTheme  .  <get-colors>  (  $composer  ,   0b0110  )  .  primaryAccent  )  ,   Pair  (  LiveLiterals$AudioRecordingKt  .  Float$arg-0$call-$init$$1$vararg$arg-0$call-linearGradient$param-barBrush$fun-RunningWaveForm  (  )  ,   ChatTheme  .  <get-colors>  (  $composer  ,   0b0110  )  .  primaryAccent  )
)
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AudioRecordAttachmentContent(
  stable modifier: Modifier? = @static Companion
  stable audioTrack: Attachment
  stable onPlayPress: Function1<Attachment, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AudioRecordGroupContent(
  stable modifier: Modifier? = @static Companion
  stable attachmentState: AttachmentState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FileAttachmentContent(
  stable attachmentState: AttachmentState
  stable modifier: Modifier? = @static Companion
  stable onItemClick: Function2<@[ParameterName(name = 'previewHandlers')] List<AttachmentPreviewHandler>, @[ParameterName(name = 'attachment')] Attachment, Unit>? = @dynamic onFileAttachmentContentItemClick
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FileAttachmentItem(
  stable attachment: Attachment
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FileAttachmentDescription(
  stable attachment: Attachment
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FileAttachmentDownloadIcon(
  stable <this>: RowScope
  stable attachment: Attachment
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FileAttachmentImage(
  stable attachment: Attachment
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun FileAttachmentPreviewContent(
  unstable attachments: List<Attachment>
  stable onAttachmentRemoved: Function1<Attachment, Unit>
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FileAttachmentQuotedContent(
  stable attachment: Attachment
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FileUploadContent(
  stable attachmentState: AttachmentState
  stable modifier: Modifier? = @static Companion
  stable onItemClick: Function2<Attachment, List<AttachmentPreviewHandler>, Unit>? = @dynamic onFileUploadContentItemClick
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FileUploadItem(
  stable attachment: Attachment
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ProgressInfo(
  stable uploadedBytes: Long
  stable totalBytes: Long
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun GiphyAttachmentContent(
  stable attachmentState: AttachmentState
  stable modifier: Modifier? = @static Companion
  stable giphyInfoType: GiphyInfoType? = @static GiphyInfoType.ORIGINAL
  stable giphySizingMode: GiphySizingMode? = @static GiphySizingMode.ADAPTIVE
  stable contentScale: ContentScale? = @static Companion.Crop
  stable onItemClick: Function2<@[ParameterName(name = 'context')] Context, @[ParameterName(name = 'previewUrl')] String, Unit>? = @dynamic onGiphyAttachmentContentClick
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun ImageAttachmentPreviewContent(
  unstable attachments: List<Attachment>
  stable onAttachmentRemoved: Function1<Attachment, Unit>
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LinkAttachmentContent(
  stable attachmentState: AttachmentState
  stable linkDescriptionMaxLines: Int
  stable modifier: Modifier? = @static Companion
  stable onItemClick: Function2<@[ParameterName(name = 'context')] Context, @[ParameterName(name = 'Url')] String, Unit>? = @dynamic onLinkAttachmentContentClick
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LinkAttachmentImagePreview(
  stable attachment: Attachment
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LinkAttachmentTitle(
  stable text: String
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LinkAttachmentDescription(
  stable description: String
  stable linkDescriptionMaxLines: Int
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun MediaAttachmentContent(
  stable attachmentState: AttachmentState
  stable modifier: Modifier? = @static Companion
  stable maximumNumberOfPreviewedItems: Int = @dynamic LiveLiterals$MediaAttachmentContentKt.Int$param-maximumNumberOfPreviewedItems$fun-MediaAttachmentContent()
  stable skipEnrichUrl: Boolean = @dynamic LiveLiterals$MediaAttachmentContentKt.Boolean$param-skipEnrichUrl$fun-MediaAttachmentContent()
  stable onItemClick: Function6<@[ParameterName(name = 'mediaGalleryPreviewLauncher')] ManagedActivityResultLauncher<Input, MediaGalleryPreviewResult?>, @[ParameterName(name = 'message')] Message, @[ParameterName(name = 'attachmentPosition')] Int, @[ParameterName(name = 'videoThumbnailsEnabled')] Boolean, @[ParameterName(name = 'streamCdnImageResizing')] StreamCdnImageResizing, @[ParameterName(name = 'skipEnrichUrl')] Boolean, Unit>? = @dynamic onMediaAttachmentContentItemClick
  stable itemOverlayContent: Function3<@[ParameterName(name = 'attachmentType')] String?, Composer, Int, Unit>? = @static ComposableSingletons$MediaAttachmentContentKt.lambda-1
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun SingleMediaAttachment(
  stable attachment: Attachment
  stable message: Message
  stable skipEnrichUrl: Boolean
  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

  stable onLongItemClick: Function1<Message, Unit>
  stable onContentItemClick: Function6<@[ParameterName(name = 'mediaGalleryPreviewLauncher')] ManagedActivityResultLauncher<Input, MediaGalleryPreviewResult?>, @[ParameterName(name = 'message')] Message, @[ParameterName(name = 'attachmentPosition')] Int, @[ParameterName(name = 'videoThumbnailsEnabled')] Boolean, @[ParameterName(name = 'streamCdnImageResizing')] StreamCdnImageResizing, @[ParameterName(name = 'skipEnrichUrl')] Boolean, Unit>
  stable overlayContent: Function3<@[ParameterName(name = 'attachmentType')] String?, Composer, Int, Unit>
)
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun MultipleMediaAttachments(
  stable <this>: RowScope
  unstable attachments: List<Attachment>
  stable attachmentCount: Int
  stable gridSpacing: Dp
  stable maximumNumberOfPreviewedItems: Int = @dynamic LiveLiterals$MediaAttachmentContentKt.Int$param-maximumNumberOfPreviewedItems$fun-MultipleMediaAttachments()
  stable message: Message
  stable skipEnrichUrl: Boolean
  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

  stable onLongItemClick: Function1<Message, Unit>
  stable onContentItemClick: Function6<@[ParameterName(name = 'mediaGalleryPreviewLauncher')] ManagedActivityResultLauncher<Input, MediaGalleryPreviewResult?>, @[ParameterName(name = 'message')] Message, @[ParameterName(name = 'attachmentPosition')] Int, @[ParameterName(name = 'videoThumbnailsEnabled')] Boolean, @[ParameterName(name = 'streamCdnImageResizing')] StreamCdnImageResizing, @[ParameterName(name = 'skipEnrichUrl')] Boolean, Unit>
  stable itemOverlayContent: Function3<@[ParameterName(name = 'attachmentType')] String?, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun MediaAttachmentContentItem(
  stable message: Message
  stable attachmentPosition: Int
  stable attachment: Attachment
  stable skipEnrichUrl: Boolean
  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>
  stable onLongItemClick: Function1<Message, Unit>
  stable modifier: Modifier? = @static Companion
  stable onItemClick: Function6<@[ParameterName(name = 'mediaGalleryPreviewLauncher')] ManagedActivityResultLauncher<Input, MediaGalleryPreviewResult?>, @[ParameterName(name = 'message')] Message, @[ParameterName(name = 'attachmentPosition')] Int, @[ParameterName(name = 'videoThumbnailsEnabled')] Boolean, @[ParameterName(name = 'streamCdnImageResizing')] StreamCdnImageResizing, @[ParameterName(name = 'skipEnrichUrl')] Boolean, Unit>
  stable overlayContent: Function3<@[ParameterName(name = 'attachmentType')] String?, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PlayButton(
  stable modifier: Modifier? = @static Companion
  stable contentDescription: String? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MediaAttachmentShowMoreOverlay(
  stable mediaCount: Int
  stable maximumNumberOfPreviewedItems: Int
  stable modifier: Modifier? = @static Companion
)
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun MediaAttachmentPreviewContent(
  unstable attachments: List<Attachment>
  stable onAttachmentRemoved: Function1<Attachment, Unit>
  stable modifier: Modifier? = @static Companion
  stable previewItemOverlayContent: Function3<@[ParameterName(name = 'attachmentType')] String?, Composer, Int, Unit>? = @static ComposableSingletons$MediaAttachmentPreviewContentKt.lambda-1
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun MediaAttachmentPreviewItem(
  stable mediaAttachment: Attachment
  stable onAttachmentRemoved: Function1<Attachment, Unit>
  stable overlayContent: Function3<@[ParameterName(name = 'attachmentType')] String?, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MediaAttachmentQuotedContent(
  stable attachment: Attachment
  stable modifier: Modifier? = @static Companion
)
restartable skippable fun MessageAttachmentsContent(
  stable message: Message
  stable onLongItemClick: Function1<Message, Unit>
  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

)
restartable skippable fun QuotedMessageAttachmentContent(
  stable message: Message
  stable onLongItemClick: Function1<Message, Unit>
  stable modifier: Modifier? = @static Companion
  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun UnsupportedAttachmentContent(
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultItemOverlayContent()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultPreviewItemOverlayContent()
restartable skippable fun SetupSystemUI(
  unused unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaGalleryPreviewContentWrapper(
  stable message: Message
  stable initialAttachmentPosition: Int
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaGalleryPreviewTopBar(
  stable message: Message
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaGalleryPreviewHeaderTitle(
  stable message: Message
  stable modifier: Modifier? = @static Companion
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaGalleryPreviewOptionsToggle(
  stable message: Message
  stable modifier: Modifier? = @static Companion
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaGalleryPreviewOptions(
  unstable options: List<MediaGalleryPreviewOption>
  stable pagerState: PagerState
  unstable attachments: List<Attachment>
  stable modifier: Modifier
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaGalleryPreviewOptionItem(
  unstable mediaGalleryPreviewOption: MediaGalleryPreviewOption
  stable pagerState: PagerState
  unstable attachments: List<Attachment>
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaPreviewContent(
  stable pagerState: PagerState
  unstable attachments: List<Attachment>
  stable onPlaybackError: Function0<Unit>
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun ImagePreviewContent(
  stable attachment: Attachment
  stable pagerState: PagerState
  stable page: Int
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun VideoPreviewContent(
  stable attachment: Attachment
  stable pagerState: PagerState
  stable page: Int
  stable onPlaybackError: Function0<Unit>
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaGalleryPreviewBottomBar(
  unstable attachments: List<Attachment>
  stable pagerState: PagerState
  unstable <this>: MediaGalleryPreviewActivity
)
fun defaultMediaOptions(
  stable message: Message
  unstable <this>: MediaGalleryPreviewActivity
): List<MediaGalleryPreviewOption>
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaGallery(
  stable pagerState: PagerState
  unstable attachments: List<Attachment>
  stable modifier: Modifier? = @static Companion
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaGalleryHeader(
  unstable <this>: MediaGalleryPreviewActivity
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MediaGalleryItem(
  stable index: Int
  stable attachment: Attachment
  stable user: User
  stable pagerState: PagerState
  unstable <this>: MediaGalleryPreviewActivity
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MediaPreviewScreen(
  stable url: String
  stable title: String
  stable onPlaybackError: Function0<Unit>
  stable onBackPressed: Function0<Unit>
  stable <this>: MediaPreviewActivity
)
restartable skippable fun SetupSystemUI(
  unused stable <this>: MediaPreviewActivity
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MediaPreviewToolbar(
  stable title: String
  stable onBackPressed: Function0<Unit>? = @static {

}

  unused stable <this>: MediaPreviewActivity
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MediaPreviewContent(
  stable url: String
  stable onBackPressed: Function0<Unit>? = @static {

}

  stable onPlaybackError: Function0<Unit>
  stable <this>: MediaPreviewActivity
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelsScreen(
  unstable viewModelFactory: ChannelViewModelFactory? = @dynamic ChannelViewModelFactory()
  stable title: String? = @dynamic LiveLiterals$ChannelsScreenKt.String$param-title$fun-ChannelsScreen()
  stable isShowingHeader: Boolean = @dynamic LiveLiterals$ChannelsScreenKt.Boolean$param-isShowingHeader$fun-ChannelsScreen()
  stable isShowingSearch: Boolean = @dynamic LiveLiterals$ChannelsScreenKt.Boolean$param-isShowingSearch$fun-ChannelsScreen()
  stable onHeaderActionClick: Function0<Unit>? = @static {

}

  stable onHeaderAvatarClick: Function0<Unit>? = @static {

}

  stable onItemClick: Function1<Channel, Unit>? = @static { it: Channel ->

}

  stable onViewChannelInfoAction: Function1<Channel, Unit>? = @static { it: Channel ->

}

  stable onBackPressed: Function0<Unit>? = @static {

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ChannelListHeader(
  stable modifier: Modifier? = @static Companion
  stable title: String? = @dynamic LiveLiterals$ChannelListHeaderKt.String$param-title$fun-ChannelListHeader()
  stable currentUser: User? = @static null
  stable connectionState: ConnectionState
  stable color: Color = @dynamic ChatTheme.<get-colors>($composer, 0b0110).barsBackground
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).header
  stable elevation: Dp = @dynamic ChatTheme.<get-dimens>($composer, 0b0110).headerElevation
  stable onAvatarClick: Function1<User?, Unit>? = @static { it: User? ->

}

  stable onHeaderActionClick: Function0<Unit>? = @static {

}

  stable leadingContent: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static composableLambda($composer, 946902133, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C83@4039L127:ChannelListHeader.kt#6wzsn6"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      946902133      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.header.ChannelListHeader.<anonymous> (ChannelListHeader.kt:83)"      )
    }
    
    DefaultChannelHeaderLeadingContent    (    currentUser    ,     onAvatarClick    ,     $composer    ,     0b1110     and     $dirty     shr     0b0110     or     0b01110000     and     $dirty     shr     0b00010010    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable centerContent: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static composableLambda($composer, 244803132, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C89@4237L122:ChannelListHeader.kt#6wzsn6"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      244803132      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.header.ChannelListHeader.<anonymous> (ChannelListHeader.kt:89)"      )
    }
    
    <this>    .    DefaultChannelListHeaderCenterContent    (    connectionState    ,     title    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.header.ChannelListHeader     shr     0b0110     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.header.ChannelListHeader     shl     0b0011    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable trailingContent: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static composableLambda($composer, 6653781, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C95@4432L105:ChannelListHeader.kt#6wzsn6"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      6653781      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.header.ChannelListHeader.<anonymous> (ChannelListHeader.kt:95)"      )
    }
    
    DefaultChannelListHeaderTrailingContent    (    onHeaderActionClick    ,     $composer    ,     0b1110     and     $dirty     shr     0b00011000    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelHeaderLeadingContent(
  stable currentUser: User?
  stable onAvatarClick: Function1<User?, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelListHeaderCenterContent(
  stable <this>: RowScope
  stable connectionState: ConnectionState
  stable title: String
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelListHeaderTrailingContent(
  stable onHeaderActionClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelListHeaderForConnectedStatePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelListHeaderForConnectingStatePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelListHeaderPreview(
  stable title: String? = @dynamic LiveLiterals$ChannelListHeaderKt.String$param-title$fun-ChannelListHeaderPreview()
  stable currentUser: User? = @static PreviewUserData.user1
  stable connectionState: ConnectionState? = @static Connected
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun SelectedChannelMenu(
  stable selectedChannel: Channel
  stable isMuted: Boolean
  stable currentUser: User?
  stable onChannelOptionClick: Function1<ChannelAction, Unit>
  stable onDismiss: Function0<Unit>
  stable modifier: Modifier? = @static Companion
  unstable channelOptions: List<ChannelOptionState>? = @dynamic buildDefaultChannelOptionsState(selectedChannel, isMuted, selectedChannel.ownCapabilities, $composer, 0b001000000000 or 0b1110 and $dirty or 0b01110000 and $dirty)
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).bottomSheet
  stable overlayColor: Color = @dynamic ChatTheme.<get-colors>($composer, 0b0110).overlay
  stable headerContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static composableLambda($composer, -1095933387, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C81@3851L136:SelectedChannelMenu.kt#exs4kj"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -1095933387      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.info.SelectedChannelMenu.<anonymous> (SelectedChannelMenu.kt:81)"      )
    }
    
    DefaultSelectedChannelMenuHeaderContent    (    selectedChannel    ,     currentUser    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty     shr     0b0011    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable centerContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static composableLambda($composer, 1355009533, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C87@4061L152:SelectedChannelMenu.kt#exs4kj"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1355009533      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.info.SelectedChannelMenu.<anonymous> (SelectedChannelMenu.kt:87)"      )
    }
    
    DefaultSelectedChannelMenuCenterContent    (    onChannelOptionClick    ,     channelOptions    ,     $composer    ,     0b01000000     or     0b1110     and     $dirty     shr     0b1001    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultSelectedChannelMenuHeaderContent(
  stable selectedChannel: Channel
  stable currentUser: User?
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultSelectedChannelMenuCenterContent(
  stable onChannelOptionClick: Function1<ChannelAction, Unit>
  unstable channelOptions: List<ChannelOptionState>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SelectedChannelMenuCenteredDialogPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SelectedChannelMenuBottomSheetDialogPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ChannelItem(
  stable channelItem: ChannelItemState
  stable currentUser: User?
  stable onChannelClick: Function1<Channel, Unit>
  stable onChannelLongClick: Function1<Channel, Unit>
  stable modifier: Modifier? = @static Companion
  stable leadingContent: @[ExtensionFunctionType] Function4<RowScope, ChannelItemState, Composer, Int, Unit>? = @static composableLambda($composer, 1121549692, true) { it: ChannelItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C83@4114L112:ChannelItem.kt#exty4z"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011010001   !==   0b10010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1121549692      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelItem.<anonymous> (ChannelItem.kt:83)"      )
    }
    
    DefaultChannelItemLeadingContent    (    it    ,     currentUser    ,     $composer    ,     0b1110     and     $dirty     shr     0b0011     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.list.ChannelItem    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable centerContent: @[ExtensionFunctionType] Function4<RowScope, ChannelItemState, Composer, Int, Unit>? = @static composableLambda($composer, 475146603, true) { it: ChannelItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C89@4313L149:ChannelItem.kt#exty4z"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011011011   !==   0b10010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      475146603      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelItem.<anonymous> (ChannelItem.kt:89)"      )
    }
    
    <this>    .    DefaultChannelItemCenterContent    (    it    .    channel    ,     it    .    isMuted    ,     currentUser    ,     $composer    ,     0b1110     and     $dirty     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.list.ChannelItem     shl     0b0110    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable trailingContent: @[ExtensionFunctionType] Function4<RowScope, ChannelItemState, Composer, Int, Unit>? = @static composableLambda($composer, -190146510, true) { it: ChannelItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C96@4551L117:ChannelItem.kt#exty4z"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011011011   !==   0b10010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -190146510      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelItem.<anonymous> (ChannelItem.kt:96)"      )
    }
    
    <this>    .    DefaultChannelItemTrailingContent    (    it    .    channel    ,     currentUser    ,     $composer    ,     0b1110     and     $dirty     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.list.ChannelItem     shl     0b0011    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelItemLeadingContent(
  stable channelItem: ChannelItemState
  stable currentUser: User?
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelItemCenterContent(
  stable <this>: RowScope
  stable channel: Channel
  stable isMuted: Boolean
  stable currentUser: User?
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelItemTrailingContent(
  stable <this>: RowScope
  stable channel: Channel
  stable currentUser: User?
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelItemForChannelWithUnreadMessagesPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelItemForMutedChannelPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelItemForChannelWithoutMessagesPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelItemPreview(
  stable channel: Channel
  stable isMuted: Boolean = @dynamic LiveLiterals$ChannelItemKt.Boolean$param-isMuted$fun-ChannelItemPreview()
  stable currentUser: User? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [_], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ChannelList(
  stable modifier: Modifier? = @static Companion
  stable contentPadding: PaddingValues? = @static PaddingValues()
  unstable viewModel: ChannelListViewModel? = @dynamic viewModel(null, null, ChannelViewModelFactory(
  chatClient   =   Companion  .  instance  (  )  , 
  querySort   =   Companion  .  descByName  (  LiveLiterals$ChannelListKt  .  String$arg-0$call-descByName$arg-1$call-$init$$arg-2$call-viewModel$param-viewModel$fun-ChannelList  (  )  )  , 
  filters   =   null
), null, $composer, 0b001000000000, 0b1011)
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable onLastItemReached: Function0<Unit>? = @dynamic {
  viewModel  .  loadMore  (  )
}

  stable onChannelClick: Function1<Channel, Unit>? = @static { it: Channel ->

}

  stable onChannelLongClick: Function1<Channel, Unit>? = @dynamic { it: Channel ->
  viewModel  .  selectChannel  (  it  )
}

  stable loadingContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, -1513800507, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C92@4822L26:ChannelList.kt#exty4z"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -1513800507      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelList.<anonymous> (ChannelList.kt:92)"      )
    }
    
    LoadingIndicator    (    modifier    ,     $composer    ,     0b1110     and     $dirty    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable emptyContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, -364237164, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C93@4897L40:ChannelList.kt#exty4z"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -364237164      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelList.<anonymous> (ChannelList.kt:93)"      )
    }
    
    DefaultChannelListEmptyContent    (    modifier    ,     $composer    ,     0b1110     and     $dirty    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable emptySearchContent: Function3<String, Composer, Int, Unit>? = @static composableLambda($composer, 604991037, true) { searchQuery: String, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C95@5021L115:ChannelList.kt#exty4z"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    searchQuery    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      604991037      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelList.<anonymous> (ChannelList.kt:95)"      )
    }
    
    DefaultChannelSearchEmptyContent    (    searchQuery    ,     modifier    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.list.ChannelList     shl     0b0011    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable helperContent: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>? = @static ComposableSingletons$ChannelListKt.lambda-1
  stable loadingMoreContent: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ChannelListKt.lambda-2
  stable itemContent: Function3<ChannelItemState, Composer, Int, Unit>? = @static composableLambda($composer, -1346950663, true) { channelItem: ChannelItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C103@5403L16,105@5429L198:ChannelList.kt#exty4z"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    channelItem    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -1346950663      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelList.<anonymous> (ChannelList.kt:103)"      )
    }
    
    val     user     by     {
      val       user$delegate       =       viewModel      .      user      .      collectAsState      (      null      ,       $composer      ,       0b1000      ,       0b0001      )

      get      (      )       {
        return         user$delegate        .        getValue        (        null        ,         ::        user$delegate        )
      }

    }
    
    DefaultChannelItem    (    channelItem    ,     <get-user>    (    )    ,     onChannelClick    ,     onChannelLongClick    ,     $composer    ,     0b1110     and     $dirty     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.list.ChannelList     shr     0b1001     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.list.ChannelList     shr     0b1001    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable divider: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ChannelListKt.lambda-3
)
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [_], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ChannelList(
  unstable channelsState: ChannelsState
  stable currentUser: User?
  stable modifier: Modifier? = @static Companion
  stable contentPadding: PaddingValues? = @dynamic PaddingValues(LiveLiterals$ChannelListKt.Int$$$this$call-$get-dp$$arg-0$call-PaddingValues$param-contentPadding$fun-ChannelList-1().dp)
  stable lazyListState: LazyListState? = @dynamic rememberLazyListState(0, 0, $composer, 0, 0b0011)
  stable onLastItemReached: Function0<Unit>? = @static {

}

  stable onChannelClick: Function1<Channel, Unit>? = @static { it: Channel ->

}

  stable onChannelLongClick: Function1<Channel, Unit>? = @static { it: Channel ->

}

  stable loadingContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, -601400472, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C178@8916L44:ChannelList.kt#exty4z"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -601400472      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelList.<anonymous> (ChannelList.kt:178)"      )
    }
    
    DefaultChannelListLoadingIndicator    (    modifier    ,     $composer    ,     0b1110     and     $dirty     shr     0b0110    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable emptyContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, -443779849, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C179@9009L40:ChannelList.kt#exty4z"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -443779849      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelList.<anonymous> (ChannelList.kt:179)"      )
    }
    
    DefaultChannelListEmptyContent    (    modifier    ,     $composer    ,     0b1110     and     $dirty     shr     0b0110    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable emptySearchContent: Function3<String, Composer, Int, Unit>? = @static composableLambda($composer, -541095200, true) { searchQuery: String, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C181@9133L115:ChannelList.kt#exty4z"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    searchQuery    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -541095200      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelList.<anonymous> (ChannelList.kt:181)"      )
    }
    
    DefaultChannelSearchEmptyContent    (    searchQuery    ,     modifier    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.list.ChannelList     shr     0b0011    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable helperContent: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>? = @static ComposableSingletons$ChannelListKt.lambda-4
  stable loadingMoreContent: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ChannelListKt.lambda-5
  stable itemContent: Function3<ChannelItemState, Composer, Int, Unit>? = @static composableLambda($composer, 609944988, true) { channelItem: ChannelItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C189@9488L205:ChannelList.kt#exty4z"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    channelItem    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      609944988      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.channels.list.ChannelList.<anonymous> (ChannelList.kt:189)"      )
    }
    
    DefaultChannelItem    (    channelItem    ,     currentUser    ,     onChannelClick    ,     onChannelLongClick    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.list.ChannelList     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.list.ChannelList     shr     0b1100     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.channels.list.ChannelList     shr     0b1100    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable divider: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ChannelListKt.lambda-6
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelItem(
  stable channelItem: ChannelItemState
  stable currentUser: User?
  stable onChannelClick: Function1<Channel, Unit>
  stable onChannelLongClick: Function1<Channel, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelListLoadingIndicator(
  stable modifier: Modifier
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelListEmptyContent(
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelSearchEmptyContent(
  stable searchQuery: String
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelItemDivider()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelListForContentStatePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelListForEmptyStatePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelListForLoadingStatePreview()
restartable scheme("[androidx.compose.ui.UiComposable]") fun ChannelListPreview(
  unstable channelsState: ChannelsState
)
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [_], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun Channels(
  unstable channelsState: ChannelsState
  stable lazyListState: LazyListState
  stable onLastItemReached: Function0<Unit>
  stable modifier: Modifier? = @static Companion
  stable contentPadding: PaddingValues? = @static PaddingValues()
  stable helperContent: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>? = @static ComposableSingletons$ChannelsKt.lambda-1
  stable loadingMoreContent: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ChannelsKt.lambda-2
  stable itemContent: Function3<ChannelItemState, Composer, Int, Unit>
  stable divider: Function2<Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultChannelsLoadingMoreIndicator()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DummyFirstChannelItem()
restartable scheme("[androidx.compose.ui.UiComposable]") fun BackButton(
  unstable painter: Painter
  stable onBackPressed: Function0<Unit>
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CancelIcon(
  stable modifier: Modifier? = @static Companion
  stable onClick: Function0<Unit>
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun EmptyContent(
  stable text: String
  unstable painter: Painter
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LoadingFooter(
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun LoadingIndicator(
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MediaPreviewPlaceHolder(
  asyncImagePainterState: State
  stable isImage: Boolean = @dynamic LiveLiterals$MediaPreviewPlaceHolderKt.Boolean$param-isImage$fun-MediaPreviewPlaceHolder()
  stable progressIndicatorStrokeWidth: Dp
  stable progressIndicatorFillMaxSizePercentage: Float
  stable placeholderIconTintColor: Color = @dynamic ChatTheme.<get-colors>($composer, 0b0110).textLowEmphasis
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun NetworkLoadingIndicator(
  stable modifier: Modifier? = @static Companion
  stable spinnerSize: Dp = @dynamic LiveLiterals$NetworkLoadingIndicatorKt.Int$$$this$call-$get-dp$$param-spinnerSize$fun-NetworkLoadingIndicator().dp
  stable textStyle: TextStyle? = @dynamic ChatTheme.<get-typography>($composer, 0b0110).title3Bold
  stable textColor: Color = @dynamic ChatTheme.<get-colors>($composer, 0b0110).textHighEmphasis
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OnlineIndicator(
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun SearchInput(
  stable query: String
  stable onValueChange: Function1<String, Unit>
  stable modifier: Modifier? = @static Companion
  stable onSearchStarted: Function0<Unit>? = @static {

}

  stable leadingIcon: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static ComposableSingletons$SearchInputKt.lambda-1
  stable label: Function2<Composer, Int, Unit>? = @static ComposableSingletons$SearchInputKt.lambda-2
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultSearchLeadingIcon(
  stable <this>: RowScope
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultSearchLabel()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SearchInputPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SimpleDialog(
  stable title: String
  stable message: String
  stable onPositiveAction: Function0<Unit>
  stable onDismiss: Function0<Unit>
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun SimpleMenu(
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).bottomSheet
  stable overlayColor: Color = @dynamic ChatTheme.<get-colors>($composer, 0b0110).overlay
  stable onDismiss: Function0<Unit>? = @static {

}

  stable headerContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static ComposableSingletons$SimpleMenuKt.lambda-1
  stable centerContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static ComposableSingletons$SimpleMenuKt.lambda-2
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun Timestamp(
  unstable date: Date?
  stable modifier: Modifier? = @static Companion
  unstable formatter: DateFormatter? = @dynamic ChatTheme.<get-dateFormatter>($composer, 0b0110)
  stable formatType: DateFormatType? = @static DateFormatType.DATE
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TypingIndicator(
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun TypingIndicatorAnimatedDot(
  stable initialDelayMillis: Int
)
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun FilesPicker(
  unstable files: List<AttachmentPickerItemState>
  stable onItemSelected: Function1<AttachmentPickerItemState, Unit>
  stable onBrowseFilesResult: Function1<List<Uri>, Unit>
  stable modifier: Modifier? = @static Companion
  stable itemContent: Function3<AttachmentPickerItemState, Composer, Int, Unit>? = @static composableLambda($composer, 1844528593, true) { it: AttachmentPickerItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C68@3057L105:FilesPicker.kt#23jaay"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1844528593      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.attachments.files.FilesPicker.<anonymous> (FilesPicker.kt:68)"      )
    }
    
    DefaultFilesPickerItem    (    it    ,     onItemSelected    ,     $composer    ,     AttachmentMetaData    .    $stable     or     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.attachments.files.FilesPicker    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultFilesPickerItem(
  fileItem: AttachmentPickerItemState
  stable onItemSelected: Function1<AttachmentPickerItemState, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FilesPickerItemImage(
  fileItem: AttachmentPickerItemState
  stable modifier: Modifier? = @static Companion
)
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ImagesPicker(
  unstable images: List<AttachmentPickerItemState>
  stable onImageSelected: Function1<AttachmentPickerItemState, Unit>
  stable modifier: Modifier? = @static Companion
  stable itemContent: Function3<AttachmentPickerItemState, Composer, Int, Unit>? = @static composableLambda($composer, 1440577497, true) { imageItem: AttachmentPickerItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C78@3488L116:ImagesPicker.kt#4id4m3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    imageItem    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1440577497      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.attachments.images.ImagesPicker.<anonymous> (ImagesPicker.kt:78)"      )
    }
    
    DefaultImagesPickerItem    (    imageItem    ,     onImageSelected    ,     $composer    ,     AttachmentMetaData    .    $stable     or     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.attachments.images.ImagesPicker    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultImagesPickerItem(
  imageItem: AttachmentPickerItemState
  stable onImageSelected: Function1<AttachmentPickerItemState, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun VideoThumbnailOverlay(
  stable <this>: BoxScope
  stable videoLength: Long
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun Avatar(
  stable imageUrl: String
  stable initials: String
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).avatar
  stable textStyle: TextStyle? = @dynamic ChatTheme.<get-typography>($composer, 0b0110).title3Bold
  unstable placeholderPainter: Painter? = @static null
  stable contentDescription: String? = @static null
  stable initialsAvatarOffset: DpOffset = @dynamic DpOffset(LiveLiterals$AvatarKt.Int$$$this$call-$get-dp$$arg-0$call-DpOffset$param-initialsAvatarOffset$fun-Avatar().dp, LiveLiterals$AvatarKt.Int$$$this$call-$get-dp$$arg-1$call-DpOffset$param-initialsAvatarOffset$fun-Avatar().dp)
  stable onClick: Function0<Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AvatarWithImageUrlPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AvatarWithoutImageUrlPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun AvatarPreview(
  stable imageUrl: String
  stable initials: String
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ChannelAvatar(
  stable channel: Channel
  stable currentUser: User?
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).avatar
  stable textStyle: TextStyle? = @dynamic ChatTheme.<get-typography>($composer, 0b0110).title3Bold
  stable groupAvatarTextStyle: TextStyle? = @dynamic ChatTheme.<get-typography>($composer, 0b0110).captionBold
  stable showOnlineIndicator: Boolean = @dynamic LiveLiterals$ChannelAvatarKt.Boolean$param-showOnlineIndicator$fun-ChannelAvatar()
  stable onlineIndicatorAlignment: OnlineIndicatorAlignment? = @static OnlineIndicatorAlignment.TopEnd
  stable onlineIndicator: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>? = @static composableLambda($composer, -946477714, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C62@2939L48:ChannelAvatar.kt#jlmtrs"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -946477714      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.avatar.ChannelAvatar.<anonymous> (ChannelAvatar.kt:62)"      )
    }
    
    <this>    .    DefaultOnlineIndicator    (    onlineIndicatorAlignment    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.avatar.ChannelAvatar     shr     0b00010010    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable contentDescription: String? = @static null
  stable onClick: Function0<Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelWithImageAvatarPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelAvatarForDirectChannelWithOnlineUserPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelAvatarForDirectChannelWithOneUserPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelAvatarForChannelWithFewMembersPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelAvatarForChannelWithManyMembersPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelAvatarPreview(
  stable channel: Channel
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun GroupAvatar(
  unstable users: List<User>
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).avatar
  stable textStyle: TextStyle? = @dynamic ChatTheme.<get-typography>($composer, 0b0110).captionBold
  stable onClick: Function0<Unit>? = @static null
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun ImageAvatar(
  unstable painter: Painter
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).avatar
  stable contentDescription: String? = @static null
  stable onClick: Function0<Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun InitialsAvatar(
  stable initials: String
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).avatar
  stable textStyle: TextStyle? = @dynamic ChatTheme.<get-typography>($composer, 0b0110).title3Bold
  stable avatarOffset: DpOffset = @dynamic DpOffset(LiveLiterals$InitialsAvatarKt.Int$$$this$call-$get-dp$$arg-0$call-DpOffset$param-avatarOffset$fun-InitialsAvatar().dp, LiveLiterals$InitialsAvatarKt.Int$$$this$call-$get-dp$$arg-1$call-DpOffset$param-avatarOffset$fun-InitialsAvatar().dp)
  stable onClick: Function0<Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun UserAvatar(
  stable user: User
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).avatar
  stable textStyle: TextStyle? = @dynamic ChatTheme.<get-typography>($composer, 0b0110).title3Bold
  stable contentDescription: String? = @static null
  stable showOnlineIndicator: Boolean = @dynamic LiveLiterals$UserAvatarKt.Boolean$param-showOnlineIndicator$fun-UserAvatar()
  stable onlineIndicatorAlignment: OnlineIndicatorAlignment? = @static OnlineIndicatorAlignment.TopEnd
  stable initialsAvatarOffset: DpOffset = @dynamic DpOffset(LiveLiterals$UserAvatarKt.Int$$$this$call-$get-dp$$arg-0$call-DpOffset$param-initialsAvatarOffset$fun-UserAvatar().dp, LiveLiterals$UserAvatarKt.Int$$$this$call-$get-dp$$arg-1$call-DpOffset$param-initialsAvatarOffset$fun-UserAvatar().dp)
  stable onlineIndicator: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>? = @static composableLambda($composer, 1721875620, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C63@2885L48:UserAvatar.kt#jlmtrs"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1721875620      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.avatar.UserAvatar.<anonymous> (UserAvatar.kt:63)"      )
    }
    
    <this>    .    DefaultOnlineIndicator    (    onlineIndicatorAlignment    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.avatar.UserAvatar     shr     0b1111    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable onClick: Function0<Unit>? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultOnlineIndicator(
  stable <this>: BoxScope
  stable onlineIndicatorAlignment: OnlineIndicatorAlignment
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun UserAvatarForUserWithImagePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun UserAvatarForOnlineUserPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun UserAvatarForUserWithoutImagePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun UserAvatarPreview(
  stable user: User
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun ChannelMembers(
  unstable members: List<Member>
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OneMemberChannelMembersPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ManyMembersChannelMembersPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelMembersItem(
  stable member: Member
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelMemberItemPreview()
restartable scheme("[androidx.compose.ui.UiComposable]") fun ChannelOptions(
  unstable options: List<ChannelOptionState>
  stable onChannelOptionClick: Function1<ChannelAction, Unit>
  stable modifier: Modifier? = @static Companion
)
fun buildDefaultChannelOptionsState(
  stable selectedChannel: Channel
  stable isMuted: Boolean
  unstable ownCapabilities: Set<String>
): List<ChannelOptionState>
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelOptionsPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ChannelOptionsItem(
  stable title: String
  stable titleColor: Color
  stable leadingIcon: Function2<Composer, Int, Unit>
  stable onClick: Function0<Unit>
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ChannelOptionsItemPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageReadStatusIcon(
  stable channel: Channel
  stable message: Message
  stable currentUser: User?
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageReadStatusIcon(
  stable message: Message
  stable isMessageRead: Boolean
  stable modifier: Modifier? = @static Companion
  stable readCount: Int = @dynamic LiveLiterals$MessageReadStatusIconKt.Int$param-readCount$fun-MessageReadStatusIcon-1()
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SeenMessageReadStatusIcon()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun UnreadCountIndicator(
  stable unreadCount: Int
  stable modifier: Modifier? = @static Companion
  stable color: Color = @dynamic ChatTheme.<get-colors>($composer, 0b0110).errorAccent
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun FewMessagesUnreadCountIndicatorPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ManyMessagesUnreadCountIndicatorPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CoolDownIndicator(
  stable coolDownTime: Int
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]]") fun InputField(
  stable value: String
  stable onValueChange: Function1<String, Unit>
  stable modifier: Modifier? = @static Companion
  stable enabled: Boolean = @dynamic LiveLiterals$InputFieldKt.Boolean$param-enabled$fun-InputField()
  stable maxLines: Int = @static Companion.MAX_VALUE
  stable border: BorderStroke? = @dynamic BorderStroke(LiveLiterals$InputFieldKt.Int$$$this$call-$get-dp$$arg-0$call-BorderStroke$param-border$fun-InputField().dp, ChatTheme.<get-colors>($composer, 0b0110).borders)
  stable innerPadding: PaddingValues? = @dynamic PaddingValues(LiveLiterals$InputFieldKt.Int$$$this$call-$get-dp$$arg-0$call-PaddingValues$param-innerPadding$fun-InputField().dp, LiveLiterals$InputFieldKt.Int$$$this$call-$get-dp$$arg-1$call-PaddingValues$param-innerPadding$fun-InputField().dp)
  stable keyboardOptions: KeyboardOptions? = @static KeyboardOptions(
  capitalization   =   Companion  .  Sentences
)
  stable decorationBox: Function3<@[ParameterName(name = 'innerTextField')] Function2<Composer, Int, Unit>, Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun MessageInput(
  messageComposerState: MessageComposerState
  stable onValueChange: Function1<String, Unit>
  stable onAttachmentRemoved: Function1<Attachment, Unit>
  stable modifier: Modifier? = @static Companion
  stable maxLines: Int = @static DefaultMessageInputMaxLines
  stable keyboardOptions: KeyboardOptions? = @static KeyboardOptions(
  capitalization   =   Companion  .  Sentences
)
  stable label: Function3<MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, 879232961, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C66@3232L76:MessageInput.kt#i8o4wf"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      879232961      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.composer.MessageInput.<anonymous> (MessageInput.kt:66)"      )
    }
    
    DefaultComposerLabel    (    messageComposerState    .    ownCapabilities    ,     $composer    ,     0b1000    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable innerLeadingContent: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static ComposableSingletons$MessageInputKt.lambda-1
  stable innerTrailingContent: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static ComposableSingletons$MessageInputKt.lambda-2
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageInputOptions(
  activeAction: MessageAction
  stable onCancelAction: Function0<Unit>
  stable modifier: Modifier? = @static Companion
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MessageOptionItem(
  unstable option: MessageOptionItemState
  stable modifier: Modifier? = @static Companion
  stable verticalAlignment: Vertical? = @static Companion.CenterVertically
  stable horizontalArrangement: Horizontal? = @static Arrangement.Start
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageOptionItemPreview()
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun MessageOptions(
  unstable options: List<MessageOptionItemState>
  stable onMessageOptionSelected: Function1<MessageOptionItemState, Unit>
  stable modifier: Modifier? = @static Companion
  stable itemContent: @[ExtensionFunctionType] Function4<ColumnScope, MessageOptionItemState, Composer, Int, Unit>? = @static composableLambda($composer, -858973702, true) { option: MessageOptionItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C68@3293L127:MessageOptions.kt#cag6jq"  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventStart    (    -858973702    ,     $changed    ,     -1    ,     "io.getstream.chat.android.compose.ui.components.messageoptions.MessageOptions.<anonymous> (MessageOptions.kt:68)"    )
  }
  
  DefaultMessageOptionItem  (  option  ,   onMessageOptionSelected  ,   $composer  ,   0b1000   or   0b01110000   and   $dirty  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventEnd    (    )
  }

}

)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageOptionItem(
  unstable option: MessageOptionItemState
  stable onMessageOptionSelected: Function1<MessageOptionItemState, Unit>
)
fun defaultMessageOptionsState(
  stable selectedMessage: Message
  stable currentUser: User?
  stable isInThread: Boolean
  unstable ownCapabilities: Set<String>
): List<MessageOptionItemState>
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageOptionsForOwnMessagePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageOptionsForTheirsMessagePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageOptionsForFailedMessagePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageOptionsPreview(
  stable messageUser: User
  stable currentUser: User
  stable syncStatus: SyncStatus
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun GiphyMessageContent(
  stable message: Message
  stable modifier: Modifier? = @static Companion
  stable onGiphyActionClick: Function1<GiphyAction, Unit>? = @static { it: GiphyAction ->

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun GiphyButton(
  stable text: String
  stable textColor: Color
  stable onClick: Function0<Unit>
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun MessageBubble(
  stable color: Color
  stable shape: Shape
  stable modifier: Modifier? = @static Companion
  stable border: BorderStroke? = @dynamic BorderStroke(LiveLiterals$MessageBubbleKt.Int$$$this$call-$get-dp$$arg-0$call-BorderStroke$param-border$fun-MessageBubble().dp, ChatTheme.<get-colors>($composer, 0b0110).borders)
  stable content: Function2<Composer, Int, Unit>
)
restartable skippable scheme("[0, [0], [0], [0]]") fun MessageContent(
  stable message: Message
  stable currentUser: User?
  stable modifier: Modifier? = @static Companion
  stable onLongItemClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onGiphyActionClick: Function1<GiphyAction, Unit>? = @static { it: GiphyAction ->

}

  stable onQuotedMessageClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

  stable giphyEphemeralContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, 956048785, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C61@2955L121:MessageContent.kt#kidurf"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      956048785      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.messages.MessageContent.<anonymous> (MessageContent.kt:61)"      )
    }
    
    DefaultMessageGiphyContent    (    message    ,     onGiphyActionClick    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty     shr     0b1001    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable deletedMessageContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, -2073192223, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C67@3146L49:MessageContent.kt#kidurf"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -2073192223      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.messages.MessageContent.<anonymous> (MessageContent.kt:67)"      )
    }
    
    DefaultMessageDeletedContent    (    modifier    ,     $composer    ,     0b1110     and     $dirty     shr     0b0110    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable regularMessageContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, 1032252452, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C70@3265L277:MessageContent.kt#kidurf"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1032252452      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.messages.MessageContent.<anonymous> (MessageContent.kt:70)"      )
    }
    
    DefaultMessageContent    (    message    ,     currentUser    ,     onLongItemClick    ,     onMediaGalleryPreviewResult    ,     onQuotedMessageClick    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty     or     0b001110000000     and     $dirty     shr     0b0011     or     0b0001110000000000     and     $dirty     shr     0b1001     or     0b1110000000000000     and     $dirty     shr     0b0011    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageGiphyContent(
  stable message: Message
  stable onGiphyActionClick: Function1<GiphyAction, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageDeletedContent(
  stable modifier: Modifier
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageContent(
  stable message: Message
  stable currentUser: User?
  stable onLongItemClick: Function1<Message, Unit>
  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

  stable onQuotedMessageClick: Function1<Message, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageFooter(
  messageItem: MessageItemState
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MessageHeaderLabel(
  unstable painter: Painter
  stable modifier: Modifier? = @static Companion
  stable text: String? = @static null
  stable contentPadding: PaddingValues? = @dynamic val tmp0_vertical = LiveLiterals$MessageHeaderLabelKt.Int$$$this$call-$get-dp$$val-tmp0_vertical$param-contentPadding$fun-MessageHeaderLabel().dp
val tmp1_horizontal = LiveLiterals$MessageHeaderLabelKt.Int$$$this$call-$get-dp$$val-tmp1_horizontal$param-contentPadding$fun-MessageHeaderLabel().dp
PaddingValues(tmp1_horizontal@io.getstream.chat.android.compose.ui.components.messages.MessageHeaderLabel, tmp0_vertical@io.getstream.chat.android.compose.ui.components.messages.MessageHeaderLabel)
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MessageReactionItem(
  unstable option: ReactionOptionItemState
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageReactionItemSelectedPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageReactionItemNotSelectedPreview()
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun MessageReactions(
  unstable options: List<ReactionOptionItemState>
  stable modifier: Modifier? = @static Companion
  stable itemContent: @[ExtensionFunctionType] Function4<RowScope, ReactionOptionItemState, Composer, Int, Unit>? = @static ComposableSingletons$MessageReactionsKt.lambda-1
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OneMessageReactionPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ManyMessageReactionsPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageText(
  stable message: Message
  stable currentUser: User?
  stable modifier: Modifier? = @static Companion
  stable onLongItemClick: Function1<Message, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ClickableText(
  stable text: AnnotatedString
  stable modifier: Modifier? = @static Companion
  stable style: TextStyle? = @static Companion.Default
  stable softWrap: Boolean = @dynamic LiveLiterals$MessageTextKt.Boolean$param-softWrap$fun-ClickableText()
  stable overflow: TextOverflow = @static Companion.Clip
  stable maxLines: Int = @static Companion.MAX_VALUE
  stable onTextLayout: Function1<TextLayoutResult, Unit>? = @static { it: TextLayoutResult ->

}

  stable onLongPress: Function0<Unit>
  stable onClick: Function1<Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageTextPreview()
restartable scheme("[androidx.compose.ui.UiComposable]") fun MessageThreadFooter(
  unstable participants: List<User>
  stable text: String
  stable messageAlignment: MessageAlignment
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessagesScrollingOption(
  stable unreadCount: Int
  stable onClick: Function0<Unit>
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OwnedMessageVisibilityContent(
  stable message: Message
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun QuotedMessage(
  stable message: Message
  stable currentUser: User?
  stable onLongItemClick: Function1<Message, Unit>
  stable onQuotedMessageClick: Function1<Message, Unit>
  stable modifier: Modifier? = @static Companion
  stable replyMessage: Message? = @static null
  stable leadingContent: Function3<Message, Composer, Int, Unit>? = @static composableLambda($composer, 2122154383, true) { it: Message, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C63@3071L110:QuotedMessage.kt#kidurf"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      2122154383      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.messages.QuotedMessage.<anonymous> (QuotedMessage.kt:63)"      )
    }
    
    DefaultQuotedMessageLeadingContent    (    it    ,     currentUser    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.messages.QuotedMessage    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable centerContent: @[ExtensionFunctionType] Function4<RowScope, Message, Composer, Int, Unit>? = @static composableLambda($composer, 230415708, true) { it: Message, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C69@3259L150:QuotedMessage.kt#kidurf"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011011011   !==   0b10010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      230415708      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.messages.QuotedMessage.<anonymous> (QuotedMessage.kt:69)"      )
    }
    
    <this>    .    DefaultQuotedMessageCenterContent    (    it    ,     currentUser    ,     replyMessage    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.messages.QuotedMessage     shl     0b0011     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.messages.QuotedMessage     shr     0b0110    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable trailingContent: Function3<Message, Composer, Int, Unit>? = @static composableLambda($composer, -1417351523, true) { it: Message, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C76@3480L111:QuotedMessage.kt#kidurf"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -1417351523      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.messages.QuotedMessage.<anonymous> (QuotedMessage.kt:76)"      )
    }
    
    DefaultQuotedMessageTrailingContent    (    it    ,     currentUser    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.messages.QuotedMessage    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultQuotedMessageLeadingContent(
  stable message: Message
  stable currentUser: User?
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultQuotedMessageTrailingContent(
  stable message: Message
  stable currentUser: User?
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultQuotedMessageCenterContent(
  stable <this>: RowScope
  stable message: Message
  stable currentUser: User?
  stable replyMessage: Message? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun QuotedMessageContent(
  stable message: Message
  stable currentUser: User?
  stable modifier: Modifier? = @static Companion
  stable replyMessage: Message? = @static null
  stable attachmentContent: Function3<Message, Composer, Int, Unit>? = @static ComposableSingletons$QuotedMessageContentKt.lambda-1
  stable textContent: Function3<Message, Composer, Int, Unit>? = @static composableLambda($composer, 1117923876, true) { it: Message, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C45@1951L148:QuotedMessageContent.kt#kidurf"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1117923876      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.messages.QuotedMessageContent.<anonymous> (QuotedMessageContent.kt:45)"      )
    }
    
    DefaultQuotedMessageTextContent    (    it    ,     currentUser    ,     replyMessage    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.messages.QuotedMessageContent     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.messages.QuotedMessageContent     shr     0b0011    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable fun DefaultQuotedMessageAttachmentContent(
  stable message: Message
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultQuotedMessageTextContent(
  stable message: Message
  stable currentUser: User?
  stable replyMessage: Message? = @static null
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun QuotedMessageText(
  stable message: Message
  stable currentUser: User?
  stable modifier: Modifier? = @static Companion
  stable replyMessage: Message? = @static null
  stable quoteMaxLines: Int = @static DefaultQuoteMaxLines
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun ThreadParticipants(
  unstable participants: List<User>
  stable alignment: MessageAlignment
  stable modifier: Modifier? = @static Companion
  stable borderStroke: BorderStroke? = @dynamic BorderStroke(LiveLiterals$ThreadParticipantsKt.Int$$$this$call-$get-dp$$arg-0$call-BorderStroke$param-borderStroke$fun-ThreadParticipants().dp, ChatTheme.<get-colors>($composer, 0b0110).appBackground)
  stable participantsLimit: Int = @static DefaultParticipantsLimit
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun UploadingFooter(
  stable message: Message
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ModeratedMessageDialog(
  stable message: Message
  stable onDismissRequest: Function0<Unit>
  stable onDialogOptionInteraction: Function2<@[ParameterName(name = 'message')] Message, @[ParameterName(name = 'option')] ModeratedMessageOption, Unit>
  stable modifier: Modifier? = @static Companion
  unstable moderatedMessageOptions: List<ModeratedMessageOption>? = @dynamic defaultMessageModerationOptions()
  stable dialogTitle: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ModeratedMessageDialogKt.lambda-1
  stable dialogDescription: Function2<Composer, Int, Unit>? = @static ComposableSingletons$ModeratedMessageDialogKt.lambda-2
  stable dialogOptions: Function2<Composer, Int, Unit>? = @static composableLambda($composer, 247762905, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C65@3294L250:ModeratedMessageDialog.kt#ket2jv"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      247762905      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.moderatedmessage.ModeratedMessageDialog.<anonymous> (ModeratedMessageDialog.kt:65)"      )
    }
    
    DefaultModeratedDialogOptions    (    message    ,     moderatedMessageOptions    ,     onDialogOptionInteraction    ,     onDismissRequest    ,     $composer    ,     0b01000000     or     0b1110     and     $dirty     or     0b001110000000     and     $dirty     or     0b0001110000000000     and     $dirty     shl     0b0110    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultModeratedDialogOptions(
  stable message: Message
  unstable moderatedMessageOptions: List<ModeratedMessageOption>
  stable onDialogOptionInteraction: Function2<@[ParameterName(name = 'message')] Message, @[ParameterName(name = 'option')] ModeratedMessageOption, Unit>
  stable onDismissRequest: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultModeratedMessageDialogTitle()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultModeratedMessageDialogDescription()
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ModeratedMessageDialogOptions(
  stable message: Message
  unstable options: List<ModeratedMessageOption>
  stable modifier: Modifier? = @static Companion
  stable onDismissRequest: Function0<Unit>? = @static {

}

  stable onDialogOptionInteraction: Function2<@[ParameterName(name = 'message')] Message, @[ParameterName(name = 'option')] ModeratedMessageOption, Unit>? = @static { <unused var>: Message, <unused var>: ModeratedMessageOption ->

}

  stable itemContent: Function3<ModeratedMessageOption, Composer, Int, Unit>? = @static composableLambda($composer, 1577366721, true) { option: ModeratedMessageOption, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C50@2314L95:ModeratedMessageDialogOptions.kt#ket2jv"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    option    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1577366721      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.moderatedmessage.ModeratedMessageDialogOptions.<anonymous> (ModeratedMessageDialogOptions.kt:50)"      )
    }
    
    DefaultModeratedMessageOptionItem    (    message    ,     option    ,     onDismissRequest    ,     onDialogOptionInteraction    ,     $composer    ,     0b1110     and     $dirty    @    io.getstream.chat.android.compose.ui.components.moderatedmessage.ModeratedMessageDialogOptions     or     ModeratedMessageOption    .    $stable     shl     0b0011     or     0b01110000     and     $dirty     shl     0b0011     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.moderatedmessage.ModeratedMessageDialogOptions     shr     0b0011     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.moderatedmessage.ModeratedMessageDialogOptions     shr     0b0011    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultModeratedMessageOptionItem(
  stable message: Message
  option: ModeratedMessageOption
  stable onDismissRequest: Function0<Unit>
  stable onDialogOptionInteraction: Function2<@[ParameterName(name = 'message')] Message, @[ParameterName(name = 'option')] ModeratedMessageOption, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ModeratedMessageOptionItem(
  option: ModeratedMessageOption
  stable modifier: Modifier? = @static Companion
)
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ExtendedReactionsOptions(
  unstable ownReactions: List<Reaction>
  stable onReactionOptionSelected: Function1<ReactionOptionItemState, Unit>
  stable modifier: Modifier? = @static Companion
  stable cells: GridCells? = @dynamic Fixed(DefaultNumberOfColumns)
  unstable reactionTypes: Map<String, ReactionIcon>? = @dynamic ChatTheme.<get-reactionIconFactory>($composer, 0b0110).createReactionIcons($composer, 0)
  stable itemContent: @[ExtensionFunctionType] Function4<LazyGridScope, ReactionOptionItemState, Composer, Int, Unit>? = @static composableLambda($composer, 640913577, true) { option: ReactionOptionItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C62@2823L140:ExtendedReactionsOptions.kt#1apuey"  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventStart    (    640913577    ,     $changed    ,     -1    ,     "io.getstream.chat.android.compose.ui.components.reactionoptions.ExtendedReactionsOptions.<anonymous> (ExtendedReactionsOptions.kt:62)"    )
  }
  
  DefaultExtendedReactionsItemContent  (  option  ,   onReactionOptionSelected  ,   $composer  ,   0b1000   or   0b01110000   and   $dirty  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventEnd    (    )
  }

}

)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultExtendedReactionsItemContent(
  unstable option: ReactionOptionItemState
  stable onReactionOptionSelected: Function1<ReactionOptionItemState, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ExtendedReactionOptionsPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ExtendedReactionOptionsWithOwnReactionPreview()
restartable scheme("[androidx.compose.ui.UiComposable]") fun ReactionOptionItem(
  unstable option: ReactionOptionItemState
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReactionOptionItemNotSelectedPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReactionOptionItemSelectedPreview()
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun ReactionOptions(
  unstable ownReactions: List<Reaction>
  stable onReactionOptionSelected: Function1<ReactionOptionItemState, Unit>
  stable onShowMoreReactionsSelected: Function0<Unit>
  stable modifier: Modifier? = @static Companion
  stable numberOfReactionsShown: Int = @static DefaultNumberOfReactionsShown
  stable horizontalArrangement: Horizontal? = @static Arrangement.SpaceBetween
  unstable reactionTypes: Map<String, ReactionIcon>? = @dynamic ChatTheme.<get-reactionIconFactory>($composer, 0b0110).createReactionIcons($composer, 0)
  stable showMoreReactionsIcon: Int = @dynamic drawable.stream_compose_ic_more
  stable itemContent: @[ExtensionFunctionType] Function4<RowScope, ReactionOptionItemState, Composer, Int, Unit>? = @static composableLambda($composer, 1316483500, true) { option: ReactionOptionItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C67@3225L130:ReactionOptions.kt#1apuey"  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventStart    (    1316483500    ,     $changed    ,     -1    ,     "io.getstream.chat.android.compose.ui.components.reactionoptions.ReactionOptions.<anonymous> (ReactionOptions.kt:67)"    )
  }
  
  DefaultReactionOptionItem  (  option  ,   onReactionOptionSelected  ,   $composer  ,   0b1000   or   0b01110000   and   $dirty  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventEnd    (    )
  }

}

)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultReactionOptionItem(
  unstable option: ReactionOptionItemState
  stable onReactionOptionSelected: Function1<ReactionOptionItemState, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReactionOptionsPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun ReactionsPicker(
  stable message: Message
  stable onMessageAction: Function1<MessageAction, Unit>
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).bottomSheet
  stable overlayColor: Color = @dynamic ChatTheme.<get-colors>($composer, 0b0110).overlay
  stable cells: GridCells? = @dynamic Fixed(DefaultNumberOfReactions)
  stable onDismiss: Function0<Unit>? = @static {

}

  unstable reactionTypes: Map<String, ReactionIcon>? = @dynamic ChatTheme.<get-reactionIconFactory>($composer, 0b0110).createReactionIcons($composer, 0)
  stable headerContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static ComposableSingletons$ReactionsPickerKt.lambda-1
  stable centerContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static composableLambda($composer, 246387664, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C70@3215L194:ReactionsPicker.kt#8uk7mi"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      246387664      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.reactionpicker.ReactionsPicker.<anonymous> (ReactionsPicker.kt:70)"      )
    }
    
    DefaultReactionsPickerCenterContent    (    message    ,     onMessageAction    ,     cells    ,     reactionTypes    ,     $composer    ,     0b0001000000000000     or     0b1110     and     $dirty     or     0b01110000     and     $dirty     or     0b001110000000     and     $dirty     shr     0b1001    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultReactionsPickerCenterContent(
  stable message: Message
  stable onMessageAction: Function1<MessageAction, Unit>
  stable cells: GridCells? = @dynamic Fixed(DefaultNumberOfReactions)
  unstable reactionTypes: Map<String, ReactionIcon>? = @dynamic ChatTheme.<get-reactionIconFactory>($composer, 0b0110).createReactionIcons($composer, 0)
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ReactionPickerPreview()
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun SelectedMessageMenu(
  stable message: Message
  unstable messageOptions: List<MessageOptionItemState>
  unstable ownCapabilities: Set<String>
  stable onMessageAction: Function1<MessageAction, Unit>
  stable onShowMoreReactionsSelected: Function0<Unit>
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).bottomSheet
  stable overlayColor: Color = @dynamic ChatTheme.<get-colors>($composer, 0b0110).overlay
  unstable reactionTypes: Map<String, ReactionIcon>? = @dynamic ChatTheme.<get-reactionIconFactory>($composer, 0b0110).createReactionIcons($composer, 0)
  stable showMoreReactionsIcon: Int = @dynamic drawable.stream_compose_ic_more
  stable onDismiss: Function0<Unit>? = @static {

}

  stable headerContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static composableLambda($composer, 1311276109, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C80@4033L324:SelectedMessageMenu.kt#62upoj"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1311276109      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.selectedmessage.SelectedMessageMenu.<anonymous> (SelectedMessageMenu.kt:77)"      )
    }
    
    val     canLeaveReaction     =     ownCapabilities     in     ChannelCapabilities    .    SEND_REACTION    
    
    if (    canLeaveReaction    ) {
      DefaultSelectedMessageReactionOptions      (      message      ,       reactionTypes      ,       showMoreReactionsIcon      ,       onMessageAction      ,       onShowMoreReactionsSelected      ,       $composer      ,       0b01000000       or       0b1110       and       $dirty       or       0b001110000000       and       $dirty       shr       0b00010101       or       0b0001110000000000       and       $dirty       or       0b1110000000000000       and       $dirty      ,       0      )
    }
    
    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable centerContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static composableLambda($composer, 1032610325, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C90@4441L132:SelectedMessageMenu.kt#62upoj"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1032610325      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.selectedmessage.SelectedMessageMenu.<anonymous> (SelectedMessageMenu.kt:90)"      )
    }
    
    DefaultSelectedMessageOptions    (    messageOptions    ,     onMessageAction    ,     $composer    ,     0b1000     or     0b01110000     and     $dirty     shr     0b0110    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultSelectedMessageReactionOptions(
  stable message: Message
  unstable reactionTypes: Map<String, ReactionIcon>
  stable showMoreReactionsDrawableRes: Int = @dynamic drawable.stream_compose_ic_more
  stable onMessageAction: Function1<MessageAction, Unit>
  stable showMoreReactionsIcon: Function0<Unit>
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultSelectedMessageOptions(
  unstable messageOptions: List<MessageOptionItemState>
  stable onMessageAction: Function1<MessageAction, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SelectedMessageMenuPreview()
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun SelectedReactionsMenu(
  stable message: Message
  stable currentUser: User?
  unstable ownCapabilities: Set<String>
  stable onMessageAction: Function1<MessageAction, Unit>
  stable onShowMoreReactionsSelected: Function0<Unit>
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).bottomSheet
  stable overlayColor: Color = @dynamic ChatTheme.<get-colors>($composer, 0b0110).overlay
  unstable reactionTypes: Map<String, ReactionIcon>? = @dynamic ChatTheme.<get-reactionIconFactory>($composer, 0b0110).createReactionIcons($composer, 0)
  stable showMoreReactionsIcon: Int = @dynamic drawable.stream_compose_ic_more
  stable onDismiss: Function0<Unit>? = @static {

}

  stable headerContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static composableLambda($composer, 537758708, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C82@4047L323:SelectedReactionsMenu.kt#62upoj"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      537758708      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.selectedmessage.SelectedReactionsMenu.<anonymous> (SelectedReactionsMenu.kt:79)"      )
    }
    
    val     canLeaveReaction     =     ownCapabilities     in     ChannelCapabilities    .    SEND_REACTION    
    
    if (    canLeaveReaction    ) {
      DefaultSelectedReactionsHeaderContent      (      message      ,       reactionTypes      ,       showMoreReactionsIcon      ,       onMessageAction      ,       onShowMoreReactionsSelected      ,       $composer      ,       0b01000000       or       0b1110       and       $dirty       or       0b001110000000       and       $dirty       shr       0b00010101       or       0b0001110000000000       and       $dirty       or       0b1110000000000000       and       $dirty      ,       0      )
    }
    
    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable centerContent: @[ExtensionFunctionType] Function3<ColumnScope, Composer, Int, Unit>? = @static composableLambda($composer, 1274629564, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C92@4454L118:SelectedReactionsMenu.kt#62upoj"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1274629564      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.selectedmessage.SelectedReactionsMenu.<anonymous> (SelectedReactionsMenu.kt:92)"      )
    }
    
    DefaultSelectedReactionsCenterContent    (    message    ,     currentUser    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultSelectedReactionsHeaderContent(
  stable message: Message
  unstable reactionTypes: Map<String, ReactionIcon>
  stable showMoreReactionsIcon: Int = @dynamic drawable.stream_compose_ic_more
  stable onMessageAction: Function1<MessageAction, Unit>
  stable onShowMoreReactionsSelected: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultSelectedReactionsCenterContent(
  stable message: Message
  stable currentUser: User?
)
fun buildUserReactionItems(
  stable message: Message
  stable currentUser: User?
): List<UserReactionItemState>
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OneSelectedReactionMenuPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ManySelectedReactionsMenuPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun SuggestionList(
  stable modifier: Modifier? = @static Companion
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).suggestionList
  stable contentPadding: PaddingValues? = @dynamic PaddingValues(
  vertical   =   ChatTheme  .  <get-dimens>  (  $composer  ,   0b0110  )  .  suggestionListPadding
)
  stable headerContent: Function2<Composer, Int, Unit>? = @static ComposableSingletons$SuggestionListKt.lambda-1
  stable centerContent: Function2<Composer, Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun CommandSuggestionItem(
  stable command: Command
  stable modifier: Modifier? = @static Companion
  stable onCommandSelected: Function1<Command, Unit>? = @static { it: Command ->

}

  stable leadingContent: @[ExtensionFunctionType] Function4<RowScope, Command, Composer, Int, Unit>? = @static ComposableSingletons$CommandSuggestionItemKt.lambda-1
  stable centerContent: @[ExtensionFunctionType] Function4<RowScope, Command, Composer, Int, Unit>? = @static ComposableSingletons$CommandSuggestionItemKt.lambda-2
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultCommandSuggestionItemLeadingContent()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultCommandSuggestionItemCenterContent(
  stable <this>: RowScope
  stable command: Command
  stable modifier: Modifier? = @static Companion
)
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun CommandSuggestionList(
  unstable commands: List<Command>
  stable modifier: Modifier? = @static Companion
  stable onCommandSelected: Function1<Command, Unit>? = @static { it: Command ->

}

  stable itemContent: Function3<Command, Composer, Int, Unit>? = @static composableLambda($composer, 441455168, true) { command: Command, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C53@2209L121:CommandSuggestionList.kt#7il39y"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    command    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      441455168      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.suggestions.commands.CommandSuggestionList.<anonymous> (CommandSuggestionList.kt:53)"      )
    }
    
    DefaultCommandSuggestionItem    (    command    ,     onCommandSelected    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.suggestions.commands.CommandSuggestionList     shr     0b0011    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultCommandSuggestionItem(
  stable command: Command
  stable onCommandSelected: Function1<Command, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun MentionSuggestionItem(
  stable user: User
  stable onMentionSelected: Function1<User, Unit>
  stable modifier: Modifier? = @static Companion
  stable leadingContent: @[ExtensionFunctionType] Function4<RowScope, User, Composer, Int, Unit>? = @static ComposableSingletons$MentionSuggestionItemKt.lambda-1
  stable centerContent: @[ExtensionFunctionType] Function4<RowScope, User, Composer, Int, Unit>? = @static ComposableSingletons$MentionSuggestionItemKt.lambda-2
  stable trailingContent: @[ExtensionFunctionType] Function4<RowScope, User, Composer, Int, Unit>? = @static ComposableSingletons$MentionSuggestionItemKt.lambda-3
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMentionSuggestionItemLeadingContent(
  stable user: User
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMentionSuggestionItemCenterContent(
  stable <this>: RowScope
  stable user: User
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMentionSuggestionItemTrailingContent()
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun MentionSuggestionList(
  unstable users: List<User>
  stable modifier: Modifier? = @static Companion
  stable onMentionSelected: Function1<User, Unit>? = @static { it: User ->

}

  stable itemContent: Function3<User, Composer, Int, Unit>? = @static composableLambda($composer, -984190581, true) { user: User, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C43@1753L115:MentionSuggestionList.kt#7ho74n"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    user    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -984190581      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.components.suggestions.mentions.MentionSuggestionList.<anonymous> (MentionSuggestionList.kt:43)"      )
    }
    
    DefaultMentionSuggestionItem    (    user    ,     onMentionSelected    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.components.suggestions.mentions.MentionSuggestionList     shr     0b0011    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMentionSuggestionItem(
  stable user: User
  stable onMentionSelected: Function1<User, Unit>
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun UserReactionItem(
  unstable item: UserReactionItemState
  stable modifier: Modifier? = @static Companion
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun CurrentUserReactionItemPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OtherUserReactionItemPreview()
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun UserReactions(
  unstable items: List<UserReactionItemState>
  stable modifier: Modifier? = @static Companion
  stable itemContent: Function3<UserReactionItemState, Composer, Int, Unit>? = @static ComposableSingletons$UserReactionsKt.lambda-1
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultUserReactionItem(
  unstable item: UserReactionItemState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun OneUserReactionPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun ManyUserReactionsPreview()
restartable scheme("[androidx.compose.ui.UiComposable]") fun AudioWaveVSeekbar(
  unstable waveBars: List<Float>
  stable modifier: Modifier? = @static Companion
  stable colorLeft: Color = @static Companion.Blue
  stable colorRight: Color = @static Companion.Gray
  stable trackerDraw: @[ExtensionFunctionType] Function3<DrawScope, Float, Size, Unit>? = @static { progressWidth: Float, trackerSize: Size ->
  <this>  .  drawRoundRect  (
    color     =     Companion    .    Red    , 
    topLeft     =     Offset    (    min    (    max    (    progressWidth     -     trackerSize    .    width     /     LiveLiterals$AudioWaveSeekbarKt    .    Int$arg-0$call-div$arg-0$call-minus$arg-0$call-max$arg-0$call-min$arg-0$call-Offset$arg-1$call-drawRoundRect$fun-$anonymous$$param-trackerDraw$fun-AudioWaveVSeekbar    (    )    ,     LiveLiterals$AudioWaveSeekbarKt    .    Float$arg-1$call-max$arg-0$call-min$arg-0$call-Offset$arg-1$call-drawRoundRect$fun-$anonymous$$param-trackerDraw$fun-AudioWaveVSeekbar    (    )    )    ,     <this>    .    size    .    width     -     trackerSize    .    width    )    ,     LiveLiterals$AudioWaveSeekbarKt    .    Float$arg-1$call-Offset$arg-1$call-drawRoundRect$fun-$anonymous$$param-trackerDraw$fun-AudioWaveVSeekbar    (    )    )    , 
    size     =     trackerSize    , 
    cornerRadius     =     CornerRadius    (    LiveLiterals$AudioWaveSeekbarKt    .    Float$arg-0$call-CornerRadius$arg-3$call-drawRoundRect$fun-$anonymous$$param-trackerDraw$fun-AudioWaveVSeekbar    (    )    ,     LiveLiterals$AudioWaveSeekbarKt    .    Float$arg-1$call-CornerRadius$arg-3$call-drawRoundRect$fun-$anonymous$$param-trackerDraw$fun-AudioWaveVSeekbar    (    )    )
  )
}

)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MessagesScreen(
  unstable viewModelFactory: MessagesViewModelFactory
  stable showHeader: Boolean = @dynamic LiveLiterals$MessagesScreenKt.Boolean$param-showHeader$fun-MessagesScreen()
  stable onBackPressed: Function0<Unit>? = @static {

}

  stable onHeaderTitleClick: Function1<@[ParameterName(name = 'channel')] Channel, Unit>? = @static { it: Channel ->

}

  stable onChannelAvatarClick: Function0<Unit>? = @static {

}

  stable skipPushNotification: Boolean = @dynamic LiveLiterals$MessagesScreenKt.Boolean$param-skipPushNotification$fun-MessagesScreen()
  stable skipEnrichUrl: Boolean = @dynamic LiveLiterals$MessagesScreenKt.Boolean$param-skipEnrichUrl$fun-MessagesScreen()
  stable threadMessagesStart: ThreadMessagesStart? = @static BOTTOM
  unstable statefulStreamMediaRecorder: StatefulStreamMediaRecorder? = @static null
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MessageMenus(
  stable <this>: BoxScope
  unstable listViewModel: MessageListViewModel
  unstable composerViewModel: MessageComposerViewModel
  stable skipPushNotification: Boolean
  stable skipEnrichUrl: Boolean
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MessagesScreenMenus(
  stable <this>: BoxScope
  unstable listViewModel: MessageListViewModel
  unstable composerViewModel: MessageComposerViewModel
  selectedMessageState: SelectedMessageState?
  stable selectedMessage: Message
  stable skipPushNotification: Boolean
  stable skipEnrichUrl: Boolean
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MessagesScreenReactionsPicker(
  stable <this>: BoxScope
  unstable listViewModel: MessageListViewModel
  unstable composerViewModel: MessageComposerViewModel
  selectedMessageState: SelectedMessageState?
  stable selectedMessage: Message
  stable skipPushNotification: Boolean
  stable skipEnrichUrl: Boolean
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun AttachmentsPickerMenu(
  stable <this>: BoxScope
  unstable attachmentsPickerViewModel: AttachmentsPickerViewModel
  unstable composerViewModel: MessageComposerViewModel
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MessageModerationDialog(
  unstable listViewModel: MessageListViewModel
  unstable composerViewModel: MessageComposerViewModel
  stable skipPushNotification: Boolean
  stable skipEnrichUrl: Boolean
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun MessageDialogs(
  unstable listViewModel: MessageListViewModel
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun AttachmentsPicker(
  unstable attachmentsPickerViewModel: AttachmentsPickerViewModel
  stable onAttachmentsSelected: Function1<List<Attachment>, Unit>
  stable onDismiss: Function0<Unit>
  stable modifier: Modifier? = @static Companion
  unstable tabFactories: List<AttachmentsPickerTabFactory>? = @dynamic ChatTheme.<get-attachmentsPickerTabFactories>($composer, 0b0110)
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).bottomSheet
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun AttachmentPickerOptions(
  stable hasPickedAttachments: Boolean
  unstable tabFactories: List<AttachmentsPickerTabFactory>
  stable tabIndex: Int
  stable onTabClick: Function2<Int, AttachmentsPickerMode, Unit>
  stable onSendAttachmentsClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PickerTabIcon(
  stable isEnabled: Boolean
  stable isSelected: Boolean
  unused stable <this>: AttachmentsPickerFilesTabFactory
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun PickerTabContent(
  unstable attachments: List<AttachmentPickerItemState>
  stable onAttachmentsChanged: Function1<List<AttachmentPickerItemState>, Unit>
  stable onAttachmentItemSelected: Function1<AttachmentPickerItemState, Unit>
  stable onAttachmentsSubmitted: Function1<List<AttachmentMetaData>, Unit>
  unused stable <this>: AttachmentsPickerFilesTabFactory
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PickerTabIcon(
  stable isEnabled: Boolean
  stable isSelected: Boolean
  unused stable <this>: AttachmentsPickerImagesTabFactory
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun PickerTabContent(
  unstable attachments: List<AttachmentPickerItemState>
  stable onAttachmentsChanged: Function1<List<AttachmentPickerItemState>, Unit>
  stable onAttachmentItemSelected: Function1<AttachmentPickerItemState, Unit>
  unused stable onAttachmentsSubmitted: Function1<List<AttachmentMetaData>, Unit>
  unused stable <this>: AttachmentsPickerImagesTabFactory
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PickerTabIcon(
  stable isEnabled: Boolean
  stable isSelected: Boolean
  unused stable <this>: AttachmentsPickerMediaCaptureTabFactory
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun PickerTabContent(
  unused unstable attachments: List<AttachmentPickerItemState>
  unused stable onAttachmentsChanged: Function1<List<AttachmentPickerItemState>, Unit>
  unused stable onAttachmentItemSelected: Function1<AttachmentPickerItemState, Unit>
  stable onAttachmentsSubmitted: Function1<List<AttachmentMetaData>, Unit>
  stable <this>: AttachmentsPickerMediaCaptureTabFactory
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MissingPermissionContent(
  stable permissionState: PermissionState
)
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun MessageComposer(
  unstable viewModel: MessageComposerViewModel
  stable modifier: Modifier? = @static Companion
  unstable statefulStreamMediaRecorder: StatefulStreamMediaRecorder? = @static null
  stable onSendMessage: Function1<Message, Unit>? = @dynamic { it: Message ->
  viewModel  .  sendMessage  (  it  )
}

  stable onAttachmentsClick: Function0<Unit>? = @static {

}

  stable onCommandsClick: Function0<Unit>? = @static {

}

  stable onValueChange: Function1<String, Unit>? = @dynamic { it: String ->
  viewModel  .  setMessageInput  (  it  )
}

  stable onAttachmentRemoved: Function1<Attachment, Unit>? = @dynamic { it: Attachment ->
  viewModel  .  removeSelectedAttachment  (  it  )
}

  stable onCancelAction: Function0<Unit>? = @dynamic {
  viewModel  .  dismissMessageActions  (  )
}

  stable onMentionSelected: Function1<User, Unit>? = @dynamic { it: User ->
  viewModel  .  selectMention  (  it  )
}

  stable onCommandSelected: Function1<Command, Unit>? = @dynamic { it: Command ->
  viewModel  .  selectCommand  (  it  )
}

  stable onAlsoSendToChannelSelected: Function1<Boolean, Unit>? = @dynamic { it: Boolean ->
  viewModel  .  setAlsoSendToChannel  (  it  )
}

  stable onRecordingSaved: Function1<Attachment, Unit>? = @dynamic { it: Attachment ->
  viewModel  .  addSelectedAttachments  (  listOf  (  it  )  )
}

  stable headerContent: @[ExtensionFunctionType] Function4<ColumnScope, MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, -253652946, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C150@8561L130:MessageComposer.kt#dijld3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011010001   !==   0b10010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -253652946      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:150)"      )
    }
    
    DefaultMessageComposerHeaderContent    (    it    ,     onCancelAction    ,     $composer    ,     MessageComposerState    .    $stable     or     0b1110     and     $dirty     shr     0b0011     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shr     0b00010101    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable footerContent: @[ExtensionFunctionType] Function4<ColumnScope, MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, 192636768, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C156@8785L156:MessageComposer.kt#dijld3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011010001   !==   0b10010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      192636768      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:156)"      )
    }
    
    DefaultMessageComposerFooterContent    (    it    ,     onAlsoSendToChannelSelected    ,     $composer    ,     MessageComposerState    .    $stable     or     0b1110     and     $dirty     shr     0b0011     or     0b01110000     and     $dirty1    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable mentionPopupContent: Function3<List<User>, Composer, Int, Unit>? = @static composableLambda($composer, 1104099413, true) { it: List<User>, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C162@9019L125:MessageComposer.kt#dijld3"  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventStart    (    1104099413    ,     $changed    ,     -1    ,     "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:162)"    )
  }
  
  DefaultMentionPopupContent  (  it  ,   onMentionSelected  ,   $composer  ,   0b1000   or   0b01110000   and   $dirty   shr   0b00011000  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventEnd    (    )
  }

}

  stable commandPopupContent: Function3<List<Command>, Composer, Int, Unit>? = @static composableLambda($composer, 7934774, true) { it: List<Command>, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C168@9225L125:MessageComposer.kt#dijld3"  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventStart    (    7934774    ,     $changed    ,     -1    ,     "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:168)"    )
  }
  
  DefaultCommandPopupContent  (  it  ,   onCommandSelected  ,   $composer  ,   0b1000   or   0b01110000   and   $dirty1   shl   0b0011  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventEnd    (    )
  }

}

  stable integrations: @[ExtensionFunctionType] Function4<RowScope, MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, 1748025367, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C174@9440L224:MessageComposer.kt#dijld3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011010001   !==   0b10010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1748025367      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:174)"      )
    }
    
    DefaultComposerIntegrations    (    it    ,     onAttachmentsClick    ,     onCommandsClick    ,     it    .    ownCapabilities    ,     $composer    ,     0b0001000000000000     or     MessageComposerState    .    $stable     or     0b1110     and     $dirty     shr     0b0011     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shr     0b1001     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shr     0b1001    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable label: Function3<MessageComposerState, Composer, Int, Unit>? = @static ComposableSingletons$MessageComposerKt.lambda-1
  stable input: @[ExtensionFunctionType] Function4<RowScope, MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, 1226084324, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C183@9849L202:MessageComposer.kt#dijld3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011011011   !==   0b10010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1226084324      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:183)"      )
    }
    
    <this>    .    DefaultComposerInputContent    (    it    ,     onValueChange    ,     onAttachmentRemoved    ,     label    ,     $composer    ,     0b1110     and     $dirty     or     MessageComposerState    .    $stable     shl     0b0011     or     0b01110000     and     $dirty     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shr     0b1100     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shr     0b1100     or     0b1110000000000000     and     $dirty1     shr     0b1100    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable audioRecordingContent: @[ExtensionFunctionType] Function4<RowScope, StatefulStreamMediaRecorder, Composer, Int, Unit>? = @static ComposableSingletons$MessageComposerKt.lambda-2
  stable trailingContent: Function3<MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, 1692973295, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C194@10288L620:MessageComposer.kt#dijld3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1692973295      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:194)"      )
    }
    
    val     tmp0_value     =     it    .    inputValue    
    val     tmp1_coolDownTime     =     it    .    coolDownTime    
    val     tmp2_validationErrors     =     it    .    validationErrors    
    val     tmp3_attachments     =     it    .    attachments    
    val     tmp4_ownCapabilities     =     it    .    ownCapabilities    
    val     tmp5_isInEditMode     =     it    .    action    
    DefaultMessageComposerTrailingContent    (    tmp0_value    ,     tmp1_coolDownTime    ,     tmp3_attachments    ,     tmp2_validationErrors    ,     tmp4_ownCapabilities    ,     tmp5_isInEditMode    ,     {         input    :     String    ,     attachments    :     List<Attachment>     ->
      val       message       =       viewModel      .      buildNewMessage      (      input      ,       attachments      )      
      onSendMessage      (      message      )
    }
    ,     onRecordingSaved    ,     statefulStreamMediaRecorder    ,     $composer    ,     0b1000000000001001001000000000     or     0b0001110000000000000000000000     and     $dirty1     shl     0b1111    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun MessageComposer(
  messageComposerState: MessageComposerState
  stable onSendMessage: Function2<String, List<Attachment>, Unit>
  stable modifier: Modifier? = @static Companion
  unstable statefulStreamMediaRecorder: StatefulStreamMediaRecorder? = @static null
  stable onAttachmentsClick: Function0<Unit>? = @static {

}

  stable onCommandsClick: Function0<Unit>? = @static {

}

  stable onValueChange: Function1<String, Unit>? = @static { it: String ->

}

  stable onAttachmentRemoved: Function1<Attachment, Unit>? = @static { it: Attachment ->

}

  stable onCancelAction: Function0<Unit>? = @static {

}

  stable onMentionSelected: Function1<User, Unit>? = @static { it: User ->

}

  stable onCommandSelected: Function1<Command, Unit>? = @static { it: Command ->

}

  stable onAlsoSendToChannelSelected: Function1<Boolean, Unit>? = @static { it: Boolean ->

}

  stable onRecordingSaved: Function1<Attachment, Unit>? = @static { it: Attachment ->

}

  stable headerContent: @[ExtensionFunctionType] Function4<ColumnScope, MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, -576566682, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C283@14928L130:MessageComposer.kt#dijld3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011010001   !==   0b10010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -576566682      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:283)"      )
    }
    
    DefaultMessageComposerHeaderContent    (    it    ,     onCancelAction    ,     $composer    ,     MessageComposerState    .    $stable     or     0b1110     and     $dirty     shr     0b0011     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shr     0b00010101    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable footerContent: @[ExtensionFunctionType] Function4<ColumnScope, MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, 1411091096, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C289@15152L156:MessageComposer.kt#dijld3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011010001   !==   0b10010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1411091096      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:289)"      )
    }
    
    DefaultMessageComposerFooterContent    (    it    ,     onAlsoSendToChannelSelected    ,     $composer    ,     MessageComposerState    .    $stable     or     0b1110     and     $dirty     shr     0b0011     or     0b01110000     and     $dirty1    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable mentionPopupContent: Function3<List<User>, Composer, Int, Unit>? = @static composableLambda($composer, 1048583693, true) { it: List<User>, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C295@15386L125:MessageComposer.kt#dijld3"  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventStart    (    1048583693    ,     $changed    ,     -1    ,     "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:295)"    )
  }
  
  DefaultMentionPopupContent  (  it  ,   onMentionSelected  ,   $composer  ,   0b1000   or   0b01110000   and   $dirty   shr   0b00011000  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventEnd    (    )
  }

}

  stable commandPopupContent: Function3<List<Command>, Composer, Int, Unit>? = @static composableLambda($composer, -1522232978, true) { it: List<Command>, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C301@15592L125:MessageComposer.kt#dijld3"  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventStart    (    -1522232978    ,     $changed    ,     -1    ,     "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:301)"    )
  }
  
  DefaultCommandPopupContent  (  it  ,   onCommandSelected  ,   $composer  ,   0b1000   or   0b01110000   and   $dirty1   shl   0b0011  )  
  if (  isTraceInProgress  (  )  ) {
    traceEventEnd    (    )
  }

}

  stable integrations: @[ExtensionFunctionType] Function4<RowScope, MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, -120596785, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C307@15807L242:MessageComposer.kt#dijld3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011010001   !==   0b10010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -120596785      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:307)"      )
    }
    
    DefaultComposerIntegrations    (    it    ,     onAttachmentsClick    ,     onCommandsClick    ,     messageComposerState    .    ownCapabilities    ,     $composer    ,     0b0001000000000000     or     MessageComposerState    .    $stable     or     0b1110     and     $dirty     shr     0b0011     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shr     0b1001     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shr     0b1001    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable label: Function3<MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, -643311202, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C314@16115L58:MessageComposer.kt#dijld3"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -643311202      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:314)"      )
    }
    
    DefaultComposerLabel    (    messageComposerState    .    ownCapabilities    ,     $composer    ,     0b1000    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable input: @[ExtensionFunctionType] Function4<RowScope, MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, 1116050716, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C316@16252L220:MessageComposer.kt#dijld3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b001010001011   !==   0b10000010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1116050716      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:316)"      )
    }
    
    <this>    .    DefaultComposerInputContent    (    messageComposerState    ,     onValueChange    ,     onAttachmentRemoved    ,     label    ,     $composer    ,     0b1110     and     $dirty     or     MessageComposerState    .    $stable     shl     0b0011     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shl     0b0011     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shr     0b1100     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shr     0b1100     or     0b1110000000000000     and     $dirty1     shr     0b1100    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable audioRecordingContent: @[ExtensionFunctionType] Function4<RowScope, StatefulStreamMediaRecorder, Composer, Int, Unit>? = @static ComposableSingletons$MessageComposerKt.lambda-3
  stable trailingContent: Function3<MessageComposerState, Composer, Int, Unit>? = @static composableLambda($composer, -1588200537, true) { it: MessageComposerState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C327@16709L498:MessageComposer.kt#dijld3"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -1588200537      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.<anonymous> (MessageComposer.kt:327)"      )
    }
    
    val     tmp0_value     =     it    .    inputValue    
    val     tmp1_coolDownTime     =     it    .    coolDownTime    
    val     tmp2_validationErrors     =     it    .    validationErrors    
    val     tmp3_attachments     =     it    .    attachments    
    val     tmp4_ownCapabilities     =     messageComposerState    .    ownCapabilities    
    val     tmp5_isInEditMode     =     it    .    action    
    DefaultMessageComposerTrailingContent    (    tmp0_value    ,     tmp1_coolDownTime    ,     tmp3_attachments    ,     tmp2_validationErrors    ,     tmp4_ownCapabilities    ,     tmp5_isInEditMode    ,     onSendMessage    ,     onRecordingSaved    ,     statefulStreamMediaRecorder    ,     $composer    ,     0b1000000000001001001000000000     or     0b001110000000000000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.composer.MessageComposer     shl     0b1111     or     0b0001110000000000000000000000     and     $dirty1     shl     0b1111    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageComposerHeaderContent(
  messageComposerState: MessageComposerState
  stable onCancelAction: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageComposerFooterContent(
  messageComposerState: MessageComposerState
  stable onAlsoSendToChannelSelected: Function1<Boolean, Unit>
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMentionPopupContent(
  unstable mentionSuggestions: List<User>
  stable onMentionSelected: Function1<User, Unit>
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultCommandPopupContent(
  unstable commandSuggestions: List<Command>
  stable onCommandSelected: Function1<Command, Unit>
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultComposerIntegrations(
  messageInputState: MessageComposerState
  stable onAttachmentsClick: Function0<Unit>
  stable onCommandsClick: Function0<Unit>
  unstable ownCapabilities: Set<String>
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultComposerLabel(
  unstable ownCapabilities: Set<String>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable]]") fun DefaultComposerInputContent(
  stable <this>: RowScope
  messageComposerState: MessageComposerState
  stable onValueChange: Function1<String, Unit>
  stable onAttachmentRemoved: Function1<Attachment, Unit>
  stable label: Function3<MessageComposerState, Composer, Int, Unit>
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageComposerAudioRecordingContent(
  stable <this>: RowScope
  unstable statefulStreamMediaRecorder: StatefulStreamMediaRecorder
)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageComposerTrailingContent(
  stable value: String
  stable coolDownTime: Int
  unstable attachments: List<Attachment>
  unstable validationErrors: List<ValidationError>
  unstable ownCapabilities: Set<String>
  stable isInEditMode: Boolean
  stable onSendMessage: Function2<String, List<Attachment>, Unit>
  stable onRecordingSaved: Function1<Attachment, Unit>
  unstable statefulStreamMediaRecorder: StatefulStreamMediaRecorder?
)
restartable fun MessageInputValidationError(
  unstable validationErrors: List<ValidationError>
  stable snackbarHostState: SnackbarHostState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun SnackbarPopup(
  stable snackbarHostState: SnackbarHostState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun MessageListHeader(
  stable channel: Channel
  stable currentUser: User?
  stable connectionState: ConnectionState
  stable modifier: Modifier? = @static Companion
  unstable typingUsers: List<User>? = @static emptyList()
  messageMode: MessageMode? = @dynamic Normal
  stable color: Color = @dynamic ChatTheme.<get-colors>($composer, 0b0110).barsBackground
  stable shape: Shape? = @dynamic ChatTheme.<get-shapes>($composer, 0b0110).header
  stable elevation: Dp = @dynamic ChatTheme.<get-dimens>($composer, 0b0110).headerElevation
  stable onBackPressed: Function0<Unit>? = @static {

}

  stable onHeaderTitleClick: Function1<Channel, Unit>? = @static { it: Channel ->

}

  stable onChannelAvatarClick: Function0<Unit>? = @static {

}

  stable leadingContent: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static composableLambda($composer, -729250467, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C98@4980L69:MessageListHeader.kt#ce7b9i"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -729250467      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.header.MessageListHeader.<anonymous> (MessageListHeader.kt:98)"      )
    }
    
    DefaultMessageListHeaderLeadingContent    (    onBackPressed    ,     $composer    ,     0b1110     and     $dirty     shr     0b00011011    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable centerContent: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static composableLambda($composer, -329877852, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C101@5120L340:MessageListHeader.kt#ce7b9i"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -329877852      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.header.MessageListHeader.<anonymous> (MessageListHeader.kt:101)"      )
    }
    
    val     tmp0_modifier     =     <this>    .    weight    (
      weight       =       LiveLiterals$MessageListHeaderKt      .      Float$arg-0$call-weight$val-tmp0_modifier$fun-$anonymous$$param-centerContent$fun-MessageListHeader      (      )
    )    
    DefaultMessageListHeaderCenterContent    (    channel    ,     currentUser    ,     connectionState    ,     tmp0_modifier    ,     typingUsers    ,     messageMode    ,     onHeaderTitleClick    ,     $composer    ,     0b1000000000000000     or     0b1110     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.header.MessageListHeader     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.header.MessageListHeader     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.header.MessageListHeader     or     MessageMode    .    $stable     shl     0b1111     or     0b01110000000000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.header.MessageListHeader     or     0b001110000000000000000000     and     $dirty1     shl     0b00010010    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable trailingContent: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit>? = @static composableLambda($composer, -1838782403, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C112@5533L164:MessageListHeader.kt#ce7b9i"  )  
  if (  $changed   and   0b01010001   !==   0b00010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -1838782403      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.header.MessageListHeader.<anonymous> (MessageListHeader.kt:112)"      )
    }
    
    DefaultMessageListHeaderTrailingContent    (    channel    ,     currentUser    ,     onChannelAvatarClick    ,     $composer    ,     0b1110     and     $dirty     or     0b01110000     and     $dirty     or     0b001110000000     and     $dirty1     shl     0b0011    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageListHeaderLeadingContent(
  stable onBackPressed: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageListHeaderCenterContent(
  stable channel: Channel
  stable currentUser: User?
  stable connectionState: ConnectionState
  stable modifier: Modifier? = @static Companion
  unstable typingUsers: List<User>? = @static emptyList()
  messageMode: MessageMode? = @dynamic Normal
  stable onHeaderTitleClick: Function1<Channel, Unit>? = @static { it: Channel ->

}

)
restartable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageListHeaderSubtitle(
  stable subtitle: String
  unstable typingUsers: List<User>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageListHeaderTrailingContent(
  stable channel: Channel
  stable currentUser: User?
  stable onClick: Function0<Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageListHeaderConnectedPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageListHeaderConnectingPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageListHeaderOfflinePreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageListHeaderUserTypingPreview()
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun MessageListHeaderManyMembersPreview()
restartable skippable scheme("[0, [0], [0], [0], [0], [0], [0]]") fun MessageContainer(
  messageListItemState: MessageListItemState
  stable onLongItemClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onReactionsClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onThreadClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onGiphyActionClick: Function1<GiphyAction, Unit>? = @static { it: GiphyAction ->

}

  stable onQuotedMessageClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

  stable dateSeparatorContent: Function3<DateSeparatorItemState, Composer, Int, Unit>? = @static ComposableSingletons$MessageContainerKt.lambda-1
  stable threadSeparatorContent: Function3<ThreadDateSeparatorItemState, Composer, Int, Unit>? = @static ComposableSingletons$MessageContainerKt.lambda-2
  stable systemMessageContent: Function3<SystemMessageItemState, Composer, Int, Unit>? = @static ComposableSingletons$MessageContainerKt.lambda-3
  stable messageItemContent: Function3<MessageItemState, Composer, Int, Unit>? = @static composableLambda($composer, 940278984, true) { it: MessageItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C86@4718L379:MessageContainer.kt#ykr9ih"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      940278984      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageContainer.<anonymous> (MessageContainer.kt:86)"      )
    }
    
    DefaultMessageItem    (    it    ,     onLongItemClick    ,     onReactionsClick    ,     onThreadClick    ,     onGiphyActionClick    ,     onQuotedMessageClick    ,     onMediaGalleryPreviewResult    ,     $composer    ,     MessageItemState    .    $stable     or     0b1110     and     $dirty     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageContainer     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageContainer     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageContainer     or     0b1110000000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageContainer     or     0b01110000000000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageContainer     or     0b001110000000000000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageContainer    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable typingIndicatorContent: Function3<TypingItemState, Composer, Int, Unit>? = @static ComposableSingletons$MessageContainerKt.lambda-4
  stable emptyThreadPlaceholderItemContent: Function3<EmptyThreadPlaceholderItemState, Composer, Int, Unit>? = @static ComposableSingletons$MessageContainerKt.lambda-5
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageDateSeparatorContent(
  dateSeparator: DateSeparatorItemState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageThreadSeparatorContent(
  threadSeparator: ThreadDateSeparatorItemState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultSystemMessageContent(
  systemMessageState: SystemMessageItemState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageItem(
  messageItem: MessageItemState
  stable onLongItemClick: Function1<Message, Unit>
  stable onReactionsClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onThreadClick: Function1<Message, Unit>
  stable onGiphyActionClick: Function1<GiphyAction, Unit>
  stable onQuotedMessageClick: Function1<Message, Unit>
  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable]]") fun MessageItem(
  messageItem: MessageItemState
  stable onLongItemClick: Function1<Message, Unit>
  stable modifier: Modifier? = @static Companion
  stable onReactionsClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onThreadClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onGiphyActionClick: Function1<GiphyAction, Unit>? = @static { it: GiphyAction ->

}

  stable onQuotedMessageClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

  stable leadingContent: @[ExtensionFunctionType] Function4<RowScope, MessageItemState, Composer, Int, Unit>? = @static ComposableSingletons$MessageItemKt.lambda-1
  stable headerContent: @[ExtensionFunctionType] Function4<ColumnScope, MessageItemState, Composer, Int, Unit>? = @static composableLambda($composer, -1314750404, true) { it: MessageItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C128@7372L121:MessageItem.kt#ykr9ih"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011010001   !==   0b10010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -1314750404      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageItem.<anonymous> (MessageItem.kt:128)"      )
    }
    
    DefaultMessageItemHeaderContent    (    it    ,     onReactionsClick    ,     $composer    ,     MessageItemState    .    $stable     or     0b1110     and     $dirty     shr     0b0011     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageItem     shr     0b0110    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable centerContent: @[ExtensionFunctionType] Function4<ColumnScope, MessageItemState, Composer, Int, Unit>? = @static composableLambda($composer, 1108782452, true) { it: MessageItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C134@7583L300:MessageItem.kt#ykr9ih"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b01110000   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b00100000     else     0b00010000
  }
  
  if (  $dirty   and   0b001011010001   !==   0b10010000   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1108782452      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageItem.<anonymous> (MessageItem.kt:134)"      )
    }
    
    DefaultMessageItemCenterContent    (    it    ,     onLongItemClick    ,     onGiphyActionClick    ,     onQuotedMessageClick    ,     onMediaGalleryPreviewResult    ,     $composer    ,     MessageItemState    .    $stable     or     0b1110     and     $dirty     shr     0b0011     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageItem     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageItem     shr     0b1001     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageItem     shr     0b1001     or     0b1110000000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageItem     shr     0b1001    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable footerContent: @[ExtensionFunctionType] Function4<ColumnScope, MessageItemState, Composer, Int, Unit>? = @static ComposableSingletons$MessageItemKt.lambda-2
  stable trailingContent: @[ExtensionFunctionType] Function4<RowScope, MessageItemState, Composer, Int, Unit>? = @static ComposableSingletons$MessageItemKt.lambda-3
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageItemLeadingContent(
  stable <this>: RowScope
  messageItem: MessageItemState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageItemHeaderContent(
  messageItem: MessageItemState
  stable onReactionsClick: Function1<Message, Unit>? = @static { it: Message ->

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageItemFooterContent(
  stable <this>: ColumnScope
  messageItem: MessageItemState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageItemTrailingContent(
  messageItem: MessageItemState
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageItemCenterContent(
  messageItem: MessageItemState
  stable onLongItemClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onGiphyActionClick: Function1<GiphyAction, Unit>? = @static { it: GiphyAction ->

}

  stable onQuotedMessageClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun EmojiMessageContent(
  messageItem: MessageItemState
  stable modifier: Modifier? = @static Companion
  stable onLongItemClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onGiphyActionClick: Function1<GiphyAction, Unit>? = @static { it: GiphyAction ->

}

  stable onQuotedMessageClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun RegularMessageContent(
  messageItem: MessageItemState
  stable modifier: Modifier? = @static Companion
  stable onLongItemClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onGiphyActionClick: Function1<GiphyAction, Unit>? = @static { it: GiphyAction ->

}

  stable onQuotedMessageClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageTextContent(
  stable message: Message
  stable currentUser: User?
  stable onLongItemClick: Function1<Message, Unit>
  stable onQuotedMessageClick: Function1<Message, Unit>
)
restartable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [_], [androidx.compose.ui.UiComposable]]") fun MessageList(
  unstable viewModel: MessageListViewModel
  stable modifier: Modifier? = @static Companion
  stable contentPadding: PaddingValues? = @dynamic PaddingValues(
  vertical   =   LiveLiterals$MessageListKt  .  Int$$$this$call-$get-dp$$arg-1$call-PaddingValues$param-contentPadding$fun-MessageList  (  )  .  dp
)
  messagesLazyListState: MessagesLazyListState? = @dynamic rememberMessageListState(0, 0, viewModel.currentMessagesState.parentMessageId, null, $composer, 0, 0b1011)
  stable threadMessagesStart: ThreadMessagesStart? = @static BOTTOM
  stable onThreadClick: Function1<Message, Unit>? = @dynamic { it: Message ->
  viewModel  .  openMessageThread  (  it  )
}

  stable onLongItemClick: Function1<Message, Unit>? = @dynamic { it: Message ->
  viewModel  .  selectMessage  (  it  )
}

  stable onReactionsClick: Function1<Message, Unit>? = @dynamic { it: Message ->
  viewModel  .  selectReactions  (  it  )
}

  stable onMessagesPageStartReached: Function0<Unit>? = @dynamic {
  viewModel  .  loadOlderMessages  (  )
}

  stable onLastVisibleMessageChanged: Function1<Message, Unit>? = @dynamic { it: Message ->
  viewModel  .  updateLastSeenMessage  (  it  )
}

  stable onScrollToBottom: Function0<Unit>? = @dynamic {
  viewModel  .  clearNewMessageState  (  )
}

  stable onGiphyActionClick: Function1<GiphyAction, Unit>? = @dynamic { it: GiphyAction ->
  viewModel  .  performGiphyAction  (  it  )
}

  stable onQuotedMessageClick: Function1<Message, Unit>? = @dynamic { message: Message ->
  viewModel  .  scrollToMessage  (  message  .  id  ,   message  .  parentId  )
}

  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @dynamic { it: MediaGalleryPreviewResult? ->
  if (  it  ?.  <get-resultType>  (  )   ==   MediaGalleryPreviewResultType  .  SHOW_IN_CHAT  ) {
    viewModel    .    scrollToMessage    (    it    .    messageId    ,     it    .    parentMessageId    )
  }

}

  stable onMessagesPageEndReached: Function1<String, Unit>? = @dynamic { it: String ->
  viewModel  .  loadNewerMessages  (
    messageId     =     it
  )
}

  stable onScrollToBottomClicked: Function1<Function0<Unit>, Unit>? = @dynamic { it: Function0<Unit> ->
  viewModel  .  scrollToBottom  (
    scrollToBottom     =     it
  )
}

  stable loadingContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, 1650189637, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C107@6357L44:MessageList.kt#ykr9ih"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1650189637      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageList.<anonymous> (MessageList.kt:107)"      )
    }
    
    DefaultMessageListLoadingIndicator    (    modifier    ,     $composer    ,     0b1110     and     $dirty     shr     0b0011    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable emptyContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, -123854316, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C108@6450L40:MessageList.kt#ykr9ih"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -123854316      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageList.<anonymous> (MessageList.kt:108)"      )
    }
    
    DefaultMessageListEmptyContent    (    modifier    ,     $composer    ,     0b1110     and     $dirty     shr     0b0011    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable helperContent: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>? = @static composableLambda($composer, 1816414864, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C110@6557L212:MessageList.kt#ykr9ih"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1816414864      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageList.<anonymous> (MessageList.kt:110)"      )
    }
    
    <this>    .    DefaultMessagesHelperContent    (    viewModel    .    currentMessagesState    ,     messagesLazyListState    ,     onScrollToBottomClicked    ,     $composer    ,     0b1110     and     $dirty     or     MessageListState    .    $stable     shl     0b0011     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageList     shr     0b0011     or     0b0001110000000000     and     $dirty1     shr     0b0110    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable loadingMoreContent: Function2<Composer, Int, Unit>? = @static ComposableSingletons$MessageListKt.lambda-1
  stable itemContent: Function3<MessageListItemState, Composer, Int, Unit>? = @static composableLambda($composer, 1651356347, true) { messageListItem: MessageListItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C118@6960L406:MessageList.kt#ykr9ih"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    messageListItem    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1651356347      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageList.<anonymous> (MessageList.kt:118)"      )
    }
    
    DefaultMessageContainer    (    messageListItem    ,     onMediaGalleryPreviewResult    ,     onThreadClick    ,     onLongItemClick    ,     onReactionsClick    ,     onGiphyActionClick    ,     onQuotedMessageClick    ,     $composer    ,     MessageListItemState    .    $stable     or     0b1110     and     $dirty     or     0b01110000     and     $dirty1     shr     0b0110     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageList     shr     0b1001     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageList     shr     0b1001     or     0b1110000000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageList     shr     0b1001     or     0b01110000000000000000     and     $dirty1     shl     0b1100     or     0b001110000000000000000000     and     $dirty1     shl     0b1100    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable fun DefaultMessageContainer(
  messageListItemState: MessageListItemState
  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

  stable onThreadClick: Function1<Message, Unit>
  stable onLongItemClick: Function1<Message, Unit>
  stable onReactionsClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onGiphyActionClick: Function1<GiphyAction, Unit>
  stable onQuotedMessageClick: Function1<Message, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageListLoadingIndicator(
  stable modifier: Modifier
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessageListEmptyContent(
  stable modifier: Modifier
)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [androidx.compose.ui.UiComposable], [_], [androidx.compose.ui.UiComposable]]") fun MessageList(
  currentState: MessageListState
  stable threadMessagesStart: ThreadMessagesStart? = @static BOTTOM
  stable modifier: Modifier? = @static Companion
  stable contentPadding: PaddingValues? = @dynamic PaddingValues(
  vertical   =   LiveLiterals$MessageListKt  .  Int$$$this$call-$get-dp$$arg-1$call-PaddingValues$param-contentPadding$fun-MessageList-1  (  )  .  dp
)
  messagesLazyListState: MessagesLazyListState? = @dynamic rememberMessageListState(0, 0, currentState.parentMessageId, null, $composer, 0, 0b1011)
  stable onMessagesPageStartReached: Function0<Unit>? = @static {

}

  stable onLastVisibleMessageChanged: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onScrolledToBottom: Function0<Unit>? = @static {

}

  stable onThreadClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onLongItemClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onReactionsClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onMediaGalleryPreviewResult: Function1<MediaGalleryPreviewResult?, Unit>? = @static { it: MediaGalleryPreviewResult? ->

}

  stable onGiphyActionClick: Function1<GiphyAction, Unit>? = @static { it: GiphyAction ->

}

  stable onQuotedMessageClick: Function1<Message, Unit>? = @static { it: Message ->

}

  stable onMessagesPageEndReached: Function1<String, Unit>? = @static { it: String ->

}

  stable onScrollToBottom: Function1<Function0<Unit>, Unit>? = @static { it: Function0<Unit> ->

}

  stable loadingContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, 1228187608, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C264@13901L44:MessageList.kt#ykr9ih"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1228187608      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageList.<anonymous> (MessageList.kt:264)"      )
    }
    
    DefaultMessageListLoadingIndicator    (    modifier    ,     $composer    ,     0b1110     and     $dirty     shr     0b0110    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable emptyContent: Function2<Composer, Int, Unit>? = @static composableLambda($composer, 1325114407, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C265@13994L40:MessageList.kt#ykr9ih"  )  
  if (  $changed   and   0b1011   !==   0b0010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      1325114407      ,       $changed      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageList.<anonymous> (MessageList.kt:265)"      )
    }
    
    DefaultMessageListEmptyContent    (    modifier    ,     $composer    ,     0b1110     and     $dirty     shr     0b0110    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable helperContent: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>? = @static composableLambda($composer, -266245469, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C267@14101L187:MessageList.kt#ykr9ih"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -266245469      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageList.<anonymous> (MessageList.kt:267)"      )
    }
    
    <this>    .    DefaultMessagesHelperContent    (    currentState    ,     messagesLazyListState    ,     onScrollToBottom    ,     $composer    ,     0b1110     and     $dirty     or     MessageListState    .    $stable     shl     0b0011     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageList     shl     0b0011     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageList     shr     0b0110     or     0b0001110000000000     and     $dirty1     shr     0b0110    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable loadingMoreContent: Function2<Composer, Int, Unit>? = @static ComposableSingletons$MessageListKt.lambda-2
  stable itemContent: Function3<MessageListItemState, Composer, Int, Unit>? = @static composableLambda($composer, 855875662, true) { it: MessageListItemState, $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C275@14460L393:MessageList.kt#ykr9ih"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    it    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      855875662      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.MessageList.<anonymous> (MessageList.kt:275)"      )
    }
    
    DefaultMessageContainer    (    it    ,     onMediaGalleryPreviewResult    ,     onThreadClick    ,     onLongItemClick    ,     onReactionsClick    ,     onGiphyActionClick    ,     onQuotedMessageClick    ,     $composer    ,     MessageListItemState    .    $stable     or     0b1110     and     $dirty     or     0b01110000     and     $dirty1     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageList     shr     0b00010010     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.MessageList     shr     0b00010010     or     0b1110000000000000     and     $dirty1     shl     0b1100     or     0b01110000000000000000     and     $dirty1     shl     0b1001     or     0b001110000000000000000000     and     $dirty1     shl     0b1001    ,     0    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

)
restartable skippable scheme("[androidx.compose.ui.UiComposable, [androidx.compose.ui.UiComposable], [_], [androidx.compose.ui.UiComposable]]") fun Messages(
  messagesState: MessageListState
  messagesLazyListState: MessagesLazyListState
  stable threadMessagesStart: ThreadMessagesStart? = @static BOTTOM
  stable onMessagesStartReached: Function0<Unit>
  stable onLastVisibleMessageChanged: Function1<Message, Unit>
  stable onScrolledToBottom: Function0<Unit>
  stable onMessagesEndReached: Function1<String, Unit>
  stable onScrollToBottom: Function1<Function0<Unit>, Unit>
  stable modifier: Modifier? = @static Companion
  stable contentPadding: PaddingValues? = @dynamic PaddingValues(
  vertical   =   LiveLiterals$MessagesKt  .  Int$$$this$call-$get-dp$$arg-1$call-PaddingValues$param-contentPadding$fun-Messages  (  )  .  dp
)
  stable helperContent: @[ExtensionFunctionType] Function3<BoxScope, Composer, Int, Unit>? = @static composableLambda($composer, -918381483, true) { $composer: Composer?, $changed: Int ->
  sourceInformation  (  $composer  ,   "C93@4933L188:Messages.kt#ykr9ih"  )  
  val   $dirty   =   $changed  
  if (  $changed   and   0b1110   ===   0  ) {
    $dirty     =     $dirty     or     if (    $composer    .    changed    (    <this>    )    )     0b0100     else     0b0010
  }
  
  if (  $dirty   and   0b01011011   !==   0b00010010   ||   !  $composer  .  skipping  ) {
    if (    isTraceInProgress    (    )    ) {
      traceEventStart      (      -918381483      ,       $dirty      ,       -1      ,       "io.getstream.chat.android.compose.ui.messages.list.Messages.<anonymous> (Messages.kt:93)"      )
    }
    
    <this>    .    DefaultMessagesHelperContent    (    messagesState    ,     messagesLazyListState    ,     onScrollToBottom    ,     $composer    ,     0b1110     and     $dirty     or     MessageListState    .    $stable     shl     0b0011     or     0b01110000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.Messages     shl     0b0011     or     0b001110000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.Messages     shl     0b0011     or     0b0001110000000000     and     $dirty    @    io.getstream.chat.android.compose.ui.messages.list.Messages     shr     0b1100    )    
    if (    isTraceInProgress    (    )    ) {
      traceEventEnd      (      )
    }

  } else {
    $composer    .    skipToGroupEnd    (    )
  }

}

  stable loadingMoreContent: Function2<Composer, Int, Unit>? = @static ComposableSingletons$MessagesKt.lambda-1
  stable itemContent: Function3<MessageListItemState, Composer, Int, Unit>
)
restartable skippable fun OnLastVisibleItemChanged(
  stable lazyListState: LazyListState
  stable onChanged: Function1<@[ParameterName(name = 'firstVisibleItemIndex')] Int, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessagesHelperContent(
  stable <this>: BoxScope
  messagesState: MessageListState
  messagesLazyListState: MessagesLazyListState
  stable scrollToBottom: Function1<Function0<Unit>, Unit>
)
restartable skippable scheme("[androidx.compose.ui.UiComposable]") fun DefaultMessagesLoadingMoreIndicator()
restartable skippable scheme("[0, [0]]") fun ChatTheme(
  stable isInDarkMode: Boolean = @dynamic isSystemInDarkTheme($composer, 0)
  stable colors: StreamColors? = @dynamic if (isInDarkMode) {
  $composer  .  startReplaceableGroup  (  -413699058  )  
  sourceInformation  (  $composer  ,   "160@9297L19"  )  
  val   tmp0_group   =   Companion  .  defaultDarkColors  (  $composer  ,   0b0110  )  
  $composer  .  endReplaceableGroup  (  )  
  tmp0_group  @  io.getstream.chat.android.compose.ui.theme.ChatTheme
} else {
  $composer  .  startReplaceableGroup  (  -413699020  )  
  sourceInformation  (  $composer  ,   "160@9335L15"  )  
  val   tmp1_group   =   Companion  .  defaultColors  (  $composer  ,   0b0110  )  
  $composer  .  endReplaceableGroup  (  )  
  tmp1_group  @  io.getstream.chat.android.compose.ui.theme.ChatTheme
}

  stable dimens: StreamDimens? = @dynamic Companion.defaultDimens()
  stable typography: StreamTypography? = @dynamic Companion.defaultTypography()
  stable shapes: StreamShapes? = @dynamic Companion.defaultShapes()
  unstable rippleTheme: RippleTheme? = @static StreamRippleTheme
  unstable attachmentFactories: List<AttachmentFactory>? = @dynamic StreamAttachmentFactories.defaultFactories()
  unstable attachmentPreviewHandlers: List<AttachmentPreviewHandler>? = @dynamic Companion.defaultAttachmentHandlers(LocalContext.<get-current>($composer, 0))
  unstable quotedAttachmentFactories: List<AttachmentFactory>? = @dynamic StreamAttachmentFactories.defaultQuotedFactories()
  reactionIconFactory: ReactionIconFactory? = @dynamic Companion.defaultFactory()
  unstable dateFormatter: DateFormatter? = @dynamic Companion.from(LocalContext.<get-current>($composer, 0))
  unstable channelNameFormatter: ChannelNameFormatter? = @dynamic Companion.defaultFormatter(
  context   =   LocalContext  .  <get-current>  (  $composer  ,   0  )
)
  messagePreviewFormatter: MessagePreviewFormatter? = @dynamic Companion.defaultFormatter(LocalContext.<get-current>($composer, 0), typography, attachmentFactories)
  imageLoaderFactory: StreamCoilImageLoaderFactory? = @dynamic Companion.defaultFactory()
  messageAlignmentProvider: MessageAlignmentProvider? = @dynamic Companion.defaultMessageAlignmentProvider()
  stable messageOptionsUserReactionAlignment: MessageOptionsUserReactionAlignment? = @static MessageOptionsUserReactionAlignment.END
  unstable attachmentsPickerTabFactories: List<AttachmentsPickerTabFactory>? = @dynamic AttachmentsPickerTabFactories.defaultFactories()
  stable videoThumbnailsEnabled: Boolean = @dynamic LiveLiterals$ChatThemeKt.Boolean$param-videoThumbnailsEnabled$fun-ChatTheme()
  streamCdnImageResizing: StreamCdnImageResizing? = @dynamic Companion.defaultStreamCdnImageResizing()
  stable readCountEnabled: Boolean = @dynamic LiveLiterals$ChatThemeKt.Boolean$param-readCountEnabled$fun-ChatTheme()
  stable ownMessageTheme: MessageTheme? = @dynamic Companion.defaultOwnTheme(typography, colors, $composer, 0b000110000000 or 0b1110 and $dirty shr 0b1001 or 0b01110000 and $dirty, 0)
  stable otherMessageTheme: MessageTheme? = @dynamic Companion.defaultOtherTheme(typography, colors, $composer, 0b000110000000 or 0b1110 and $dirty shr 0b1001 or 0b01110000 and $dirty, 0)
  unstable streamMediaRecorder: StreamMediaRecorder? = @dynamic DefaultStreamMediaRecorder(LocalContext.<get-current>($composer, 0))
  stable content: Function2<Composer, Int, Unit>
)
readonly fun <get-colors>(
  unused stable <this>: ChatTheme
): StreamColors
readonly fun <get-dimens>(
  unused stable <this>: ChatTheme
): StreamDimens
readonly fun <get-typography>(
  unused stable <this>: ChatTheme
): StreamTypography
readonly fun <get-shapes>(
  unused stable <this>: ChatTheme
): StreamShapes
readonly fun <get-attachmentFactories>(
  unused stable <this>: ChatTheme
): List<AttachmentFactory>
readonly fun <get-attachmentPreviewHandlers>(
  unused stable <this>: ChatTheme
): List<AttachmentPreviewHandler>
readonly fun <get-quotedAttachmentFactories>(
  unused stable <this>: ChatTheme
): List<AttachmentFactory>
readonly fun <get-reactionIconFactory>(
  unused stable <this>: ChatTheme
): ReactionIconFactory
readonly fun <get-dateFormatter>(
  unused stable <this>: ChatTheme
): DateFormatter
readonly fun <get-channelNameFormatter>(
  unused stable <this>: ChatTheme
): ChannelNameFormatter
readonly fun <get-messagePreviewFormatter>(
  unused stable <this>: ChatTheme
): MessagePreviewFormatter
readonly fun <get-messageAlignmentProvider>(
  unused stable <this>: ChatTheme
): MessageAlignmentProvider
readonly fun <get-messageOptionsUserReactionAlignment>(
  unused stable <this>: ChatTheme
): MessageOptionsUserReactionAlignment
readonly fun <get-attachmentsPickerTabFactories>(
  unused stable <this>: ChatTheme
): List<AttachmentsPickerTabFactory>
readonly fun <get-videoThumbnailsEnabled>(
  unused stable <this>: ChatTheme
): Boolean
readonly fun <get-streamCdnImageResizing>(
  unused stable <this>: ChatTheme
): StreamCdnImageResizing
readonly fun <get-readCountEnabled>(
  unused stable <this>: ChatTheme
): Boolean
readonly fun <get-ownMessageTheme>(
  unused stable <this>: ChatTheme
): MessageTheme
readonly fun <get-otherMessageTheme>(
  unused stable <this>: ChatTheme
): MessageTheme
readonly fun <get-streamMediaRecorder>(
  unused stable <this>: ChatTheme
): StreamMediaRecorder
fun defaultOwnTheme(
  stable typography: StreamTypography? = @dynamic Companion.defaultTypography()
  stable colors: StreamColors? = @dynamic val tmp0_subject = isSystemInDarkTheme($composer, 0)
when {
  tmp0_subject  @  io.getstream.chat.android.compose.ui.theme.MessageTheme.Companion.defaultOwnTheme   ==   LiveLiterals$MessageThemeKt  .  Boolean$arg-1$call-EQEQ$cond$when$param-colors$fun-defaultOwnTheme$class-Companion$class-MessageTheme  (  )   ->   {
    $composer    .    startReplaceableGroup    (    -1263451396    )    
    sourceInformation    (    $composer    ,     "52@1984L19"    )    
    val     tmp0_group     =     Companion    .    defaultDarkColors    (    $composer    ,     0b0110    )    
    $composer    .    endReplaceableGroup    (    )    
    tmp0_group    @    io.getstream.chat.android.compose.ui.theme.MessageTheme.Companion.defaultOwnTheme
  }
  else   ->   {
    $composer    .    startReplaceableGroup    (    -1263451339    )    
    sourceInformation    (    $composer    ,     "53@2041L15"    )    
    val     tmp1_group     =     Companion    .    defaultColors    (    $composer    ,     0b0110    )    
    $composer    .    endReplaceableGroup    (    )    
    tmp1_group    @    io.getstream.chat.android.compose.ui.theme.MessageTheme.Companion.defaultOwnTheme
  }

}

  stable <this>: Companion
): MessageTheme
fun defaultOtherTheme(
  stable typography: StreamTypography? = @dynamic Companion.defaultTypography()
  stable colors: StreamColors? = @dynamic val tmp0_subject = isSystemInDarkTheme($composer, 0)
when {
  tmp0_subject  @  io.getstream.chat.android.compose.ui.theme.MessageTheme.Companion.defaultOtherTheme   ==   LiveLiterals$MessageThemeKt  .  Boolean$arg-1$call-EQEQ$cond$when$param-colors$fun-defaultOtherTheme$class-Companion$class-MessageTheme  (  )   ->   {
    $composer    .    startReplaceableGroup    (    -796683870    )    
    sourceInformation    (    $composer    ,     "66@2588L19"    )    
    val     tmp0_group     =     Companion    .    defaultDarkColors    (    $composer    ,     0b0110    )    
    $composer    .    endReplaceableGroup    (    )    
    tmp0_group    @    io.getstream.chat.android.compose.ui.theme.MessageTheme.Companion.defaultOtherTheme
  }
  else   ->   {
    $composer    .    startReplaceableGroup    (    -796683813    )    
    sourceInformation    (    $composer    ,     "67@2645L15"    )    
    val     tmp1_group     =     Companion    .    defaultColors    (    $composer    ,     0b0110    )    
    $composer    .    endReplaceableGroup    (    )    
    tmp1_group    @    io.getstream.chat.android.compose.ui.theme.MessageTheme.Companion.defaultOtherTheme
  }

}

  stable <this>: Companion
): MessageTheme
fun defaultTheme(
  stable own: Boolean
  stable typography: StreamTypography
  stable colors: StreamColors
  unused stable <this>: Companion
): MessageTheme
fun defaultColors(
  unused stable <this>: Companion
): StreamColors
fun defaultDarkColors(
  unused stable <this>: Companion
): StreamColors
fun defaultColor(
  unused stable <this>: StreamRippleTheme
): Color
fun rippleAlpha(
  unused stable <this>: StreamRippleTheme
): RippleAlpha
readonly fun initialsGradient(
  stable initials: String
): Brush
fun rememberStreamImagePainter(
  unstable data: Any?
  unstable placeholderPainter: Painter? = @static null
  unstable errorPainter: Painter? = @static null
  unstable fallbackPainter: Painter? = @dynamic errorPainter
  stable onLoading: Function1<Loading, Unit>? = @static null
  stable onSuccess: Function1<Success, Unit>? = @static null
  stable onError: Function1<Error, Unit>? = @static null
  stable contentScale: ContentScale? = @static Companion.Fit
  stable filterQuality: FilterQuality = @dynamic Companion.DefaultFilterQuality
): AsyncImagePainter
fun rememberStreamImagePainter(
  unstable model: ImageRequest
  unstable placeholderPainter: Painter? = @static null
  unstable errorPainter: Painter? = @static null
  unstable fallbackPainter: Painter? = @dynamic errorPainter
  stable onLoading: Function1<Loading, Unit>? = @static null
  stable onSuccess: Function1<Success, Unit>? = @static null
  stable onError: Function1<Error, Unit>? = @static null
  stable contentScale: ContentScale? = @static Companion.Fit
  stable filterQuality: FilterQuality = @dynamic Companion.DefaultFilterQuality
): AsyncImagePainter
readonly fun <get-current>(
  stable <this>: StreamImageLoaderProvidableCompositionLocal
): ImageLoader
fun rememberMessagesLazyListState(
  stable initialFirstVisibleItemIndex: Int = @dynamic LiveLiterals$MessageListUtilsKt.Int$param-initialFirstVisibleItemIndex$fun-rememberMessagesLazyListState()
  stable initialFirstVisibleItemScrollOffset: Int = @dynamic LiveLiterals$MessageListUtilsKt.Int$param-initialFirstVisibleItemScrollOffset$fun-rememberMessagesLazyListState()
  messageOffsetHandler: MessageOffsetHandler? = @dynamic Companion.defaultOffsetHandler
): MessagesLazyListState
fun rememberMessageListState(
  stable initialFirstVisibleItemIndex: Int = @dynamic LiveLiterals$MessageListUtilsKt.Int$param-initialFirstVisibleItemIndex$fun-rememberMessageListState()
  stable initialFirstVisibleItemScrollOffset: Int = @dynamic LiveLiterals$MessageListUtilsKt.Int$param-initialFirstVisibleItemScrollOffset$fun-rememberMessageListState()
  stable parentMessageId: String? = @static null
  messageOffsetHandler: MessageOffsetHandler? = @dynamic Companion.defaultOffsetHandler
): MessagesLazyListState
fun createReactionIcon(
  stable type: String
  unstable <this>: DefaultReactionIconFactory
): ReactionIcon
fun createReactionIcons(
  unstable <this>: DefaultReactionIconFactory
): Map<String, ReactionIcon>
fun buildAnnotatedMessageText(
  stable text: String
  stable color: Color
): AnnotatedString
fun attachmentDownloadState()
