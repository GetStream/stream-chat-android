<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:MessageItem.kt$!messageItem.isMine &amp;&amp; ( messageItem.showMessageFooter || messageItem.groupPosition.contains(MessagePosition.BOTTOM) || messageItem.groupPosition.contains( MessagePosition.NONE, ) )</ID>
    <ID>ComplexCondition:MessageTranslatedLabel.kt$!isGiphy &amp;&amp; !isDeleted &amp;&amp; userLanguage != i18nLanguage &amp;&amp; translatedText != messageItem.message.text</ID>
    <ID>ComplexCondition:Messages.kt$!endOfMessages &amp;&amp; index == messages.lastIndex &amp;&amp; messages.isNotEmpty() &amp;&amp; lazyListState.isScrollInProgress</ID>
    <ID>ForbiddenComment:MessageText.kt$// TODO: Fix emoji font padding once this is resolved and exposed: https://issuetracker.google.com/issues/171394808</ID>
    <ID>ForbiddenComment:QuotedMessageText.kt$// TODO: Fix emoji font padding once this is resolved and exposed: https://issuetracker.google.com/issues/171394808</ID>
    <ID>LargeClass:MediaGalleryPreviewActivity.kt$MediaGalleryPreviewActivity : AppCompatActivity</ID>
    <ID>LongMethod:AttachmentsPicker.kt$@Composable public fun AttachmentsPicker( attachmentsPickerViewModel: AttachmentsPickerViewModel, onAttachmentsSelected: (List&lt;Attachment>) -> Unit, onTabClick: (Int, AttachmentsPickerMode) -> Unit, onAttachmentPickerAction: (AttachmentPickerAction) -> Unit = {}, onDismiss: () -> Unit, modifier: Modifier = Modifier, tabFactories: List&lt;AttachmentsPickerTabFactory> = ChatTheme.attachmentsPickerTabFactories, shape: Shape = ChatTheme.shapes.bottomSheet, )</ID>
    <ID>LongMethod:AttachmentsPickerPollTabFactory.kt$AttachmentsPickerPollTabFactory$@Composable override fun PickerTabContent( onAttachmentPickerAction: (AttachmentPickerAction) -> Unit, attachments: List&lt;AttachmentPickerItemState>, onAttachmentsChanged: (List&lt;AttachmentPickerItemState>) -> Unit, onAttachmentItemSelected: (AttachmentPickerItemState) -> Unit, onAttachmentsSubmitted: (List&lt;AttachmentMetaData>) -> Unit, )</ID>
    <ID>LongMethod:AudioRecordingTheme.kt$AudioRecordingTheme.Companion$@Composable public fun defaultTheme( isInDarkMode: Boolean = isSystemInDarkTheme(), typography: StreamTypography = StreamTypography.defaultTypography(), colors: StreamColors = when (isInDarkMode) { true -> StreamColors.defaultDarkColors() else -> StreamColors.defaultColors() }, ): AudioRecordingTheme</ID>
    <ID>LongMethod:DefaultMessageComposerRecordingContent.kt$@Composable @OptIn(ExperimentalPermissionsApi::class) public fun DefaultAudioRecordButton( state: RecordingState, recordingActions: AudioRecordingActions = AudioRecordingActions.None, holdToRecordThreshold: Long = HOLD_TO_RECORD_THRESHOLD, holdToRecordDismissTimeout: Long = HOLD_TO_RECORD_DISMISS_TIMEOUT, permissionRationaleDismissTimeout: Long = PERMISSION_RATIONALE_DISMISS_TIMEOUT, )</ID>
    <ID>LongMethod:DefaultMessageComposerRecordingContent.kt$@Composable private fun DefaultMessageComposerRecordingContent( modifier: Modifier = Modifier, durationInMs: Int = 0, waveformVisible: Boolean = true, waveformThumbVisible: Boolean = false, waveformData: List&lt;Float>, waveformPlaying: Boolean = false, waveformProgress: Float = 0f, slideToCancelVisible: Boolean = true, holdControlsVisible: Boolean = false, holdControlsLocked: Boolean = false, holdControlsOffset: IntOffset = IntOffset.Zero, recordingControlsVisible: Boolean = true, recordingStopControlVisible: Boolean = true, recordingActions: AudioRecordingActions = AudioRecordingActions.None, )</ID>
    <ID>LongMethod:DefaultMessageComposerRecordingContent.kt$@Composable private fun RecordingContent( modifier: Modifier = Modifier, durationInMs: Int = 0, waveformVisible: Boolean = true, waveformThumbVisible: Boolean = false, waveformData: List&lt;Float>, waveformPlaying: Boolean = false, waveformProgress: Float = 0f, slideToCancelVisible: Boolean = true, slideToCancelProgress: Float = 0f, holdControlsOffset: IntOffset = IntOffset.Zero, onToggleRecordingPlayback: () -> Unit, onSliderDragStart: (Float) -> Unit, onSliderDragStop: (Float) -> Unit, )</ID>
    <ID>LongMethod:DefaultMessageComposerRecordingContent.kt$@Composable private fun RecordingControlButtons( isStopControlVisible: Boolean, onDeleteRecording: () -> Unit, onStopRecording: () -> Unit, onCompleteRecording: (Boolean) -> Unit, )</ID>
    <ID>LongMethod:GiphyMessageContent.kt$@Composable public fun GiphyMessageContent( message: Message, modifier: Modifier = Modifier, onGiphyActionClick: (GiphyAction) -> Unit = {}, )</ID>
    <ID>LongMethod:GroupAvatar.kt$@Composable public fun GroupAvatar( users: List&lt;User>, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, textStyle: TextStyle = ChatTheme.typography.captionBold, onClick: (() -> Unit)? = null, )</ID>
    <ID>LongMethod:MediaGalleryPreviewActivity.kt$MediaGalleryPreviewActivity$@Composable private fun ImagePreviewContent( attachment: Attachment, pagerState: PagerState, page: Int, )</ID>
    <ID>LongMethod:MediaGalleryPreviewActivity.kt$MediaGalleryPreviewActivity$@Composable private fun MediaGalleryItem( index: Int, attachment: Attachment, user: User, pagerState: PagerState, )</ID>
    <ID>LongMethod:MediaGalleryPreviewActivity.kt$MediaGalleryPreviewActivity$@Composable private fun VideoPreviewContent( attachment: Attachment, pagerState: PagerState, page: Int, onPlaybackError: () -> Unit, )</ID>
    <ID>LongMethod:MessageComposer.kt$@Composable internal fun DefaultComposerIntegrations( messageInputState: MessageComposerState, onAttachmentsClick: () -> Unit, onCommandsClick: () -> Unit, ownCapabilities: Set&lt;String>, )</ID>
    <ID>LongMethod:MessageOptions.kt$@Composable public fun defaultMessageOptionsState( selectedMessage: Message, currentUser: User?, isInThread: Boolean, ownCapabilities: Set&lt;String>, ): List&lt;MessageOptionItemState></ID>
    <ID>LongMethod:PollCreationDiscardDialog.kt$@Composable public fun PollCreationDiscardDialog( usePlatformDefaultWidth: Boolean = false, onCancelClicked: () -> Unit, onDiscardClicked: () -> Unit, )</ID>
    <ID>LongMethod:PollMessageContent.kt$@Composable private fun PollOptionItem( modifier: Modifier = Modifier, poll: Poll, option: Option, voteCount: Int, totalVoteCount: Int, users: List&lt;User>, checkedCount: Int, checked: Boolean, onCastVote: () -> Unit, onRemoveVote: () -> Unit, )</ID>
    <ID>LongMethod:PollMoreOptionsDialog.kt$@Composable public fun PollMoreOptionsDialog( selectedPoll: SelectedPoll?, listViewModel: MessageListViewModel, onDismissRequest: () -> Unit, onBackPressed: () -> Unit, )</ID>
    <ID>LongMethod:PollOptionList.kt$@Composable public fun PollOptionList( modifier: Modifier = Modifier, lazyListState: LazyListState = rememberLazyListState(), title: String = stringResource(id = R.string.stream_compose_poll_option_title), optionItems: List&lt;PollOptionItem> = emptyList(), onQuestionsChanged: (List&lt;PollOptionItem>) -> Unit, itemHeightSize: Dp = ChatTheme.dimens.pollOptionInputHeight, itemInnerPadding: PaddingValues = PaddingValues(horizontal = 16.dp, vertical = 4.dp), )</ID>
    <ID>LongMethod:PollSwitchList.kt$@Composable public fun PollSwitchList( modifier: Modifier = Modifier, pollSwitchItems: List&lt;PollSwitchItem>, onSwitchesChanged: (List&lt;PollSwitchItem>) -> Unit, itemHeightSize: Dp = ChatTheme.dimens.pollOptionInputHeight, itemInnerPadding: PaddingValues = PaddingValues(horizontal = 16.dp, vertical = 16.dp), )</ID>
    <ID>LongMethod:StreamTypography.kt$StreamTypography.Companion$public fun defaultTypography(fontFamily: FontFamily? = null): StreamTypography</ID>
    <ID>LongParameterList:AudioRecordAttachmentContent.kt$( modifier: Modifier = Modifier, attachment: Attachment, playerState: AudioPlayerState, size: ComponentSize, padding: ComponentPadding, playbackToggleStyle: (isPlaying: Boolean) -> IconContainerStyle, timerStyle: TextContainerStyle, waveformSliderStyle: WaveformSliderLayoutStyle, onPlayToggleClick: (Attachment) -> Unit = {}, onThumbDragStart: (Attachment) -> Unit = {}, onThumbDragStop: (Attachment, Float) -> Unit = { _, _ -> }, tailContent: @Composable (isPlaying: Boolean) -> Unit = {}, )</ID>
    <ID>LongParameterList:MediaAttachmentContent.kt$( attachment: Attachment, message: Message, skipEnrichUrl: Boolean, onMediaGalleryPreviewResult: (MediaGalleryPreviewResult?) -> Unit = {}, onLongItemClick: (Message) -> Unit, onContentItemClick: ( mediaGalleryPreviewLauncher: ManagedActivityResultLauncher&lt;MediaGalleryPreviewContract.Input, MediaGalleryPreviewResult?>, message: Message, attachmentPosition: Int, videoThumbnailsEnabled: Boolean, streamCdnImageResizing: StreamCdnImageResizing, skipEnrichUrl: Boolean, ) -> Unit, overlayContent: @Composable (attachmentType: String?) -> Unit, )</ID>
    <ID>LongParameterList:MediaAttachmentContent.kt$( mediaGalleryPreviewLauncher: ManagedActivityResultLauncher&lt;MediaGalleryPreviewContract.Input, MediaGalleryPreviewResult?>, message: Message, attachmentPosition: Int, videoThumbnailsEnabled: Boolean, streamCdnImageResizing: StreamCdnImageResizing, skipEnrichUrl: Boolean, )</ID>
    <ID>LongParameterList:MediaGalleryPreviewActivity.kt$MediaGalleryPreviewActivity$( context: Context, mediaGalleryPreviewAction: MediaGalleryPreviewAction, currentPage: Int, attachments: List&lt;Attachment>, writePermissionState: PermissionState, downloadPayload: MutableState&lt;Attachment?>, )</ID>
    <ID>LongParameterList:MediaGalleryPreviewActivityAttachmentState.kt$MediaGalleryPreviewActivityAttachmentState$( val name: String?, val thumbUrl: String?, val imageUrl: String?, val assetUrl: String?, val originalWidth: Int?, val originalHeight: Int?, val type: String?, )</ID>
    <ID>LongParameterList:MessagesScreen.kt$( listViewModel: MessageListViewModel, composerViewModel: MessageComposerViewModel, selectedMessageState: SelectedMessageState?, selectedMessage: Message, skipPushNotification: Boolean, skipEnrichUrl: Boolean, )</ID>
    <ID>LongParameterList:PollMessageContent.kt$( modifier: Modifier = Modifier, poll: Poll, option: Option, voteCount: Int, totalVoteCount: Int, users: List&lt;User>, checkedCount: Int, checked: Boolean, onCastVote: () -> Unit, onRemoveVote: () -> Unit, )</ID>
    <ID>LongParameterList:PollMoreOptionsDialog.kt$( index: Int, poll: Poll, option: Option, voteCount: Int, checkedCount: Int, checked: Boolean, onCastVote: () -> Unit, onRemoveVote: () -> Unit, )</ID>
    <ID>LoopWithTooManyJumpStatements:DefaultMessageComposerRecordingContent.kt$while</ID>
    <ID>MagicNumber:AudioRecordAttachmentPreviewContent.kt$100</ID>
    <ID>MagicNumber:AudioRecordAttachmentPreviewContent.kt$1000</ID>
    <ID>MagicNumber:AudioWaveSeekbar.kt$0.4</ID>
    <ID>MagicNumber:AudioWaveSeekbar.kt$100F</ID>
    <ID>MagicNumber:AudioWaveSeekbar.kt$10F</ID>
    <ID>MagicNumber:AudioWaveSeekbar.kt$50F</ID>
    <ID>MagicNumber:AvatarPosition.kt$3</ID>
    <ID>MagicNumber:DefaultMessageComposerRecordingContent.kt$1000</ID>
    <ID>MagicNumber:DefaultMessageComposerRecordingContent.kt$150</ID>
    <ID>MagicNumber:DefaultMessageComposerRecordingContent.kt$60</ID>
    <ID>MagicNumber:FileAttachmentContent.kt$0.85f</ID>
    <ID>MagicNumber:FilesPicker.kt$6f</ID>
    <ID>MagicNumber:MediaAttachmentContent.kt$0.4f</ID>
    <ID>MagicNumber:MediaAttachmentFactory.kt$0.25f</ID>
    <ID>MagicNumber:MediaAttachmentQuotedContent.kt$0.8f</ID>
    <ID>MagicNumber:MediaGalleryPreviewActivity.kt$MediaGalleryPreviewActivity$0.2f</ID>
    <ID>MagicNumber:MediaGalleryPreviewActivity.kt$MediaGalleryPreviewActivity$0.4f</ID>
    <ID>MagicNumber:MediaGalleryPreviewActivity.kt$MediaGalleryPreviewActivity$8f</ID>
    <ID>MagicNumber:Messages.kt$3</ID>
    <ID>MagicNumber:Messages.kt$5</ID>
    <ID>MagicNumber:PlaybackTimer.kt$100</ID>
    <ID>MagicNumber:PollMessageContent.kt$0.5f</ID>
    <ID>MagicNumber:PollMessageContent.kt$10</ID>
    <ID>MagicNumber:PollMoreOptionsDialog.kt$200</ID>
    <ID>MagicNumber:PollMoreOptionsDialog.kt$400</ID>
    <ID>MagicNumber:PollOptionList.kt$5</ID>
    <ID>MagicNumber:PollOptionList.kt$8</ID>
    <ID>MagicNumber:PollSwitchList.kt$8</ID>
    <ID>MagicNumber:PollViewResultDialog.kt$200</ID>
    <ID>MagicNumber:PollViewResultDialog.kt$400</ID>
    <ID>MagicNumber:SearchInput.kt$8f</ID>
    <ID>MagicNumber:TypingIndicatorAnimatedDot.kt$0.5f</ID>
    <ID>MagicNumber:WaveformSlider.kt$100</ID>
    <ID>MagicNumber:WaveformSlider.kt$50</ID>
    <ID>MaxLineLength:AttachmentsPickerPollTabFactory.kt$AttachmentsPickerPollTabFactory$var switchItemList: List&lt;PollSwitchItem> by remember { mutableStateOf(pollSwitchItemFactory.providePollSwitchItemList()) }</ID>
    <ID>MaxLineLength:AttachmentsPickerTabFactories.kt$AttachmentsPickerTabFactories$*</ID>
    <ID>MaxLineLength:ChatTheme.kt$error("No attachments picker tab factories provided! Make sure to wrap all usages of Stream components in a ChatTheme.")</ID>
    <ID>MaxLineLength:MediaAttachmentContent.kt$mediaGalleryPreviewLauncher: ManagedActivityResultLauncher&lt;MediaGalleryPreviewContract.Input, MediaGalleryPreviewResult?></ID>
    <ID>MaxLineLength:MessageItem.kt$message.isDeleted() &amp;&amp; messageItem.deletedMessageVisibility == DeletedMessageVisibility.VISIBLE_FOR_CURRENT_USER</ID>
    <ID>MaxLineLength:MessageItem.kt$messageItem.showMessageFooter || messageItem.groupPosition.contains(MessagePosition.BOTTOM)</ID>
    <ID>MaxLineLength:MessageOptions.kt$iconPainter = painterResource(id = if (selectedMessage.pinned) R.drawable.stream_compose_ic_unpin_message else R.drawable.stream_compose_ic_pin_message)</ID>
    <ID>MaxLineLength:MessageOptions.kt$title = if (selectedMessage.pinned) R.string.stream_compose_unpin_message else R.string.stream_compose_pin_message</ID>
    <ID>MaxLineLength:MessagesScreen.kt$*</ID>
    <ID>MaxLineLength:MessagesScreen.kt$allowUserSuggestedOptions = action.switches.any { it.key == "allowUserSuggestedOptions" &amp;&amp; it.enabled }</ID>
    <ID>MaxLineLength:PollCreationHeader.kt$*</ID>
    <ID>MaxLineLength:PollSwitchItem.kt$PollSwitchInput$*</ID>
    <ID>MaxLineLength:QuotedMessageTextFormatter.kt$QuotedMessageTextFormatter.Companion$private</ID>
    <ID>MaxLineLength:StreamAttachmentFactories.kt$StreamAttachmentFactories$mediaGalleryPreviewLauncher: ManagedActivityResultLauncher&lt;MediaGalleryPreviewContract.Input, MediaGalleryPreviewResult?></ID>
    <ID>MaxLineLength:StreamColors.kt$StreamColors$*</ID>
    <ID>MaxLineLength:WaveformSlider.kt$// StreamLog.v("WaveformTrack") { "[onDraw] startIdx: $startIdx, totalBars: $totalBars, visibleBarLimit: $visibleBarLimit, waveformData.size: ${waveformData.size}" }</ID>
    <ID>ParameterListWrapping:QuotedMessageTextFormatter.kt$QuotedMessageTextFormatter.Companion$(Boolean)</ID>
    <ID>ParameterListWrapping:QuotedMessageTextFormatter.kt$QuotedMessageTextFormatter.Companion$(isInDarkMode: Boolean, typography: StreamTypography, colors: StreamColors)</ID>
    <ID>ReturnCount:ChannelListViewModel.kt$ChannelListViewModel$private suspend fun loadMoreQueryChannels()</ID>
    <ID>ReturnCount:ChannelListViewModel.kt$ChannelListViewModel$private suspend fun loadMoreQueryMessages()</ID>
    <ID>TooManyFunctions:MediaGalleryPreviewActivity.kt$MediaGalleryPreviewActivity : AppCompatActivity</ID>
    <ID>TooManyFunctions:MessageComposerViewModel.kt$MessageComposerViewModel : ViewModel</ID>
    <ID>TopLevelPropertyNaming:AudioWaveSeekbar.kt$private const val DEFAULT_TRACKER_HEIGHT_DP = 60</ID>
    <ID>TopLevelPropertyNaming:AudioWaveSeekbar.kt$private const val DEFAULT_TRACKER_WIDTH = 4</ID>
    <ID>TopLevelPropertyNaming:DefaultMessageComposerRecordingContent.kt$private const val HOLD_TO_RECORD_DISMISS_TIMEOUT = 1000L</ID>
    <ID>TopLevelPropertyNaming:DefaultMessageComposerRecordingContent.kt$private const val HOLD_TO_RECORD_THRESHOLD = 1000L</ID>
    <ID>TopLevelPropertyNaming:DefaultMessageComposerRecordingContent.kt$private const val PERMISSION_RATIONALE_DISMISS_TIMEOUT = 1000L</ID>
    <ID>UnusedPrivateMember:DefaultMessageComposerRecordingContent.kt$private fun formatMillis(milliseconds: Int): String</ID>
    <ID>UnusedPrivateMember:MessageComposer.kt$private fun Offset.toRestrictedCoordinates(): Pair&lt;Float, Float></ID>
  </CurrentIssues>
</SmellBaseline>
