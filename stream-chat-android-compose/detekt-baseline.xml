<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:MessageItem.kt$!messageItem.isMine &amp;&amp; ( messageItem.shouldShowFooter || messageItem.groupPosition == Bottom || messageItem.groupPosition == None )</ID>
    <ID>ComplexCondition:MessageOptions.kt$((isOwnMessage &amp;&amp; canEditOwnMessage) || canEditAnyMessage) &amp;&amp; !selectedMessage.isGiphy()</ID>
    <ID>ComplexCondition:Messages.kt$!endOfMessages &amp;&amp; index == messages.lastIndex &amp;&amp; messages.isNotEmpty() &amp;&amp; lazyListState.isScrollInProgress</ID>
    <ID>ComplexCondition:Messages.kt$!startOfMessages &amp;&amp; index == 0 &amp;&amp; messages.isNotEmpty() &amp;&amp; lazyListState.isScrollInProgress</ID>
    <ID>ComplexMethod:AttachmentsPicker.kt$ @OptIn(ExperimentalPermissionsApi::class) @Composable public fun AttachmentsPicker( attachmentsPickerViewModel: AttachmentsPickerViewModel, onAttachmentsSelected: (List&lt;Attachment>) -> Unit, onDismiss: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, )</ID>
    <ID>ComplexMethod:MessageListViewModel.kt$MessageListViewModel$ private fun groupMessages( messages: List&lt;Message>, isInThread: Boolean, reads: List&lt;ChannelUserRead>, ): List&lt;MessageListItemState></ID>
    <ID>ComplexMethod:MessageOptions.kt$ @Composable public fun defaultMessageOptionsState( selectedMessage: Message, currentUser: User?, isInThread: Boolean, ownCapabilities: Set&lt;String>, ): List&lt;MessageOptionItemState></ID>
    <ID>ComplexMethod:Messages.kt$ @Composable public fun Messages( messagesState: MessagesState, lazyListState: LazyListState, onMessagesStartReached: () -> Unit, onLastVisibleMessageChanged: (Message) -> Unit, onScrolledToBottom: () -> Unit, onMessagesEndReached: (String) -> Unit, onScrollToBottom: (() -> Unit) -> Unit, modifier: Modifier = Modifier, contentPadding: PaddingValues = PaddingValues(vertical = 16.dp), helperContent: @Composable BoxScope.() -> Unit = { DefaultMessagesHelperContent( messagesState = messagesState, lazyListState = lazyListState, scrollToBottom = onScrollToBottom ) }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit, )</ID>
    <ID>ComplexMethod:MessagesScreen.kt$ @OptIn( ExperimentalAnimationApi::class, ExperimentalFoundationApi::class, ExperimentalCoroutinesApi::class ) @Composable public fun MessagesScreen( channelId: String, messageLimit: Int = MessageListViewModel.DefaultMessageLimit, showHeader: Boolean = true, enforceUniqueReactions: Boolean = true, showDateSeparators: Boolean = true, showSystemMessages: Boolean = true, deletedMessageVisibility: DeletedMessageVisibility = DeletedMessageVisibility.ALWAYS_VISIBLE, messageFooterVisibility: MessageFooterVisibility = MessageFooterVisibility.WithTimeDifference(), onBackPressed: () -> Unit = {}, onHeaderActionClick: (channel: Channel) -> Unit = {}, )</ID>
    <ID>ForbiddenComment:MessageText.kt$// TODO: Fix emoji font padding once this is resolved and exposed: https://issuetracker.google.com/issues/171394808</ID>
    <ID>ForbiddenComment:QuotedMessageText.kt$// TODO: Fix emoji font padding once this is resolved and exposed: https://issuetracker.google.com/issues/171394808</ID>
    <ID>LongMethod:AttachmentsPicker.kt$ @Composable private fun AttachmentPickerOptions( attachmentsPickerMode: AttachmentsPickerMode, hasPickedImages: Boolean, hasPickedFiles: Boolean, onOptionClick: (AttachmentsPickerMode) -> Unit, onSendAttachmentsClick: () -> Unit, )</ID>
    <ID>LongMethod:AttachmentsPicker.kt$ @OptIn(ExperimentalPermissionsApi::class) @Composable public fun AttachmentsPicker( attachmentsPickerViewModel: AttachmentsPickerViewModel, onAttachmentsSelected: (List&lt;Attachment>) -> Unit, onDismiss: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, )</ID>
    <ID>LongMethod:GiphyMessageContent.kt$ @Composable public fun GiphyMessageContent( message: Message, modifier: Modifier = Modifier, onGiphyActionClick: (GiphyAction) -> Unit = {}, )</ID>
    <ID>LongMethod:GroupAvatar.kt$ @Composable public fun GroupAvatar( users: List&lt;User>, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, textStyle: TextStyle = ChatTheme.typography.captionBold, onClick: (() -> Unit)? = null, )</ID>
    <ID>LongMethod:ImageAttachmentContent.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun ImageAttachmentContent( attachmentState: AttachmentState, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:MessageComposer.kt$ @Composable internal fun DefaultComposerIntegrations( messageInputState: MessageComposerState, onAttachmentsClick: () -> Unit, onCommandsClick: () -> Unit, ownCapabilities: Set&lt;String>, )</ID>
    <ID>LongMethod:MessageListViewModel.kt$MessageListViewModel$ private fun observeChannel()</ID>
    <ID>LongMethod:MessageOptions.kt$ @Composable public fun defaultMessageOptionsState( selectedMessage: Message, currentUser: User?, isInThread: Boolean, ownCapabilities: Set&lt;String>, ): List&lt;MessageOptionItemState></ID>
    <ID>LongMethod:Messages.kt$ @Composable public fun Messages( messagesState: MessagesState, lazyListState: LazyListState, onMessagesStartReached: () -> Unit, onLastVisibleMessageChanged: (Message) -> Unit, onScrolledToBottom: () -> Unit, onMessagesEndReached: (String) -> Unit, onScrollToBottom: (() -> Unit) -> Unit, modifier: Modifier = Modifier, contentPadding: PaddingValues = PaddingValues(vertical = 16.dp), helperContent: @Composable BoxScope.() -> Unit = { DefaultMessagesHelperContent( messagesState = messagesState, lazyListState = lazyListState, scrollToBottom = onScrollToBottom ) }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit, )</ID>
    <ID>LongMethod:Messages.kt$ @Deprecated( message = "Deprecated in favor of new Messages composable implementation which adds support for bidirectional" + "pagination and improved scroll to bottom implementation", replaceWith = ReplaceWith( expression = "public fun Messages(" + " messagesState: MessagesState," + " lazyListState: LazyListState," + " onMessagesStartReached: () -> Unit," + " onLastVisibleMessageChanged: (Message) -> Unit," + " onScrolledToBottom: () -> Unit," + " onMessagesEndReached: (String) -> Unit," + " onScrollToBottom: () -> Unit," + " modifier: Modifier = Modifier," + " contentPadding: PaddingValues," + " helperContent: @Composable BoxScope.() -> Unit," + " loadingMoreContent: @Composable () -> Unit," + " itemContent: @Composable (MessageListItemState) -> Unit)", imports = arrayOf("io.getstream.chat.android.compose.ui.messages.list") ), level = DeprecationLevel.WARNING ) @Composable public fun Messages( messagesState: MessagesState, lazyListState: LazyListState, onMessagesStartReached: () -> Unit, onLastVisibleMessageChanged: (Message) -> Unit, onScrolledToBottom: () -> Unit, modifier: Modifier = Modifier, contentPadding: PaddingValues = PaddingValues(vertical = 16.dp), helperContent: @Composable BoxScope.() -> Unit = { val coroutineScope = rememberCoroutineScope() DefaultMessagesHelperContent(messagesState, lazyListState) { coroutineScope.launch { coroutineScope.launch { lazyListState.scrollToItem(0) } } } }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit, )</ID>
    <ID>LongMethod:MessagesScreen.kt$ @OptIn( ExperimentalAnimationApi::class, ExperimentalFoundationApi::class, ExperimentalCoroutinesApi::class ) @Composable public fun MessagesScreen( channelId: String, messageLimit: Int = MessageListViewModel.DefaultMessageLimit, showHeader: Boolean = true, enforceUniqueReactions: Boolean = true, showDateSeparators: Boolean = true, showSystemMessages: Boolean = true, deletedMessageVisibility: DeletedMessageVisibility = DeletedMessageVisibility.ALWAYS_VISIBLE, messageFooterVisibility: MessageFooterVisibility = MessageFooterVisibility.WithTimeDifference(), onBackPressed: () -> Unit = {}, onHeaderActionClick: (channel: Channel) -> Unit = {}, )</ID>
    <ID>LongMethod:StreamTypography.kt$StreamTypography.Companion$ public fun defaultTypography(fontFamily: FontFamily? = null): StreamTypography</ID>
    <ID>LongParameterList:MessageComposer.kt$( value: String, coolDownTime: Int, attachments: List&lt;Attachment>, validationErrors: List&lt;ValidationError>, ownCapabilities: Set&lt;String>, onSendMessage: (String, List&lt;Attachment>) -> Unit, )</ID>
    <ID>LongParameterList:MessageContainer.kt$( messageItem: MessageItemState, onLongItemClick: (Message) -> Unit, onReactionsClick: (Message) -> Unit = {}, onThreadClick: (Message) -> Unit, onGiphyActionClick: (GiphyAction) -> Unit, onQuotedMessageClick: (Message) -> Unit, onImagePreviewResult: (ImagePreviewResult?) -> Unit, )</ID>
    <ID>LongParameterList:MessageList.kt$( messageListItem: MessageListItemState, onImagePreviewResult: (ImagePreviewResult?) -> Unit, onThreadClick: (Message) -> Unit, onLongItemClick: (Message) -> Unit, onReactionsClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit, onQuotedMessageClick: (Message) -> Unit, )</ID>
    <ID>LongParameterList:Messages.kt$( messagesState: MessagesState, lazyListState: LazyListState, onMessagesStartReached: () -> Unit, onLastVisibleMessageChanged: (Message) -> Unit, onScrolledToBottom: () -> Unit, modifier: Modifier = Modifier, contentPadding: PaddingValues = PaddingValues(vertical = 16.dp), helperContent: @Composable BoxScope.() -> Unit = { val coroutineScope = rememberCoroutineScope() DefaultMessagesHelperContent(messagesState, lazyListState) { coroutineScope.launch { coroutineScope.launch { lazyListState.scrollToItem(0) } } } }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit, )</ID>
    <ID>LongParameterList:Messages.kt$( messagesState: MessagesState, lazyListState: LazyListState, onMessagesStartReached: () -> Unit, onLastVisibleMessageChanged: (Message) -> Unit, onScrolledToBottom: () -> Unit, onMessagesEndReached: (String) -> Unit, onScrollToBottom: (() -> Unit) -> Unit, modifier: Modifier = Modifier, contentPadding: PaddingValues = PaddingValues(vertical = 16.dp), helperContent: @Composable BoxScope.() -> Unit = { DefaultMessagesHelperContent( messagesState = messagesState, lazyListState = lazyListState, scrollToBottom = onScrollToBottom ) }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit, )</ID>
    <ID>LongParameterList:MessagesScreen.kt$( context: Context, channelId: String, enforceUniqueReactions: Boolean, messageLimit: Int, showDateSeparators: Boolean, showSystemMessages: Boolean, deletedMessageVisibility: DeletedMessageVisibility, messageFooterVisibility: MessageFooterVisibility, )</ID>
    <ID>MagicNumber:AttachmentsPicker.kt$4f</ID>
    <ID>MagicNumber:AttachmentsPicker.kt$5f</ID>
    <ID>MagicNumber:AvatarPosition.kt$3</ID>
    <ID>MagicNumber:FileAttachmentContent.kt$0.85f</ID>
    <ID>MagicNumber:FilesPicker.kt$6f</ID>
    <ID>MagicNumber:ImageAttachmentContent.kt$3</ID>
    <ID>MagicNumber:ImageAttachmentContent.kt$4</ID>
    <ID>MagicNumber:ImagePreviewActivity.kt$ImagePreviewActivity$8f</ID>
    <ID>MagicNumber:ImageUtils.kt$255</ID>
    <ID>MagicNumber:Messages.kt$3</ID>
    <ID>MagicNumber:Messages.kt$5</ID>
    <ID>MagicNumber:SearchInput.kt$8f</ID>
    <ID>MagicNumber:TypingIndicatorAnimatedDot.kt$0.5f</ID>
    <ID>MaxLineLength:MessageOptions.kt$iconPainter = painterResource(id = if (isUserMuted) R.drawable.stream_compose_ic_unmute else R.drawable.stream_compose_ic_mute)</ID>
    <ID>MaxLineLength:MessageOptions.kt$iconPainter = painterResource(id = if (selectedMessage.pinned) R.drawable.stream_compose_ic_unpin_message else R.drawable.stream_compose_ic_pin_message)</ID>
    <ID>MaxLineLength:MessageOptions.kt$title = if (selectedMessage.pinned) R.string.stream_compose_unpin_message else R.string.stream_compose_pin_message</ID>
    <ID>MaxLineLength:MessagesScreen.kt$*</ID>
    <ID>MaxLineLength:MessagesViewModelFactory.kt$MessagesViewModelFactory$private val dateSeparatorThresholdMillis: Long = TimeUnit.HOURS.toMillis(MessageListViewModel.DateSeparatorDefaultHourThreshold)</ID>
    <ID>ReturnCount:MessageListViewModel.kt$MessageListViewModel$ public fun updateLastSeenMessage(message: Message)</ID>
  </CurrentIssues>
</SmellBaseline>
