<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:Messages.kt$!endOfMessages &amp;&amp; index == messages.lastIndex &amp;&amp; messages.isNotEmpty() &amp;&amp; lazyListState.isScrollInProgress</ID>
    <ID>ComplexMethod:AttachmentsPicker.kt$ @OptIn(ExperimentalPermissionsApi::class) @Composable public fun AttachmentsPicker( attachmentsPickerViewModel: AttachmentsPickerViewModel, onAttachmentsSelected: (List&lt;Attachment>) -> Unit, onDismiss: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, )</ID>
    <ID>ComplexMethod:MessageListViewModel.kt$MessageListViewModel$ private fun groupMessages( messages: List&lt;Message>, isInThread: Boolean, reads: List&lt;ChannelUserRead>, ): List&lt;MessageListItemState></ID>
    <ID>ComplexMethod:MessageOptions.kt$ @Composable public fun defaultMessageOptionsState( selectedMessage: Message, currentUser: User?, isInThread: Boolean, ): List&lt;MessageOptionItemState></ID>
    <ID>ComplexMethod:MessagesScreen.kt$ @OptIn(ExperimentalAnimationApi::class, ExperimentalFoundationApi::class) @Composable public fun MessagesScreen( channelId: String, messageLimit: Int = MessageListViewModel.DEFAULT_MESSAGE_LIMIT, showHeader: Boolean = true, enforceUniqueReactions: Boolean = true, showDateSeparators: Boolean = true, showSystemMessages: Boolean = true, onBackPressed: () -> Unit = {}, onHeaderActionClick: (channel: Channel) -> Unit = {}, )</ID>
    <ID>FunctionNaming:AttachmentsPicker.kt$ @Composable private fun AttachmentPickerOptions( attachmentsPickerMode: AttachmentsPickerMode, hasPickedImages: Boolean, hasPickedFiles: Boolean, onOptionClick: (AttachmentsPickerMode) -> Unit, onSendAttachmentsClick: () -> Unit, )</ID>
    <ID>FunctionNaming:AttachmentsPicker.kt$ @OptIn(ExperimentalPermissionsApi::class) @Composable private fun MissingPermissionContent(permissionState: PermissionState)</ID>
    <ID>FunctionNaming:AttachmentsPicker.kt$ @OptIn(ExperimentalPermissionsApi::class) @Composable public fun AttachmentsPicker( attachmentsPickerViewModel: AttachmentsPickerViewModel, onAttachmentsSelected: (List&lt;Attachment>) -> Unit, onDismiss: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, )</ID>
    <ID>FunctionNaming:Avatar.kt$ @Composable private fun AvatarPreview( imageUrl: String, initials: String, )</ID>
    <ID>FunctionNaming:Avatar.kt$ @ExperimentalCoilApi @Composable public fun Avatar( imageUrl: String, initials: String, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, textStyle: TextStyle = ChatTheme.typography.title3Bold, placeholderPainter: Painter? = null, contentDescription: String? = null, onClick: (() -> Unit)? = null, )</ID>
    <ID>FunctionNaming:Avatar.kt$ @Preview(showBackground = true, name = "Avatar Preview (With image URL)") @Composable private fun AvatarWithImageUrlPreview()</ID>
    <ID>FunctionNaming:Avatar.kt$ @Preview(showBackground = true, name = "Avatar Preview (Without image URL)") @Composable private fun AvatarWithoutImageUrlPreview()</ID>
    <ID>FunctionNaming:BackButton.kt$ @Composable public fun BackButton( painter: Painter, onBackPressed: () -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:CancelIcon.kt$ @Composable public fun CancelIcon( modifier: Modifier = Modifier, onClick: () -> Unit, )</ID>
    <ID>FunctionNaming:ChannelAvatar.kt$ @Composable private fun ChannelAvatarPreview(channel: Channel)</ID>
    <ID>FunctionNaming:ChannelAvatar.kt$ @Composable public fun ChannelAvatar( channel: Channel, currentUser: User?, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, textStyle: TextStyle = ChatTheme.typography.title3Bold, groupAvatarTextStyle: TextStyle = ChatTheme.typography.captionBold, showOnlineIndicator: Boolean = true, onlineIndicatorAlignment: OnlineIndicatorAlignment = OnlineIndicatorAlignment.TopEnd, onlineIndicator: @Composable BoxScope.() -> Unit = { DefaultOnlineIndicator(onlineIndicatorAlignment) }, contentDescription: String? = null, onClick: (() -> Unit)? = null, )</ID>
    <ID>FunctionNaming:ChannelAvatar.kt$ @Preview(showBackground = true, name = "ChannelAvatar Preview (Few members)") @Composable private fun ChannelAvatarForChannelWithFewMembersPreview()</ID>
    <ID>FunctionNaming:ChannelAvatar.kt$ @Preview(showBackground = true, name = "ChannelAvatar Preview (Many members)") @Composable private fun ChannelAvatarForChannelWithManyMembersPreview()</ID>
    <ID>FunctionNaming:ChannelAvatar.kt$ @Preview(showBackground = true, name = "ChannelAvatar Preview (Online user)") @Composable private fun ChannelAvatarForDirectChannelWithOnlineUserPreview()</ID>
    <ID>FunctionNaming:ChannelAvatar.kt$ @Preview(showBackground = true, name = "ChannelAvatar Preview (With image)") @Composable private fun ChannelWithImageAvatarPreview()</ID>
    <ID>FunctionNaming:ChannelItem.kt$ @Composable internal fun DefaultChannelItemLeadingContent( channelItem: ChannelItemState, currentUser: User?, )</ID>
    <ID>FunctionNaming:ChannelItem.kt$ @Composable internal fun RowScope.DefaultChannelItemCenterContent( channel: Channel, isMuted: Boolean, currentUser: User?, )</ID>
    <ID>FunctionNaming:ChannelItem.kt$ @Composable internal fun RowScope.DefaultChannelItemTrailingContent( channel: Channel, currentUser: User?, )</ID>
    <ID>FunctionNaming:ChannelItem.kt$ @Composable private fun ChannelItemPreview( channel: Channel, isMuted: Boolean = false, currentUser: User? = null, )</ID>
    <ID>FunctionNaming:ChannelItem.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun ChannelItem( channelItem: ChannelItemState, currentUser: User?, onChannelClick: (Channel) -> Unit, onChannelLongClick: (Channel) -> Unit, modifier: Modifier = Modifier, leadingContent: @Composable RowScope.(ChannelItemState) -> Unit = { DefaultChannelItemLeadingContent( channelItem = it, currentUser = currentUser ) }, centerContent: @Composable RowScope.(ChannelItemState) -> Unit = { DefaultChannelItemCenterContent( channel = it.channel, isMuted = it.isMuted, currentUser = currentUser ) }, trailingContent: @Composable RowScope.(ChannelItemState) -> Unit = { DefaultChannelItemTrailingContent( channel = it.channel, currentUser = currentUser, ) }, )</ID>
    <ID>FunctionNaming:ChannelItem.kt$ @Preview(showBackground = true, name = "ChannelItem Preview (Channel with unread)") @Composable private fun ChannelItemForChannelWithUnreadMessagesPreview()</ID>
    <ID>FunctionNaming:ChannelItem.kt$ @Preview(showBackground = true, name = "ChannelItem Preview (Muted channel)") @Composable private fun ChannelItemForMutedChannelPreview()</ID>
    <ID>FunctionNaming:ChannelItem.kt$ @Preview(showBackground = true, name = "ChannelItem Preview (Without messages)") @Composable private fun ChannelItemForChannelWithoutMessagesPreview()</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Composable internal fun DefaultChannelItem( channelItem: ChannelItemState, currentUser: User?, onChannelClick: (Channel) -> Unit, onChannelLongClick: (Channel) -> Unit, )</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Composable internal fun DefaultChannelListEmptyContent(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Composable internal fun DefaultChannelListLoadingIndicator(modifier: Modifier)</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Composable internal fun DefaultChannelSearchEmptyContent( searchQuery: String, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Composable private fun ChannelListPreview(channelsState: ChannelsState)</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Composable public fun ChannelList( channelsState: ChannelsState, currentUser: User?, modifier: Modifier = Modifier, lazyListState: LazyListState = rememberLazyListState(), onLastItemReached: () -> Unit = {}, onChannelClick: (Channel) -> Unit = {}, onChannelLongClick: (Channel) -> Unit = {}, loadingContent: @Composable () -> Unit = { DefaultChannelListLoadingIndicator(modifier) }, emptyContent: @Composable () -> Unit = { DefaultChannelListEmptyContent(modifier) }, emptySearchContent: @Composable (String) -> Unit = { searchQuery -> DefaultChannelSearchEmptyContent( searchQuery = searchQuery, modifier = modifier ) }, helperContent: @Composable BoxScope.() -> Unit = {}, loadingMoreContent: @Composable () -> Unit = { DefaultChannelsLoadingMoreIndicator() }, itemContent: @Composable (ChannelItemState) -> Unit = { channelItem -> DefaultChannelItem( channelItem = channelItem, currentUser = currentUser, onChannelClick = onChannelClick, onChannelLongClick = onChannelLongClick ) }, divider: @Composable () -> Unit = { DefaultChannelItemDivider() }, )</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Composable public fun ChannelList( modifier: Modifier = Modifier, viewModel: ChannelListViewModel = viewModel( factory = ChannelViewModelFactory( ChatClient.instance(), QuerySort.desc("last_updated"), Filters.and( Filters.eq("type", "messaging"), Filters.`in`("members", listOf(ChatClient.instance().getCurrentUser()?.id ?: "")) ) ) ), lazyListState: LazyListState = rememberLazyListState(), onLastItemReached: () -> Unit = { viewModel.loadMore() }, onChannelClick: (Channel) -> Unit = {}, onChannelLongClick: (Channel) -> Unit = { viewModel.selectChannel(it) }, loadingContent: @Composable () -> Unit = { LoadingIndicator(modifier) }, emptyContent: @Composable () -> Unit = { DefaultChannelListEmptyContent(modifier) }, emptySearchContent: @Composable (String) -> Unit = { searchQuery -> DefaultChannelSearchEmptyContent( searchQuery = searchQuery, modifier = modifier ) }, helperContent: @Composable BoxScope.() -> Unit = {}, loadingMoreContent: @Composable () -> Unit = { DefaultChannelsLoadingMoreIndicator() }, itemContent: @Composable (ChannelItemState) -> Unit = { channelItem -> val user by viewModel.user.collectAsState() DefaultChannelItem( channelItem = channelItem, currentUser = user, onChannelClick = onChannelClick, onChannelLongClick = onChannelLongClick ) }, divider: @Composable () -> Unit = { DefaultChannelItemDivider() }, )</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Composable public fun DefaultChannelItemDivider()</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Preview(showBackground = true, name = "ChannelList Preview (Content state)") @Composable private fun ChannelListForContentStatePreview()</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Preview(showBackground = true, name = "ChannelList Preview (Empty state)") @Composable private fun ChannelListForEmptyStatePreview()</ID>
    <ID>FunctionNaming:ChannelList.kt$ @Preview(showBackground = true, name = "ChannelList Preview (Loading state)") @Composable private fun ChannelListForLoadingStatePreview()</ID>
    <ID>FunctionNaming:ChannelListHeader.kt$ @Composable internal fun DefaultChannelHeaderLeadingContent( currentUser: User?, onAvatarClick: (User?) -> Unit, )</ID>
    <ID>FunctionNaming:ChannelListHeader.kt$ @Composable internal fun RowScope.DefaultChannelListHeaderCenterContent( connectionState: ConnectionState, title: String, )</ID>
    <ID>FunctionNaming:ChannelListHeader.kt$ @Composable private fun ChannelListHeaderPreview( title: String = "Stream Chat", currentUser: User? = PreviewUserData.user1, connectionState: ConnectionState = ConnectionState.CONNECTED, )</ID>
    <ID>FunctionNaming:ChannelListHeader.kt$ @Composable public fun ChannelListHeader( modifier: Modifier = Modifier, title: String = "", currentUser: User? = null, connectionState: ConnectionState = ConnectionState.CONNECTED, color: Color = ChatTheme.colors.barsBackground, shape: Shape = ChatTheme.shapes.header, elevation: Dp = ChatTheme.dimens.headerElevation, onAvatarClick: (User?) -> Unit = {}, onHeaderActionClick: () -> Unit = {}, leadingContent: @Composable RowScope.() -> Unit = { DefaultChannelHeaderLeadingContent( currentUser = currentUser, onAvatarClick = onAvatarClick ) }, centerContent: @Composable RowScope.() -> Unit = { DefaultChannelListHeaderCenterContent( connectionState = connectionState, title = title ) }, trailingContent: @Composable RowScope.() -> Unit = { DefaultChannelListHeaderTrailingContent( onHeaderActionClick = onHeaderActionClick ) }, )</ID>
    <ID>FunctionNaming:ChannelListHeader.kt$ @OptIn(ExperimentalMaterialApi::class) @Composable internal fun DefaultChannelListHeaderTrailingContent( onHeaderActionClick: () -> Unit, )</ID>
    <ID>FunctionNaming:ChannelListHeader.kt$ @Preview(name = "ChannelListHeader Preview (Connected state)") @Composable private fun ChannelListHeaderForConnectedStatePreview()</ID>
    <ID>FunctionNaming:ChannelListHeader.kt$ @Preview(name = "ChannelListHeader Preview (Connecting state)") @Composable private fun ChannelListHeaderForConnectingStatePreview()</ID>
    <ID>FunctionNaming:ChannelMembers.kt$ @Composable public fun ChannelMembers( members: List&lt;Member>, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ChannelMembers.kt$ @Preview(showBackground = true, name = "ChannelMembers Preview (Many members)") @Composable private fun ManyMembersChannelMembersPreview()</ID>
    <ID>FunctionNaming:ChannelMembers.kt$ @Preview(showBackground = true, name = "ChannelMembers Preview (One member)") @Composable private fun OneMemberChannelMembersPreview()</ID>
    <ID>FunctionNaming:ChannelMembersItem.kt$ @Composable internal fun ChannelMembersItem( member: Member, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ChannelMembersItem.kt$ @Preview(showBackground = true, name = "ChannelMembersItem Preview") @Composable private fun ChannelMemberItemPreview()</ID>
    <ID>FunctionNaming:ChannelOptions.kt$ @Composable public fun ChannelOptions( options: List&lt;ChannelOptionState>, onChannelOptionClick: (ChannelAction) -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ChannelOptions.kt$ @Preview(showBackground = true, name = "ChannelOptions Preview") @Composable private fun ChannelOptionsPreview()</ID>
    <ID>FunctionNaming:ChannelOptionsItem.kt$ @Composable internal fun ChannelOptionsItem( title: String, titleColor: Color, leadingIcon: @Composable () -> Unit, onClick: () -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ChannelOptionsItem.kt$ @Preview(showBackground = true, name = "ChannelOptionsItem Preview") @Composable private fun ChannelOptionsItemPreview()</ID>
    <ID>FunctionNaming:Channels.kt$ @Composable internal fun DefaultChannelsLoadingMoreIndicator()</ID>
    <ID>FunctionNaming:Channels.kt$ @Composable private fun DummyFirstChannelItem()</ID>
    <ID>FunctionNaming:Channels.kt$ @Composable public fun Channels( channelsState: ChannelsState, lazyListState: LazyListState, onLastItemReached: () -> Unit, modifier: Modifier = Modifier, helperContent: @Composable BoxScope.() -> Unit = {}, loadingMoreContent: @Composable () -> Unit = { DefaultChannelsLoadingMoreIndicator() }, itemContent: @Composable (ChannelItemState) -> Unit, divider: @Composable () -> Unit, )</ID>
    <ID>FunctionNaming:ChannelsScreen.kt$ @OptIn(ExperimentalAnimationApi::class) @Composable public fun ChannelsScreen( filters: FilterObject = Filters.and( Filters.eq("type", "messaging"), Filters.`in`("members", listOf(ChatClient.instance().getCurrentUser()?.id ?: "")) ), querySort: QuerySort&lt;Channel> = QuerySort.desc("last_updated"), title: String = "Stream Chat", isShowingHeader: Boolean = true, isShowingSearch: Boolean = false, channelLimit: Int = ChannelListViewModel.DEFAULT_CHANNEL_LIMIT, memberLimit: Int = ChannelListViewModel.DEFAULT_MEMBER_LIMIT, messageLimit: Int = ChannelListViewModel.DEFAULT_MESSAGE_LIMIT, onHeaderActionClick: () -> Unit = {}, onHeaderAvatarClick: () -> Unit = {}, onItemClick: (Channel) -> Unit = {}, onViewChannelInfoAction: (Channel) -> Unit = {}, onBackPressed: () -> Unit = {}, )</ID>
    <ID>FunctionNaming:ChatTheme.kt$ @Composable public fun ChatTheme( isInDarkMode: Boolean = isSystemInDarkTheme(), colors: StreamColors = if (isInDarkMode) StreamColors.defaultDarkColors() else StreamColors.defaultColors(), dimens: StreamDimens = StreamDimens.defaultDimens(), typography: StreamTypography = StreamTypography.defaultTypography(), shapes: StreamShapes = StreamShapes.defaultShapes(), rippleTheme: RippleTheme = StreamRippleTheme, attachmentFactories: List&lt;AttachmentFactory> = StreamAttachmentFactories.defaultFactories(), attachmentPreviewHandlers: List&lt;AttachmentPreviewHandler> = AttachmentPreviewHandler.defaultAttachmentHandlers(LocalContext.current), reactionIconFactory: ReactionIconFactory = ReactionIconFactory.defaultFactory(), dateFormatter: DateFormatter = DateFormatter.from(LocalContext.current), channelNameFormatter: ChannelNameFormatter = ChannelNameFormatter.defaultFormatter(LocalContext.current), messagePreviewFormatter: MessagePreviewFormatter = MessagePreviewFormatter.defaultFormatter( context = LocalContext.current, typography = typography, attachmentFactories = attachmentFactories ), messageAlignmentProvider: MessageAlignmentProvider = MessageAlignmentProvider.defaultMessageAlignmentProvider(), content: @Composable () -> Unit, )</ID>
    <ID>FunctionNaming:CommandSuggestionItem.kt$ @Composable internal fun DefaultCommandSuggestionItemLeadingContent()</ID>
    <ID>FunctionNaming:CommandSuggestionItem.kt$ @Composable internal fun RowScope.DefaultCommandSuggestionItemCenterContent( command: Command, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:CommandSuggestionItem.kt$ @Composable public fun CommandSuggestionItem( command: Command, modifier: Modifier = Modifier, onCommandSelected: (Command) -> Unit = {}, leadingContent: @Composable RowScope.(Command) -> Unit = { DefaultCommandSuggestionItemLeadingContent() }, centerContent: @Composable RowScope.(Command) -> Unit = { DefaultCommandSuggestionItemCenterContent(command = it) }, )</ID>
    <ID>FunctionNaming:CommandSuggestionList.kt$ @Composable internal fun DefaultCommandSuggestionItem( command: Command, onCommandSelected: (Command) -> Unit, )</ID>
    <ID>FunctionNaming:CommandSuggestionList.kt$ @Composable public fun CommandSuggestionList( commands: List&lt;Command>, modifier: Modifier = Modifier, onCommandSelected: (Command) -> Unit = {}, itemContent: @Composable (Command) -> Unit = { command -> DefaultCommandSuggestionItem( command = command, onCommandSelected = onCommandSelected, ) }, )</ID>
    <ID>FunctionNaming:CoolDownIndicator.kt$ @Composable public fun CoolDownIndicator( coolDownTime: Int, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:EmptyContent.kt$ @Composable public fun EmptyContent( text: String, painter: Painter, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ExtendedReactionsOptions.kt$ @Composable internal fun DefaultExtendedReactionsItemContent( option: ReactionOptionItemState, onReactionOptionSelected: (ReactionOptionItemState) -> Unit, )</ID>
    <ID>FunctionNaming:ExtendedReactionsOptions.kt$ @ExperimentalFoundationApi @Composable public fun ExtendedReactionsOptions( ownReactions: List&lt;Reaction>, onReactionOptionSelected: (ReactionOptionItemState) -> Unit, modifier: Modifier = Modifier, cells: GridCells = GridCells.Fixed(5), reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), itemContent: @Composable LazyGridScope.(ReactionOptionItemState) -> Unit = { option -> DefaultExtendedReactionsItemContent( option = option, onReactionOptionSelected = onReactionOptionSelected ) }, )</ID>
    <ID>FunctionNaming:ExtendedReactionsOptions.kt$ @ExperimentalFoundationApi @Preview(showBackground = true, name = "ExtendedReactionOptions Preview (With Own Reaction)") @Composable internal fun ExtendedReactionOptionsWithOwnReactionPreview()</ID>
    <ID>FunctionNaming:ExtendedReactionsOptions.kt$ @ExperimentalFoundationApi @Preview(showBackground = true, name = "ExtendedReactionOptions Preview") @Composable internal fun ExtendedReactionOptionsPreview()</ID>
    <ID>FunctionNaming:FileAttachmentContent.kt$ @Composable public fun FileAttachmentImage(attachment: Attachment)</ID>
    <ID>FunctionNaming:FileAttachmentContent.kt$ @Composable public fun FileAttachmentItem(attachment: Attachment)</ID>
    <ID>FunctionNaming:FileAttachmentContent.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun FileAttachmentContent( attachmentState: AttachmentState, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:FileAttachmentPreviewContent.kt$ @Composable public fun FileAttachmentPreviewContent( attachments: List&lt;Attachment>, onAttachmentRemoved: (Attachment) -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:FileUploadContent.kt$ @Composable private fun ProgressInfo(uploadedBytes: Long, totalBytes: Long)</ID>
    <ID>FunctionNaming:FileUploadContent.kt$ @Composable public fun FileUploadContent( attachmentState: AttachmentState, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:FileUploadContent.kt$ @Composable public fun FileUploadItem(attachment: Attachment)</ID>
    <ID>FunctionNaming:FilesPicker.kt$ @Composable internal fun DefaultFilesPickerItem( fileItem: AttachmentPickerItemState, onItemSelected: (AttachmentPickerItemState) -> Unit, )</ID>
    <ID>FunctionNaming:FilesPicker.kt$ @Composable public fun FilesPicker( files: List&lt;AttachmentPickerItemState>, onItemSelected: (AttachmentPickerItemState) -> Unit, onBrowseFilesResult: (List&lt;Uri>) -> Unit, modifier: Modifier = Modifier, itemContent: @Composable (AttachmentPickerItemState) -> Unit = { DefaultFilesPickerItem( fileItem = it, onItemSelected = onItemSelected ) }, )</ID>
    <ID>FunctionNaming:FilesPickerItemImage.kt$ @Composable public fun FilesPickerItemImage( fileItem: AttachmentPickerItemState, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:GiphyAttachmentContent.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun GiphyAttachmentContent( attachmentState: AttachmentState, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:GiphyMessageContent.kt$ @Composable internal fun GiphyButton( text: String, textColor: Color, onClick: () -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:GiphyMessageContent.kt$ @Composable public fun GiphyMessageContent( message: Message, modifier: Modifier = Modifier, onGiphyActionClick: (GiphyAction) -> Unit = {}, )</ID>
    <ID>FunctionNaming:GroupAvatar.kt$ @Composable public fun GroupAvatar( users: List&lt;User>, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, textStyle: TextStyle = ChatTheme.typography.captionBold, onClick: (() -> Unit)? = null, )</ID>
    <ID>FunctionNaming:ImageAttachmentContent.kt$ @Composable internal fun ImageAttachmentViewMoreOverlay( imageCount: Int, imageIndex: Int, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ImageAttachmentContent.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable internal fun ImageAttachmentContentItem( message: Message, attachmentPosition: Int, attachment: Attachment, onImagePreviewResult: (ImagePreviewResult?) -> Unit, onLongItemClick: (Message) -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ImageAttachmentContent.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun ImageAttachmentContent( attachmentState: AttachmentState, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ImageAttachmentPreviewContent.kt$ @Composable public fun ImageAttachmentPreviewContent( attachments: List&lt;Attachment>, onAttachmentRemoved: (Attachment) -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ImageAvatar.kt$ @Composable public fun ImageAvatar( painter: Painter, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, contentDescription: String? = null, onClick: (() -> Unit)? = null, )</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @Composable private fun ImageGalleryHeader()</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @Composable private fun ImageGalleryItem( index: Int, attachment: Attachment, user: User, pagerState: PagerState, )</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @Composable private fun ImagePreviewBottomBar(attachments: List&lt;Attachment>, pagerState: PagerState)</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @Composable private fun ImagePreviewContent( pagerState: PagerState, attachments: List&lt;Attachment>, )</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @Composable private fun ImagePreviewHeaderTitle( message: Message, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @Composable private fun ImagePreviewOptionItem( imagePreviewOption: ImagePreviewOption, pagerState: PagerState, )</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @Composable private fun ImagePreviewOptions( options: List&lt;ImagePreviewOption>, pagerState: PagerState, modifier: Modifier, )</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @Composable private fun ImagePreviewOptionsToggle( modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @Composable private fun ImagePreviewTopBar(message: Message)</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @OptIn(ExperimentalAnimationApi::class) @Composable private fun ImagePreviewContentWrapper( message: Message, initialAttachmentPosition: Int, )</ID>
    <ID>FunctionNaming:ImagePreviewActivity.kt$ImagePreviewActivity$ @OptIn(ExperimentalFoundationApi::class) @Composable private fun ImageGallery( pagerState: PagerState, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ImagesPicker.kt$ @Composable internal fun DefaultImagesPickerItem( imageItem: AttachmentPickerItemState, onImageSelected: (AttachmentPickerItemState) -> Unit, )</ID>
    <ID>FunctionNaming:ImagesPicker.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun ImagesPicker( images: List&lt;AttachmentPickerItemState>, onImageSelected: (AttachmentPickerItemState) -> Unit, modifier: Modifier = Modifier, itemContent: @Composable (AttachmentPickerItemState) -> Unit = { imageItem -> DefaultImagesPickerItem( imageItem = imageItem, onImageSelected = onImageSelected ) }, )</ID>
    <ID>FunctionNaming:InitialsAvatar.kt$ @Composable public fun InitialsAvatar( initials: String, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, textStyle: TextStyle = ChatTheme.typography.title3Bold, onClick: (() -> Unit)? = null, )</ID>
    <ID>FunctionNaming:InputField.kt$ @Composable public fun InputField( value: String, onValueChange: (String) -> Unit, modifier: Modifier = Modifier, maxLines: Int = Int.MAX_VALUE, border: BorderStroke = BorderStroke(1.dp, ChatTheme.colors.borders), innerPadding: Dp = 8.dp, decorationBox: @Composable (innerTextField: @Composable () -> Unit) -> Unit, )</ID>
    <ID>FunctionNaming:LinkAttachmentContent.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun LinkAttachmentContent( attachmentState: AttachmentState, linkDescriptionMaxLines: Int, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:LoadMoreHandler.kt$ @Composable public fun LoadMoreHandler( listState: LazyListState, loadMoreThreshold: Int = 3, loadMore: () -> Unit, )</ID>
    <ID>FunctionNaming:LoadingFooter.kt$ @Composable public fun LoadingFooter(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:LoadingIndicator.kt$ @Composable public fun LoadingIndicator(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:MediaPreviewActivity.kt$MediaPreviewActivity$ @Composable private fun MediaPreviewContent( url: String, onBackPressed: () -> Unit = {}, onPlaybackError: () -> Unit, )</ID>
    <ID>FunctionNaming:MediaPreviewActivity.kt$MediaPreviewActivity$ @Composable private fun MediaPreviewScreen( url: String, title: String, onPlaybackError: () -> Unit, onBackPressed: () -> Unit, )</ID>
    <ID>FunctionNaming:MediaPreviewActivity.kt$MediaPreviewActivity$ @Composable private fun MediaPreviewToolbar( title: String, onBackPressed: () -> Unit = {}, )</ID>
    <ID>FunctionNaming:MediaPreviewActivity.kt$MediaPreviewActivity$ @Composable private fun SetupSystemUI()</ID>
    <ID>FunctionNaming:MentionSuggestionItem.kt$ @Composable internal fun DefaultMentionSuggestionItemLeadingContent(user: User)</ID>
    <ID>FunctionNaming:MentionSuggestionItem.kt$ @Composable internal fun DefaultMentionSuggestionItemTrailingContent()</ID>
    <ID>FunctionNaming:MentionSuggestionItem.kt$ @Composable internal fun RowScope.DefaultMentionSuggestionItemCenterContent(user: User)</ID>
    <ID>FunctionNaming:MentionSuggestionItem.kt$ @Composable public fun MentionSuggestionItem( user: User, onMentionSelected: (User) -> Unit, modifier: Modifier = Modifier, leadingContent: @Composable RowScope.(User) -> Unit = { DefaultMentionSuggestionItemLeadingContent(user = it) }, centerContent: @Composable RowScope.(User) -> Unit = { DefaultMentionSuggestionItemCenterContent(user = it) }, trailingContent: @Composable RowScope.(User) -> Unit = { DefaultMentionSuggestionItemTrailingContent() }, )</ID>
    <ID>FunctionNaming:MentionSuggestionList.kt$ @Composable internal fun DefaultMentionSuggestionItem( user: User, onMentionSelected: (User) -> Unit, )</ID>
    <ID>FunctionNaming:MentionSuggestionList.kt$ @Composable public fun MentionSuggestionList( users: List&lt;User>, modifier: Modifier = Modifier, onMentionSelected: (User) -> Unit = {}, itemContent: @Composable (User) -> Unit = { user -> DefaultMentionSuggestionItem( user = user, onMentionSelected = onMentionSelected, ) }, )</ID>
    <ID>FunctionNaming:MessageAttachmentsContent.kt$ @Composable public fun MessageAttachmentsContent( message: Message, onLongItemClick: (Message) -> Unit, onImagePreviewResult: (ImagePreviewResult?) -> Unit = {}, )</ID>
    <ID>FunctionNaming:MessageBubble.kt$ @Composable public fun MessageBubble( color: Color, shape: Shape, modifier: Modifier = Modifier, border: BorderStroke? = BorderStroke(1.dp, ChatTheme.colors.borders), content: @Composable () -> Unit, )</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable internal fun DefaultCommandPopupContent( commandSuggestions: List&lt;Command>, onCommandSelected: (Command) -> Unit, )</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable internal fun DefaultComposerIntegrations( messageInputState: MessageComposerState, onAttachmentsClick: () -> Unit, onCommandsClick: () -> Unit, )</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable internal fun DefaultComposerLabel()</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable internal fun DefaultMentionPopupContent( mentionSuggestions: List&lt;User>, onMentionSelected: (User) -> Unit, )</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable internal fun DefaultMessageComposerTrailingContent( value: String, coolDownTime: Int, attachments: List&lt;Attachment>, validationErrors: List&lt;ValidationError>, onSendMessage: (String, List&lt;Attachment>) -> Unit, )</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable private fun MessageInputValidationError(validationErrors: List&lt;ValidationError>)</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable public fun DefaultMessageComposerFooterContent( messageComposerState: MessageComposerState, onAlsoSendToChannelSelected: (Boolean) -> Unit, )</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable public fun DefaultMessageComposerHeaderContent( messageComposerState: MessageComposerState, onCancelAction: () -> Unit, )</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable public fun MessageComposer( messageComposerState: MessageComposerState, onSendMessage: (String, List&lt;Attachment>) -> Unit, modifier: Modifier = Modifier, onAttachmentsClick: () -> Unit = {}, onCommandsClick: () -> Unit = {}, onValueChange: (String) -> Unit = {}, onAttachmentRemoved: (Attachment) -> Unit = {}, onCancelAction: () -> Unit = {}, onMentionSelected: (User) -> Unit = {}, onCommandSelected: (Command) -> Unit = {}, onAlsoSendToChannelSelected: (Boolean) -> Unit = {}, headerContent: @Composable ColumnScope.(MessageComposerState) -> Unit = { DefaultMessageComposerHeaderContent( messageComposerState = it, onCancelAction = onCancelAction, ) }, footerContent: @Composable ColumnScope.(MessageComposerState) -> Unit = { DefaultMessageComposerFooterContent( messageComposerState = it, onAlsoSendToChannelSelected = onAlsoSendToChannelSelected, ) }, mentionPopupContent: @Composable (List&lt;User>) -> Unit = { DefaultMentionPopupContent( mentionSuggestions = it, onMentionSelected = onMentionSelected ) }, commandPopupContent: @Composable (List&lt;Command>) -> Unit = { DefaultCommandPopupContent( commandSuggestions = it, onCommandSelected = onCommandSelected ) }, integrations: @Composable RowScope.(MessageComposerState) -> Unit = { DefaultComposerIntegrations( messageInputState = it, onAttachmentsClick = onAttachmentsClick, onCommandsClick = onCommandsClick ) }, label: @Composable () -> Unit = { DefaultComposerLabel() }, input: @Composable RowScope.(MessageComposerState) -> Unit = { DefaultComposerInputContent( messageComposerState = messageComposerState, onValueChange = onValueChange, onAttachmentRemoved = onAttachmentRemoved, label = label, ) }, trailingContent: @Composable (MessageComposerState) -> Unit = { DefaultMessageComposerTrailingContent( value = it.inputValue, coolDownTime = it.coolDownTime, validationErrors = it.validationErrors, attachments = it.attachments, onSendMessage = onSendMessage ) }, )</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable public fun MessageComposer( viewModel: MessageComposerViewModel, modifier: Modifier = Modifier, onSendMessage: (Message) -> Unit = { viewModel.sendMessage(it) }, onAttachmentsClick: () -> Unit = {}, onCommandsClick: () -> Unit = {}, onValueChange: (String) -> Unit = { viewModel.setMessageInput(it) }, onAttachmentRemoved: (Attachment) -> Unit = { viewModel.removeSelectedAttachment(it) }, onCancelAction: () -> Unit = { viewModel.dismissMessageActions() }, onMentionSelected: (User) -> Unit = { viewModel.selectMention(it) }, onCommandSelected: (Command) -> Unit = { viewModel.selectCommand(it) }, onAlsoSendToChannelSelected: (Boolean) -> Unit = { viewModel.setAlsoSendToChannel(it) }, headerContent: @Composable ColumnScope.(MessageComposerState) -> Unit = { DefaultMessageComposerHeaderContent( messageComposerState = it, onCancelAction = onCancelAction ) }, footerContent: @Composable ColumnScope.(MessageComposerState) -> Unit = { DefaultMessageComposerFooterContent( messageComposerState = it, onAlsoSendToChannelSelected = onAlsoSendToChannelSelected ) }, mentionPopupContent: @Composable (List&lt;User>) -> Unit = { DefaultMentionPopupContent( mentionSuggestions = it, onMentionSelected = onMentionSelected ) }, commandPopupContent: @Composable (List&lt;Command>) -> Unit = { DefaultCommandPopupContent( commandSuggestions = it, onCommandSelected = onCommandSelected ) }, integrations: @Composable RowScope.(MessageComposerState) -> Unit = { DefaultComposerIntegrations( messageInputState = it, onAttachmentsClick = onAttachmentsClick, onCommandsClick = onCommandsClick ) }, label: @Composable () -> Unit = { DefaultComposerLabel() }, input: @Composable RowScope.(MessageComposerState) -> Unit = { DefaultComposerInputContent( messageComposerState = it, onValueChange = onValueChange, onAttachmentRemoved = onAttachmentRemoved, label = label ) }, trailingContent: @Composable (MessageComposerState) -> Unit = { DefaultMessageComposerTrailingContent( value = it.inputValue, coolDownTime = it.coolDownTime, validationErrors = it.validationErrors, attachments = it.attachments, onSendMessage = { input, attachments -> val message = viewModel.buildNewMessage(input, attachments) onSendMessage(message) } ) }, )</ID>
    <ID>FunctionNaming:MessageComposer.kt$ @Composable public fun RowScope.DefaultComposerInputContent( messageComposerState: MessageComposerState, onValueChange: (String) -> Unit, onAttachmentRemoved: (Attachment) -> Unit, label: @Composable () -> Unit, )</ID>
    <ID>FunctionNaming:MessageContainer.kt$ @Composable internal fun DefaultMessageDateSeparatorContent(dateSeparator: DateSeparatorState)</ID>
    <ID>FunctionNaming:MessageContainer.kt$ @Composable internal fun DefaultMessageItem( messageItem: MessageItemState, onLongItemClick: (Message) -> Unit, onReactionsClick: (Message) -> Unit = {}, onThreadClick: (Message) -> Unit, onGiphyActionClick: (GiphyAction) -> Unit, onImagePreviewResult: (ImagePreviewResult?) -> Unit, )</ID>
    <ID>FunctionNaming:MessageContainer.kt$ @Composable internal fun DefaultMessageThreadSeparatorContent(threadSeparator: ThreadSeparatorState)</ID>
    <ID>FunctionNaming:MessageContainer.kt$ @Composable internal fun DefaultSystemMessageContent(systemMessageState: SystemMessageState)</ID>
    <ID>FunctionNaming:MessageContainer.kt$ @Composable public fun MessageContainer( messageListItem: MessageListItemState, onLongItemClick: (Message) -> Unit = {}, onReactionsClick: (Message) -> Unit = {}, onThreadClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, onImagePreviewResult: (ImagePreviewResult?) -> Unit = {}, dateSeparatorContent: @Composable (DateSeparatorState) -> Unit = { DefaultMessageDateSeparatorContent(dateSeparator = it) }, threadSeparatorContent: @Composable (ThreadSeparatorState) -> Unit = { DefaultMessageThreadSeparatorContent(threadSeparator = it) }, systemMessageContent: @Composable (SystemMessageState) -> Unit = { DefaultSystemMessageContent(systemMessageState = it) }, messageItemContent: @Composable (MessageItemState) -> Unit = { DefaultMessageItem( messageItem = it, onLongItemClick = onLongItemClick, onReactionsClick = onReactionsClick, onThreadClick = onThreadClick, onGiphyActionClick = onGiphyActionClick, onImagePreviewResult = onImagePreviewResult ) }, )</ID>
    <ID>FunctionNaming:MessageContent.kt$ @Composable internal fun DefaultMessageContent( message: Message, onLongItemClick: (Message) -> Unit, onImagePreviewResult: (ImagePreviewResult?) -> Unit, )</ID>
    <ID>FunctionNaming:MessageContent.kt$ @Composable internal fun DefaultMessageDeletedContent( modifier: Modifier, )</ID>
    <ID>FunctionNaming:MessageContent.kt$ @Composable internal fun DefaultMessageGiphyContent( message: Message, onGiphyActionClick: (GiphyAction) -> Unit, )</ID>
    <ID>FunctionNaming:MessageContent.kt$ @Composable public fun MessageContent( message: Message, modifier: Modifier = Modifier, onLongItemClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, onImagePreviewResult: (ImagePreviewResult?) -> Unit = {}, giphyEphemeralContent: @Composable () -> Unit = { DefaultMessageGiphyContent( message = message, onGiphyActionClick = onGiphyActionClick ) }, deletedMessageContent: @Composable () -> Unit = { DefaultMessageDeletedContent(modifier = modifier) }, regularMessageContent: @Composable () -> Unit = { DefaultMessageContent( message = message, onLongItemClick = onLongItemClick, onImagePreviewResult = onImagePreviewResult ) }, )</ID>
    <ID>FunctionNaming:MessageFooter.kt$ @Composable public fun MessageFooter(messageItem: MessageItemState)</ID>
    <ID>FunctionNaming:MessageHeaderLabel.kt$ @Composable public fun MessageHeaderLabel( painter: Painter, modifier: Modifier = Modifier, text: String? = null, contentPadding: PaddingValues = PaddingValues(vertical = 2.dp, horizontal = 4.dp), )</ID>
    <ID>FunctionNaming:MessageInput.kt$ @Composable public fun MessageInput( messageComposerState: MessageComposerState, onValueChange: (String) -> Unit, onAttachmentRemoved: (Attachment) -> Unit, modifier: Modifier = Modifier, maxLines: Int = DEFAULT_MESSAGE_INPUT_MAX_LINES, label: @Composable () -> Unit = { DefaultComposerLabel() }, innerLeadingContent: @Composable RowScope.() -> Unit = {}, innerTrailingContent: @Composable RowScope.() -> Unit = {}, )</ID>
    <ID>FunctionNaming:MessageInputOptions.kt$ @Composable public fun MessageInputOptions( activeAction: MessageAction, onCancelAction: () -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:MessageItem.kt$ @Composable internal fun ColumnScope.DefaultMessageItemFooterContent( messageItem: MessageItemState, )</ID>
    <ID>FunctionNaming:MessageItem.kt$ @Composable internal fun DefaultMessageItemCenterContent( messageItem: MessageItemState, onLongItemClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, onImagePreviewResult: (ImagePreviewResult?) -> Unit = {}, )</ID>
    <ID>FunctionNaming:MessageItem.kt$ @Composable internal fun DefaultMessageItemHeaderContent( messageItem: MessageItemState, onReactionsClick: (Message) -> Unit = {}, )</ID>
    <ID>FunctionNaming:MessageItem.kt$ @Composable internal fun DefaultMessageItemTrailingContent( messageItem: MessageItemState, )</ID>
    <ID>FunctionNaming:MessageItem.kt$ @Composable internal fun DefaultMessageTextContent( message: Message, onLongItemClick: (Message) -> Unit, )</ID>
    <ID>FunctionNaming:MessageItem.kt$ @Composable internal fun RowScope.DefaultMessageItemLeadingContent( messageItem: MessageItemState, )</ID>
    <ID>FunctionNaming:MessageItem.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun MessageItem( messageItem: MessageItemState, onLongItemClick: (Message) -> Unit, modifier: Modifier = Modifier, onReactionsClick: (Message) -> Unit = {}, onThreadClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, onImagePreviewResult: (ImagePreviewResult?) -> Unit = {}, leadingContent: @Composable RowScope.(MessageItemState) -> Unit = { DefaultMessageItemLeadingContent(messageItem = it) }, headerContent: @Composable ColumnScope.(MessageItemState) -> Unit = { DefaultMessageItemHeaderContent( messageItem = it, onReactionsClick = onReactionsClick ) }, centerContent: @Composable ColumnScope.(MessageItemState) -> Unit = { DefaultMessageItemCenterContent( messageItem = it, onLongItemClick = onLongItemClick, onImagePreviewResult = onImagePreviewResult, onGiphyActionClick = onGiphyActionClick ) }, footerContent: @Composable ColumnScope.(MessageItemState) -> Unit = { DefaultMessageItemFooterContent(messageItem = it) }, trailingContent: @Composable RowScope.(MessageItemState) -> Unit = { DefaultMessageItemTrailingContent(messageItem = it) }, )</ID>
    <ID>FunctionNaming:MessageList.kt$ @Composable internal fun DefaultMessageContainer( messageListItem: MessageListItemState, onImagePreviewResult: (ImagePreviewResult?) -> Unit, onThreadClick: (Message) -> Unit, onLongItemClick: (Message) -> Unit, onReactionsClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit, )</ID>
    <ID>FunctionNaming:MessageList.kt$ @Composable internal fun DefaultMessageListEmptyContent(modifier: Modifier)</ID>
    <ID>FunctionNaming:MessageList.kt$ @Composable internal fun DefaultMessageListLoadingIndicator(modifier: Modifier)</ID>
    <ID>FunctionNaming:MessageList.kt$ @Composable public fun MessageList( currentState: MessagesState, modifier: Modifier = Modifier, lazyListState: LazyListState = rememberMessageListState(parentMessageId = currentState.parentMessageId), onMessagesStartReached: () -> Unit = {}, onLastVisibleMessageChanged: (Message) -> Unit = {}, onScrolledToBottom: () -> Unit = {}, onThreadClick: (Message) -> Unit = {}, onLongItemClick: (Message) -> Unit = {}, onReactionsClick: (Message) -> Unit = {}, onImagePreviewResult: (ImagePreviewResult?) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, loadingContent: @Composable () -> Unit = { DefaultMessageListLoadingIndicator(modifier) }, emptyContent: @Composable () -> Unit = { DefaultMessageListEmptyContent(modifier) }, helperContent: @Composable BoxScope.() -> Unit = { DefaultMessagesHelperContent(currentState, lazyListState) }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit = { DefaultMessageContainer( messageListItem = it, onLongItemClick = onLongItemClick, onThreadClick = onThreadClick, onReactionsClick = onReactionsClick, onGiphyActionClick = onGiphyActionClick, onImagePreviewResult = onImagePreviewResult ) }, )</ID>
    <ID>FunctionNaming:MessageList.kt$ @Composable public fun MessageList( viewModel: MessageListViewModel, modifier: Modifier = Modifier, lazyListState: LazyListState = rememberMessageListState(parentMessageId = viewModel.currentMessagesState.parentMessageId), onThreadClick: (Message) -> Unit = { viewModel.openMessageThread(it) }, onLongItemClick: (Message) -> Unit = { viewModel.selectMessage(it) }, onReactionsClick: (Message) -> Unit = { viewModel.selectReactions(it) }, onMessagesStartReached: () -> Unit = { viewModel.loadMore() }, onLastVisibleMessageChanged: (Message) -> Unit = { viewModel.updateLastSeenMessage(it) }, onScrollToBottom: () -> Unit = { viewModel.clearNewMessageState() }, onGiphyActionClick: (GiphyAction) -> Unit = { viewModel.performGiphyAction(it) }, onImagePreviewResult: (ImagePreviewResult?) -> Unit = { if (it?.resultType == ImagePreviewResultType.SHOW_IN_CHAT) { viewModel.focusMessage(it.messageId) } }, loadingContent: @Composable () -> Unit = { DefaultMessageListLoadingIndicator(modifier) }, emptyContent: @Composable () -> Unit = { DefaultMessageListEmptyContent(modifier) }, helperContent: @Composable BoxScope.() -> Unit = { DefaultMessagesHelperContent(viewModel.currentMessagesState, lazyListState) }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit = { messageListItem -> DefaultMessageContainer( messageListItem = messageListItem, onImagePreviewResult = onImagePreviewResult, onThreadClick = onThreadClick, onLongItemClick = onLongItemClick, onReactionsClick = onReactionsClick, onGiphyActionClick = onGiphyActionClick ) }, )</ID>
    <ID>FunctionNaming:MessageListHeader.kt$ @Composable internal fun DefaultMessageListHeaderLeadingContent(onBackPressed: () -> Unit)</ID>
    <ID>FunctionNaming:MessageListHeader.kt$ @Composable internal fun DefaultMessageListHeaderTrailingContent(channel: Channel, currentUser: User?)</ID>
    <ID>FunctionNaming:MessageListHeader.kt$ @Composable public fun DefaultMessageListHeaderCenterContent( channel: Channel, currentUser: User?, modifier: Modifier = Modifier, typingUsers: List&lt;User> = emptyList(), messageMode: MessageMode = MessageMode.Normal, onHeaderActionClick: (Channel) -> Unit = {}, connectionState: ConnectionState = ConnectionState.CONNECTED, )</ID>
    <ID>FunctionNaming:MessageListHeader.kt$ @Composable public fun MessageListHeader( channel: Channel, currentUser: User?, modifier: Modifier = Modifier, typingUsers: List&lt;User> = emptyList(), messageMode: MessageMode = MessageMode.Normal, connectionState: ConnectionState = ConnectionState.CONNECTED, color: Color = ChatTheme.colors.barsBackground, shape: Shape = ChatTheme.shapes.header, elevation: Dp = ChatTheme.dimens.headerElevation, onBackPressed: () -> Unit = {}, onHeaderActionClick: (Channel) -> Unit = {}, leadingContent: @Composable RowScope.() -> Unit = { DefaultMessageListHeaderLeadingContent(onBackPressed = onBackPressed) }, centerContent: @Composable RowScope.() -> Unit = { DefaultMessageListHeaderCenterContent( modifier = Modifier.weight(1f), channel = channel, currentUser = currentUser, typingUsers = typingUsers, messageMode = messageMode, onHeaderActionClick = onHeaderActionClick, connectionState = connectionState ) }, trailingContent: @Composable RowScope.() -> Unit = { DefaultMessageListHeaderTrailingContent( channel = channel, currentUser = currentUser ) }, )</ID>
    <ID>FunctionNaming:MessageListHeader.kt$@Preview(name = "MessageListHeader Preview (Connected)") @Composable private fun MessageListHeaderConnectedPreview()</ID>
    <ID>FunctionNaming:MessageListHeader.kt$@Preview(name = "MessageListHeader Preview (Connecting)") @Composable private fun MessageListHeaderConnectingPreview()</ID>
    <ID>FunctionNaming:MessageListHeader.kt$@Preview(name = "MessageListHeader Preview (Many Members)") @Composable private fun MessageListHeaderManyMembersPreview()</ID>
    <ID>FunctionNaming:MessageListHeader.kt$@Preview(name = "MessageListHeader Preview (Offline)") @Composable private fun MessageListHeaderOfflinePreview()</ID>
    <ID>FunctionNaming:MessageListHeader.kt$@Preview(name = "MessageListHeader Preview (User Typing)") @Composable private fun MessageListHeaderUserTypingPreview()</ID>
    <ID>FunctionNaming:MessageOptionItem.kt$ @Composable public fun MessageOptionItem( option: MessageOptionItemState, modifier: Modifier = Modifier, verticalAlignment: Alignment.Vertical = Alignment.CenterVertically, horizontalArrangement: Arrangement.Horizontal = Arrangement.Start, )</ID>
    <ID>FunctionNaming:MessageOptionItem.kt$ @Preview(showBackground = true, name = "MessageOptionItem Preview") @Composable private fun MessageOptionItemPreview()</ID>
    <ID>FunctionNaming:MessageOptions.kt$ @Composable internal fun DefaultMessageOptionItem( option: MessageOptionItemState, onMessageOptionSelected: (MessageOptionItemState) -> Unit, )</ID>
    <ID>FunctionNaming:MessageOptions.kt$ @Composable private fun MessageOptionsPreview( messageUser: User, currentUser: User, syncStatus: SyncStatus, )</ID>
    <ID>FunctionNaming:MessageOptions.kt$ @Composable public fun MessageOptions( options: List&lt;MessageOptionItemState>, onMessageOptionSelected: (MessageOptionItemState) -> Unit, modifier: Modifier = Modifier, itemContent: @Composable ColumnScope.(MessageOptionItemState) -> Unit = { option -> DefaultMessageOptionItem( option = option, onMessageOptionSelected = onMessageOptionSelected ) }, )</ID>
    <ID>FunctionNaming:MessageOptions.kt$ @Preview(showBackground = true, name = "MessageOptions Preview (Failed Message)") @Composable private fun MessageOptionsForFailedMessagePreview()</ID>
    <ID>FunctionNaming:MessageOptions.kt$ @Preview(showBackground = true, name = "MessageOptions Preview (Own Message)") @Composable private fun MessageOptionsForOwnMessagePreview()</ID>
    <ID>FunctionNaming:MessageOptions.kt$ @Preview(showBackground = true, name = "MessageOptions Preview (Theirs Message)") @Composable private fun MessageOptionsForTheirsMessagePreview()</ID>
    <ID>FunctionNaming:MessageReactionItem.kt$ @Composable public fun MessageReactionItem( option: ReactionOptionItemState, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:MessageReactionItem.kt$ @Preview @Composable public fun MessageReactionItemNotSelectedPreview()</ID>
    <ID>FunctionNaming:MessageReactionItem.kt$ @Preview @Composable public fun MessageReactionItemSelectedPreview()</ID>
    <ID>FunctionNaming:MessageReactions.kt$ @Composable public fun MessageReactions( options: List&lt;ReactionOptionItemState>, modifier: Modifier = Modifier, itemContent: @Composable RowScope.(ReactionOptionItemState) -> Unit = { option -> MessageReactionItem( modifier = Modifier .size(20.dp) .padding(2.dp) .align(Alignment.CenterVertically), option = option ) }, )</ID>
    <ID>FunctionNaming:MessageReactions.kt$ @Preview @Composable private fun ManyMessageReactionsPreview()</ID>
    <ID>FunctionNaming:MessageReactions.kt$ @Preview @Composable private fun OneMessageReactionPreview()</ID>
    <ID>FunctionNaming:MessageReadStatusIcon.kt$ @Composable public fun MessageReadStatusIcon( channel: Channel, message: Message, currentUser: User?, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:MessageReadStatusIcon.kt$ @Composable public fun MessageReadStatusIcon( message: Message, isMessageRead: Boolean, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:MessageReadStatusIcon.kt$ @Preview(showBackground = true, name = "MessageReadStatusIcon Preview (Seen message)") @Composable private fun SeenMessageReadStatusIcon()</ID>
    <ID>FunctionNaming:MessageText.kt$ @Composable private fun ClickableText( text: AnnotatedString, modifier: Modifier = Modifier, style: TextStyle = TextStyle.Default, softWrap: Boolean = true, overflow: TextOverflow = TextOverflow.Clip, maxLines: Int = Int.MAX_VALUE, onTextLayout: (TextLayoutResult) -> Unit = {}, onLongPress: () -> Unit, onClick: (Int) -> Unit, )</ID>
    <ID>FunctionNaming:MessageText.kt$ @Composable public fun MessageText( message: Message, modifier: Modifier = Modifier, onLongItemClick: (Message) -> Unit, )</ID>
    <ID>FunctionNaming:MessageThreadFooter.kt$ @Composable public fun MessageThreadFooter( participants: List&lt;User>, text: String, messageAlignment: MessageAlignment, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:Messages.kt$ @Composable internal fun BoxScope.DefaultMessagesHelperContent( messagesState: MessagesState, lazyListState: LazyListState, )</ID>
    <ID>FunctionNaming:Messages.kt$ @Composable internal fun DefaultMessagesLoadingMoreIndicator()</ID>
    <ID>FunctionNaming:Messages.kt$ @Composable public fun Messages( messagesState: MessagesState, lazyListState: LazyListState, onMessagesStartReached: () -> Unit, onLastVisibleMessageChanged: (Message) -> Unit, onScrolledToBottom: () -> Unit, modifier: Modifier = Modifier, helperContent: @Composable BoxScope.() -> Unit = { DefaultMessagesHelperContent(messagesState, lazyListState) }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit, )</ID>
    <ID>FunctionNaming:MessagesScreen.kt$ @OptIn(ExperimentalAnimationApi::class, ExperimentalFoundationApi::class) @Composable public fun MessagesScreen( channelId: String, messageLimit: Int = MessageListViewModel.DEFAULT_MESSAGE_LIMIT, showHeader: Boolean = true, enforceUniqueReactions: Boolean = true, showDateSeparators: Boolean = true, showSystemMessages: Boolean = true, onBackPressed: () -> Unit = {}, onHeaderActionClick: (channel: Channel) -> Unit = {}, )</ID>
    <ID>FunctionNaming:MessagesScrollingOption.kt$ @OptIn(ExperimentalMaterialApi::class) @Composable internal fun MessagesScrollingOption( unreadCount: Int, onClick: () -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:NetworkLoadingIndicator.kt$ @Composable public fun NetworkLoadingIndicator( modifier: Modifier = Modifier, spinnerSize: Dp = 18.dp, textStyle: TextStyle = ChatTheme.typography.title3Bold, textColor: Color = ChatTheme.colors.textHighEmphasis, )</ID>
    <ID>FunctionNaming:OnlineIndicator.kt$ @Composable public fun OnlineIndicator(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:OwnedMessageVisibilityContent.kt$ @Composable public fun OwnedMessageVisibilityContent( message: Message, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:QuotedMessage.kt$ @Composable public fun QuotedMessage( message: Message, modifier: Modifier = Modifier, onLongItemClick: (Message) -> Unit, )</ID>
    <ID>FunctionNaming:ReactionOptionItem.kt$ @Composable public fun ReactionOptionItem( option: ReactionOptionItemState, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:ReactionOptionItem.kt$ @Preview(showBackground = true, name = "ReactionOptionItem Preview (Not Selected)") @Composable private fun ReactionOptionItemNotSelectedPreview()</ID>
    <ID>FunctionNaming:ReactionOptionItem.kt$ @Preview(showBackground = true, name = "ReactionOptionItem Preview (Selected)") @Composable private fun ReactionOptionItemSelectedPreview()</ID>
    <ID>FunctionNaming:ReactionOptions.kt$ @Composable internal fun DefaultReactionOptionItem( option: ReactionOptionItemState, onReactionOptionSelected: (ReactionOptionItemState) -> Unit, )</ID>
    <ID>FunctionNaming:ReactionOptions.kt$ @Composable public fun ReactionOptions( ownReactions: List&lt;Reaction>, onReactionOptionSelected: (ReactionOptionItemState) -> Unit, onShowMoreReactionsSelected: () -> Unit, modifier: Modifier = Modifier, numberOfReactionsShown: Int = DEFAULT_NUMBER_OF_REACTIONS_SHOWN, horizontalArrangement: Arrangement.Horizontal = Arrangement.SpaceBetween, reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), @DrawableRes showMoreReactionsIcon: Int = R.drawable.stream_compose_ic_more, itemContent: @Composable RowScope.(ReactionOptionItemState) -> Unit = { option -> DefaultReactionOptionItem( option = option, onReactionOptionSelected = onReactionOptionSelected ) }, )</ID>
    <ID>FunctionNaming:ReactionOptions.kt$ @Preview(showBackground = true, name = "ReactionOptions Preview") @Composable private fun ReactionOptionsPreview()</ID>
    <ID>FunctionNaming:ReactionsPicker.kt$ @ExperimentalFoundationApi @Preview(showBackground = true, name = "ReactionPicker Preview") @Composable internal fun ReactionPickerPreview()</ID>
    <ID>FunctionNaming:ReactionsPicker.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable internal fun DefaultReactionsPickerCenterContent( message: Message, onMessageAction: (MessageAction) -> Unit, cells: GridCells = GridCells.Fixed(5), reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), )</ID>
    <ID>FunctionNaming:ReactionsPicker.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun ReactionsPicker( message: Message, onMessageAction: (MessageAction) -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, overlayColor: Color = ChatTheme.colors.overlay, cells: GridCells = GridCells.Fixed(5), onDismiss: () -> Unit = {}, reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), headerContent: @Composable ColumnScope.() -> Unit = {}, centerContent: @Composable ColumnScope.() -> Unit = { DefaultReactionsPickerCenterContent( message = message, onMessageAction = onMessageAction, cells = cells, reactionTypes = reactionTypes ) }, )</ID>
    <ID>FunctionNaming:SearchInput.kt$ @Composable internal fun DefaultSearchLabel()</ID>
    <ID>FunctionNaming:SearchInput.kt$ @Composable internal fun RowScope.DefaultSearchLeadingIcon()</ID>
    <ID>FunctionNaming:SearchInput.kt$ @Composable public fun SearchInput( query: String, onValueChange: (String) -> Unit, modifier: Modifier = Modifier, onSearchStarted: () -> Unit = {}, leadingIcon: @Composable RowScope.() -> Unit = { DefaultSearchLeadingIcon() }, label: @Composable () -> Unit = { DefaultSearchLabel() }, )</ID>
    <ID>FunctionNaming:SearchInput.kt$@Preview(name = "Search input") @Composable private fun SearchInputPreview()</ID>
    <ID>FunctionNaming:SelectedChannelMenu.kt$ @Composable internal fun DefaultSelectedChannelMenuCenterContent( selectedChannel: Channel, currentUser: User?, isMuted: Boolean, onChannelOptionClick: (ChannelAction) -> Unit, )</ID>
    <ID>FunctionNaming:SelectedChannelMenu.kt$ @Composable internal fun DefaultSelectedChannelMenuHeaderContent( selectedChannel: Channel, currentUser: User?, )</ID>
    <ID>FunctionNaming:SelectedChannelMenu.kt$ @Composable public fun SelectedChannelMenu( selectedChannel: Channel, isMuted: Boolean, currentUser: User?, onChannelOptionClick: (ChannelAction) -> Unit, onDismiss: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, overlayColor: Color = ChatTheme.colors.overlay, headerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedChannelMenuHeaderContent( selectedChannel = selectedChannel, currentUser = currentUser ) }, centerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedChannelMenuCenterContent( selectedChannel = selectedChannel, currentUser = currentUser, isMuted = isMuted, onChannelOptionClick = onChannelOptionClick ) }, )</ID>
    <ID>FunctionNaming:SelectedChannelMenu.kt$ @Preview(showBackground = true, name = "SelectedChannelMenu Preview (Bottom sheet dialog)") @Composable private fun SelectedChannelMenuBottomSheetDialogPreview()</ID>
    <ID>FunctionNaming:SelectedChannelMenu.kt$ @Preview(showBackground = true, name = "SelectedChannelMenu Preview (Centered dialog)") @Composable private fun SelectedChannelMenuCenteredDialogPreview()</ID>
    <ID>FunctionNaming:SelectedMessageMenu.kt$ @Composable internal fun DefaultSelectedMessageOptions( messageOptions: List&lt;MessageOptionItemState>, onMessageAction: (MessageAction) -> Unit, )</ID>
    <ID>FunctionNaming:SelectedMessageMenu.kt$ @Composable internal fun DefaultSelectedMessageReactionOptions( message: Message, reactionTypes: Map&lt;String, ReactionIcon>, @DrawableRes showMoreReactionsDrawableRes: Int = R.drawable.stream_compose_ic_more, onMessageAction: (MessageAction) -> Unit, showMoreReactionsIcon: () -> Unit, )</ID>
    <ID>FunctionNaming:SelectedMessageMenu.kt$ @Composable public fun SelectedMessageMenu( message: Message, messageOptions: List&lt;MessageOptionItemState>, onMessageAction: (MessageAction) -> Unit, onShowMoreReactionsSelected: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, overlayColor: Color = ChatTheme.colors.overlay, reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), @DrawableRes showMoreReactionsIcon: Int = R.drawable.stream_compose_ic_more, onDismiss: () -> Unit = {}, headerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedMessageReactionOptions( message = message, reactionTypes = reactionTypes, showMoreReactionsDrawableRes = showMoreReactionsIcon, onMessageAction = onMessageAction, showMoreReactionsIcon = onShowMoreReactionsSelected ) }, centerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedMessageOptions( messageOptions = messageOptions, onMessageAction = onMessageAction ) }, )</ID>
    <ID>FunctionNaming:SelectedMessageMenu.kt$ @Preview(showBackground = true, name = "SelectedMessageMenu Preview") @Composable private fun SelectedMessageMenuPreview()</ID>
    <ID>FunctionNaming:SelectedReactionsMenu.kt$ @Composable internal fun DefaultSelectedReactionsCenterContent( message: Message, currentUser: User?, )</ID>
    <ID>FunctionNaming:SelectedReactionsMenu.kt$ @Composable internal fun DefaultSelectedReactionsHeaderContent( message: Message, reactionTypes: Map&lt;String, ReactionIcon>, @DrawableRes showMoreReactionsIcon: Int = R.drawable.stream_compose_ic_more, onMessageAction: (MessageAction) -> Unit, onShowMoreReactionsSelected: () -> Unit, )</ID>
    <ID>FunctionNaming:SelectedReactionsMenu.kt$ @Composable public fun SelectedReactionsMenu( message: Message, currentUser: User?, onMessageAction: (MessageAction) -> Unit, onShowMoreReactionsSelected: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, overlayColor: Color = ChatTheme.colors.overlay, reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), @DrawableRes showMoreReactionsIcon: Int = R.drawable.stream_compose_ic_more, onDismiss: () -> Unit = {}, headerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedReactionsHeaderContent( message = message, reactionTypes = reactionTypes, showMoreReactionsIcon = showMoreReactionsIcon, onMessageAction = onMessageAction, onShowMoreReactionsSelected = onShowMoreReactionsSelected ) }, centerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedReactionsCenterContent( message = message, currentUser = currentUser ) }, )</ID>
    <ID>FunctionNaming:SelectedReactionsMenu.kt$ @Preview @Composable private fun ManySelectedReactionsMenuPreview()</ID>
    <ID>FunctionNaming:SelectedReactionsMenu.kt$ @Preview @Composable private fun OneSelectedReactionMenuPreview()</ID>
    <ID>FunctionNaming:SimpleDialog.kt$ @Composable public fun SimpleDialog( title: String, message: String, onPositiveAction: () -> Unit, onDismiss: () -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:SimpleMenu.kt$ @Composable public fun SimpleMenu( modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, overlayColor: Color = ChatTheme.colors.overlay, onDismiss: () -> Unit = {}, headerContent: @Composable ColumnScope.() -> Unit = {}, centerContent: @Composable ColumnScope.() -> Unit = {}, )</ID>
    <ID>FunctionNaming:SuggestionList.kt$ @Composable public fun SuggestionList( modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.suggestionList, contentPadding: PaddingValues = PaddingValues(vertical = ChatTheme.dimens.suggestionListPadding), headerContent: @Composable () -> Unit = {}, centerContent: @Composable () -> Unit, )</ID>
    <ID>FunctionNaming:ThreadParticipants.kt$ @Composable public fun ThreadParticipants( participants: List&lt;User>, alignment: MessageAlignment, modifier: Modifier = Modifier, borderStroke: BorderStroke = BorderStroke(width = 1.dp, color = ChatTheme.colors.appBackground), participantsLimit: Int = DEFAULT_PARTICIPANTS_LIMIT, )</ID>
    <ID>FunctionNaming:Timestamp.kt$ @Composable public fun Timestamp( date: Date?, modifier: Modifier = Modifier, formatter: DateFormatter = ChatTheme.dateFormatter, formatType: DateFormatType = DATE, )</ID>
    <ID>FunctionNaming:TypingIndicator.kt$ @Composable public fun TypingIndicator(modifier: Modifier = Modifier)</ID>
    <ID>FunctionNaming:TypingIndicatorAnimatedDot.kt$ @Composable public fun TypingIndicatorAnimatedDot( initialDelayMillis: Int, )</ID>
    <ID>FunctionNaming:UnreadCountIndicator.kt$ @Composable public fun UnreadCountIndicator( unreadCount: Int, modifier: Modifier = Modifier, color: Color = ChatTheme.colors.errorAccent, )</ID>
    <ID>FunctionNaming:UnreadCountIndicator.kt$ @Preview(showBackground = true, name = "UnreadCountIndicator Preview (Few unread messages)") @Composable private fun FewMessagesUnreadCountIndicatorPreview()</ID>
    <ID>FunctionNaming:UnreadCountIndicator.kt$ @Preview(showBackground = true, name = "UnreadCountIndicator Preview (Many unread messages)") @Composable private fun ManyMessagesUnreadCountIndicatorPreview()</ID>
    <ID>FunctionNaming:UploadingFooter.kt$ @Composable public fun UploadingFooter( message: Message, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:UserAvatar.kt$ @Composable internal fun BoxScope.DefaultOnlineIndicator(onlineIndicatorAlignment: OnlineIndicatorAlignment)</ID>
    <ID>FunctionNaming:UserAvatar.kt$ @Composable private fun UserAvatarPreview(user: User)</ID>
    <ID>FunctionNaming:UserAvatar.kt$ @Composable public fun UserAvatar( user: User, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, textStyle: TextStyle = ChatTheme.typography.title3Bold, contentDescription: String? = null, showOnlineIndicator: Boolean = true, onlineIndicatorAlignment: OnlineIndicatorAlignment = OnlineIndicatorAlignment.TopEnd, onlineIndicator: @Composable BoxScope.() -> Unit = { DefaultOnlineIndicator(onlineIndicatorAlignment) }, onClick: (() -> Unit)? = null, )</ID>
    <ID>FunctionNaming:UserAvatar.kt$ @Preview(showBackground = true, name = "UserAvatar Preview (With avatar image)") @Composable private fun UserAvatarForUserWithImagePreview()</ID>
    <ID>FunctionNaming:UserAvatar.kt$ @Preview(showBackground = true, name = "UserAvatar Preview (With online status)") @Composable private fun UserAvatarForOnlineUserPreview()</ID>
    <ID>FunctionNaming:UserAvatar.kt$ @Preview(showBackground = true, name = "UserAvatar Preview (Without avatar image)") @Composable private fun UserAvatarForUserWithoutImagePreview()</ID>
    <ID>FunctionNaming:UserReactionItem.kt$ @Composable public fun UserReactionItem( item: UserReactionItemState, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:UserReactionItem.kt$ @Preview @Composable public fun CurrentUserReactionItemPreview()</ID>
    <ID>FunctionNaming:UserReactionItem.kt$ @Preview @Composable public fun OtherUserReactionItemPreview()</ID>
    <ID>FunctionNaming:UserReactions.kt$ @Composable internal fun DefaultUserReactionItem(item: UserReactionItemState)</ID>
    <ID>FunctionNaming:UserReactions.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun UserReactions( items: List&lt;UserReactionItemState>, modifier: Modifier = Modifier, itemContent: @Composable (UserReactionItemState) -> Unit = { DefaultUserReactionItem(item = it) }, )</ID>
    <ID>FunctionNaming:UserReactions.kt$ @Preview @Composable private fun ManyUserReactionsPreview()</ID>
    <ID>FunctionNaming:UserReactions.kt$ @Preview @Composable private fun OneUserReactionPreview()</ID>
    <ID>LongMethod:AttachmentsPicker.kt$ @Composable private fun AttachmentPickerOptions( attachmentsPickerMode: AttachmentsPickerMode, hasPickedImages: Boolean, hasPickedFiles: Boolean, onOptionClick: (AttachmentsPickerMode) -> Unit, onSendAttachmentsClick: () -> Unit, )</ID>
    <ID>LongMethod:AttachmentsPicker.kt$ @OptIn(ExperimentalPermissionsApi::class) @Composable public fun AttachmentsPicker( attachmentsPickerViewModel: AttachmentsPickerViewModel, onAttachmentsSelected: (List&lt;Attachment>) -> Unit, onDismiss: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, )</ID>
    <ID>LongMethod:ChannelsScreen.kt$ @OptIn(ExperimentalAnimationApi::class) @Composable public fun ChannelsScreen( filters: FilterObject = Filters.and( Filters.eq("type", "messaging"), Filters.`in`("members", listOf(ChatClient.instance().getCurrentUser()?.id ?: "")) ), querySort: QuerySort&lt;Channel> = QuerySort.desc("last_updated"), title: String = "Stream Chat", isShowingHeader: Boolean = true, isShowingSearch: Boolean = false, channelLimit: Int = ChannelListViewModel.DEFAULT_CHANNEL_LIMIT, memberLimit: Int = ChannelListViewModel.DEFAULT_MEMBER_LIMIT, messageLimit: Int = ChannelListViewModel.DEFAULT_MESSAGE_LIMIT, onHeaderActionClick: () -> Unit = {}, onHeaderAvatarClick: () -> Unit = {}, onItemClick: (Channel) -> Unit = {}, onViewChannelInfoAction: (Channel) -> Unit = {}, onBackPressed: () -> Unit = {}, )</ID>
    <ID>LongMethod:FileAttachmentContent.kt$ @Composable public fun FileAttachmentItem(attachment: Attachment)</ID>
    <ID>LongMethod:GiphyMessageContent.kt$ @Composable public fun GiphyMessageContent( message: Message, modifier: Modifier = Modifier, onGiphyActionClick: (GiphyAction) -> Unit = {}, )</ID>
    <ID>LongMethod:ImageAttachmentContent.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun ImageAttachmentContent( attachmentState: AttachmentState, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:LinkAttachmentContent.kt$ @OptIn(ExperimentalFoundationApi::class) @Composable public fun LinkAttachmentContent( attachmentState: AttachmentState, linkDescriptionMaxLines: Int, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:MessageItem.kt$ @Composable internal fun DefaultMessageItemHeaderContent( messageItem: MessageItemState, onReactionsClick: (Message) -> Unit = {}, )</ID>
    <ID>LongMethod:MessageListHeader.kt$ @Composable public fun DefaultMessageListHeaderCenterContent( channel: Channel, currentUser: User?, modifier: Modifier = Modifier, typingUsers: List&lt;User> = emptyList(), messageMode: MessageMode = MessageMode.Normal, onHeaderActionClick: (Channel) -> Unit = {}, connectionState: ConnectionState = ConnectionState.CONNECTED, )</ID>
    <ID>LongMethod:MessageOptions.kt$ @Composable public fun defaultMessageOptionsState( selectedMessage: Message, currentUser: User?, isInThread: Boolean, ): List&lt;MessageOptionItemState></ID>
    <ID>LongMethod:MessagesScreen.kt$ @OptIn(ExperimentalAnimationApi::class, ExperimentalFoundationApi::class) @Composable public fun MessagesScreen( channelId: String, messageLimit: Int = MessageListViewModel.DEFAULT_MESSAGE_LIMIT, showHeader: Boolean = true, enforceUniqueReactions: Boolean = true, showDateSeparators: Boolean = true, showSystemMessages: Boolean = true, onBackPressed: () -> Unit = {}, onHeaderActionClick: (channel: Channel) -> Unit = {}, )</ID>
    <ID>LongMethod:StreamTypography.kt$StreamTypography.Companion$ public fun defaultTypography(fontFamily: FontFamily? = null): StreamTypography</ID>
    <ID>LongParameterList:Avatar.kt$( imageUrl: String, initials: String, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, textStyle: TextStyle = ChatTheme.typography.title3Bold, placeholderPainter: Painter? = null, contentDescription: String? = null, onClick: (() -> Unit)? = null, )</ID>
    <ID>LongParameterList:ChannelAvatar.kt$( channel: Channel, currentUser: User?, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, textStyle: TextStyle = ChatTheme.typography.title3Bold, groupAvatarTextStyle: TextStyle = ChatTheme.typography.captionBold, showOnlineIndicator: Boolean = true, onlineIndicatorAlignment: OnlineIndicatorAlignment = OnlineIndicatorAlignment.TopEnd, onlineIndicator: @Composable BoxScope.() -> Unit = { DefaultOnlineIndicator(onlineIndicatorAlignment) }, contentDescription: String? = null, onClick: (() -> Unit)? = null, )</ID>
    <ID>LongParameterList:ChannelItem.kt$( channelItem: ChannelItemState, currentUser: User?, onChannelClick: (Channel) -> Unit, onChannelLongClick: (Channel) -> Unit, modifier: Modifier = Modifier, leadingContent: @Composable RowScope.(ChannelItemState) -> Unit = { DefaultChannelItemLeadingContent( channelItem = it, currentUser = currentUser ) }, centerContent: @Composable RowScope.(ChannelItemState) -> Unit = { DefaultChannelItemCenterContent( channel = it.channel, isMuted = it.isMuted, currentUser = currentUser ) }, trailingContent: @Composable RowScope.(ChannelItemState) -> Unit = { DefaultChannelItemTrailingContent( channel = it.channel, currentUser = currentUser, ) }, )</ID>
    <ID>LongParameterList:ChannelList.kt$( channelsState: ChannelsState, currentUser: User?, modifier: Modifier = Modifier, lazyListState: LazyListState = rememberLazyListState(), onLastItemReached: () -> Unit = {}, onChannelClick: (Channel) -> Unit = {}, onChannelLongClick: (Channel) -> Unit = {}, loadingContent: @Composable () -> Unit = { DefaultChannelListLoadingIndicator(modifier) }, emptyContent: @Composable () -> Unit = { DefaultChannelListEmptyContent(modifier) }, emptySearchContent: @Composable (String) -> Unit = { searchQuery -> DefaultChannelSearchEmptyContent( searchQuery = searchQuery, modifier = modifier ) }, helperContent: @Composable BoxScope.() -> Unit = {}, loadingMoreContent: @Composable () -> Unit = { DefaultChannelsLoadingMoreIndicator() }, itemContent: @Composable (ChannelItemState) -> Unit = { channelItem -> DefaultChannelItem( channelItem = channelItem, currentUser = currentUser, onChannelClick = onChannelClick, onChannelLongClick = onChannelLongClick ) }, divider: @Composable () -> Unit = { DefaultChannelItemDivider() }, )</ID>
    <ID>LongParameterList:ChannelList.kt$( modifier: Modifier = Modifier, viewModel: ChannelListViewModel = viewModel( factory = ChannelViewModelFactory( ChatClient.instance(), QuerySort.desc("last_updated"), Filters.and( Filters.eq("type", "messaging"), Filters.`in`("members", listOf(ChatClient.instance().getCurrentUser()?.id ?: "")) ) ) ), lazyListState: LazyListState = rememberLazyListState(), onLastItemReached: () -> Unit = { viewModel.loadMore() }, onChannelClick: (Channel) -> Unit = {}, onChannelLongClick: (Channel) -> Unit = { viewModel.selectChannel(it) }, loadingContent: @Composable () -> Unit = { LoadingIndicator(modifier) }, emptyContent: @Composable () -> Unit = { DefaultChannelListEmptyContent(modifier) }, emptySearchContent: @Composable (String) -> Unit = { searchQuery -> DefaultChannelSearchEmptyContent( searchQuery = searchQuery, modifier = modifier ) }, helperContent: @Composable BoxScope.() -> Unit = {}, loadingMoreContent: @Composable () -> Unit = { DefaultChannelsLoadingMoreIndicator() }, itemContent: @Composable (ChannelItemState) -> Unit = { channelItem -> val user by viewModel.user.collectAsState() DefaultChannelItem( channelItem = channelItem, currentUser = user, onChannelClick = onChannelClick, onChannelLongClick = onChannelLongClick ) }, divider: @Composable () -> Unit = { DefaultChannelItemDivider() }, )</ID>
    <ID>LongParameterList:ChannelListHeader.kt$( modifier: Modifier = Modifier, title: String = "", currentUser: User? = null, connectionState: ConnectionState = ConnectionState.CONNECTED, color: Color = ChatTheme.colors.barsBackground, shape: Shape = ChatTheme.shapes.header, elevation: Dp = ChatTheme.dimens.headerElevation, onAvatarClick: (User?) -> Unit = {}, onHeaderActionClick: () -> Unit = {}, leadingContent: @Composable RowScope.() -> Unit = { DefaultChannelHeaderLeadingContent( currentUser = currentUser, onAvatarClick = onAvatarClick ) }, centerContent: @Composable RowScope.() -> Unit = { DefaultChannelListHeaderCenterContent( connectionState = connectionState, title = title ) }, trailingContent: @Composable RowScope.() -> Unit = { DefaultChannelListHeaderTrailingContent( onHeaderActionClick = onHeaderActionClick ) }, )</ID>
    <ID>LongParameterList:Channels.kt$( channelsState: ChannelsState, lazyListState: LazyListState, onLastItemReached: () -> Unit, modifier: Modifier = Modifier, helperContent: @Composable BoxScope.() -> Unit = {}, loadingMoreContent: @Composable () -> Unit = { DefaultChannelsLoadingMoreIndicator() }, itemContent: @Composable (ChannelItemState) -> Unit, divider: @Composable () -> Unit, )</ID>
    <ID>LongParameterList:ChannelsScreen.kt$( filters: FilterObject = Filters.and( Filters.eq("type", "messaging"), Filters.`in`("members", listOf(ChatClient.instance().getCurrentUser()?.id ?: "")) ), querySort: QuerySort&lt;Channel> = QuerySort.desc("last_updated"), title: String = "Stream Chat", isShowingHeader: Boolean = true, isShowingSearch: Boolean = false, channelLimit: Int = ChannelListViewModel.DEFAULT_CHANNEL_LIMIT, memberLimit: Int = ChannelListViewModel.DEFAULT_MEMBER_LIMIT, messageLimit: Int = ChannelListViewModel.DEFAULT_MESSAGE_LIMIT, onHeaderActionClick: () -> Unit = {}, onHeaderAvatarClick: () -> Unit = {}, onItemClick: (Channel) -> Unit = {}, onViewChannelInfoAction: (Channel) -> Unit = {}, onBackPressed: () -> Unit = {}, )</ID>
    <ID>LongParameterList:ChatTheme.kt$( isInDarkMode: Boolean = isSystemInDarkTheme(), colors: StreamColors = if (isInDarkMode) StreamColors.defaultDarkColors() else StreamColors.defaultColors(), dimens: StreamDimens = StreamDimens.defaultDimens(), typography: StreamTypography = StreamTypography.defaultTypography(), shapes: StreamShapes = StreamShapes.defaultShapes(), rippleTheme: RippleTheme = StreamRippleTheme, attachmentFactories: List&lt;AttachmentFactory> = StreamAttachmentFactories.defaultFactories(), attachmentPreviewHandlers: List&lt;AttachmentPreviewHandler> = AttachmentPreviewHandler.defaultAttachmentHandlers(LocalContext.current), reactionIconFactory: ReactionIconFactory = ReactionIconFactory.defaultFactory(), dateFormatter: DateFormatter = DateFormatter.from(LocalContext.current), channelNameFormatter: ChannelNameFormatter = ChannelNameFormatter.defaultFormatter(LocalContext.current), messagePreviewFormatter: MessagePreviewFormatter = MessagePreviewFormatter.defaultFormatter( context = LocalContext.current, typography = typography, attachmentFactories = attachmentFactories ), messageAlignmentProvider: MessageAlignmentProvider = MessageAlignmentProvider.defaultMessageAlignmentProvider(), content: @Composable () -> Unit, )</ID>
    <ID>LongParameterList:ExtendedReactionsOptions.kt$( ownReactions: List&lt;Reaction>, onReactionOptionSelected: (ReactionOptionItemState) -> Unit, modifier: Modifier = Modifier, cells: GridCells = GridCells.Fixed(5), reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), itemContent: @Composable LazyGridScope.(ReactionOptionItemState) -> Unit = { option -> DefaultExtendedReactionsItemContent( option = option, onReactionOptionSelected = onReactionOptionSelected ) }, )</ID>
    <ID>LongParameterList:ImageAttachmentContent.kt$( message: Message, attachmentPosition: Int, attachment: Attachment, onImagePreviewResult: (ImagePreviewResult?) -> Unit, onLongItemClick: (Message) -> Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:InputField.kt$( value: String, onValueChange: (String) -> Unit, modifier: Modifier = Modifier, maxLines: Int = Int.MAX_VALUE, border: BorderStroke = BorderStroke(1.dp, ChatTheme.colors.borders), innerPadding: Dp = 8.dp, decorationBox: @Composable (innerTextField: @Composable () -> Unit) -> Unit, )</ID>
    <ID>LongParameterList:MentionSuggestionItem.kt$( user: User, onMentionSelected: (User) -> Unit, modifier: Modifier = Modifier, leadingContent: @Composable RowScope.(User) -> Unit = { DefaultMentionSuggestionItemLeadingContent(user = it) }, centerContent: @Composable RowScope.(User) -> Unit = { DefaultMentionSuggestionItemCenterContent(user = it) }, trailingContent: @Composable RowScope.(User) -> Unit = { DefaultMentionSuggestionItemTrailingContent() }, )</ID>
    <ID>LongParameterList:MessageComposer.kt$( messageComposerState: MessageComposerState, onSendMessage: (String, List&lt;Attachment>) -> Unit, modifier: Modifier = Modifier, onAttachmentsClick: () -> Unit = {}, onCommandsClick: () -> Unit = {}, onValueChange: (String) -> Unit = {}, onAttachmentRemoved: (Attachment) -> Unit = {}, onCancelAction: () -> Unit = {}, onMentionSelected: (User) -> Unit = {}, onCommandSelected: (Command) -> Unit = {}, onAlsoSendToChannelSelected: (Boolean) -> Unit = {}, headerContent: @Composable ColumnScope.(MessageComposerState) -> Unit = { DefaultMessageComposerHeaderContent( messageComposerState = it, onCancelAction = onCancelAction, ) }, footerContent: @Composable ColumnScope.(MessageComposerState) -> Unit = { DefaultMessageComposerFooterContent( messageComposerState = it, onAlsoSendToChannelSelected = onAlsoSendToChannelSelected, ) }, mentionPopupContent: @Composable (List&lt;User>) -> Unit = { DefaultMentionPopupContent( mentionSuggestions = it, onMentionSelected = onMentionSelected ) }, commandPopupContent: @Composable (List&lt;Command>) -> Unit = { DefaultCommandPopupContent( commandSuggestions = it, onCommandSelected = onCommandSelected ) }, integrations: @Composable RowScope.(MessageComposerState) -> Unit = { DefaultComposerIntegrations( messageInputState = it, onAttachmentsClick = onAttachmentsClick, onCommandsClick = onCommandsClick ) }, label: @Composable () -> Unit = { DefaultComposerLabel() }, input: @Composable RowScope.(MessageComposerState) -> Unit = { DefaultComposerInputContent( messageComposerState = messageComposerState, onValueChange = onValueChange, onAttachmentRemoved = onAttachmentRemoved, label = label, ) }, trailingContent: @Composable (MessageComposerState) -> Unit = { DefaultMessageComposerTrailingContent( value = it.inputValue, coolDownTime = it.coolDownTime, validationErrors = it.validationErrors, attachments = it.attachments, onSendMessage = onSendMessage ) }, )</ID>
    <ID>LongParameterList:MessageComposer.kt$( viewModel: MessageComposerViewModel, modifier: Modifier = Modifier, onSendMessage: (Message) -> Unit = { viewModel.sendMessage(it) }, onAttachmentsClick: () -> Unit = {}, onCommandsClick: () -> Unit = {}, onValueChange: (String) -> Unit = { viewModel.setMessageInput(it) }, onAttachmentRemoved: (Attachment) -> Unit = { viewModel.removeSelectedAttachment(it) }, onCancelAction: () -> Unit = { viewModel.dismissMessageActions() }, onMentionSelected: (User) -> Unit = { viewModel.selectMention(it) }, onCommandSelected: (Command) -> Unit = { viewModel.selectCommand(it) }, onAlsoSendToChannelSelected: (Boolean) -> Unit = { viewModel.setAlsoSendToChannel(it) }, headerContent: @Composable ColumnScope.(MessageComposerState) -> Unit = { DefaultMessageComposerHeaderContent( messageComposerState = it, onCancelAction = onCancelAction ) }, footerContent: @Composable ColumnScope.(MessageComposerState) -> Unit = { DefaultMessageComposerFooterContent( messageComposerState = it, onAlsoSendToChannelSelected = onAlsoSendToChannelSelected ) }, mentionPopupContent: @Composable (List&lt;User>) -> Unit = { DefaultMentionPopupContent( mentionSuggestions = it, onMentionSelected = onMentionSelected ) }, commandPopupContent: @Composable (List&lt;Command>) -> Unit = { DefaultCommandPopupContent( commandSuggestions = it, onCommandSelected = onCommandSelected ) }, integrations: @Composable RowScope.(MessageComposerState) -> Unit = { DefaultComposerIntegrations( messageInputState = it, onAttachmentsClick = onAttachmentsClick, onCommandsClick = onCommandsClick ) }, label: @Composable () -> Unit = { DefaultComposerLabel() }, input: @Composable RowScope.(MessageComposerState) -> Unit = { DefaultComposerInputContent( messageComposerState = it, onValueChange = onValueChange, onAttachmentRemoved = onAttachmentRemoved, label = label ) }, trailingContent: @Composable (MessageComposerState) -> Unit = { DefaultMessageComposerTrailingContent( value = it.inputValue, coolDownTime = it.coolDownTime, validationErrors = it.validationErrors, attachments = it.attachments, onSendMessage = { input, attachments -> val message = viewModel.buildNewMessage(input, attachments) onSendMessage(message) } ) }, )</ID>
    <ID>LongParameterList:MessageContainer.kt$( messageItem: MessageItemState, onLongItemClick: (Message) -> Unit, onReactionsClick: (Message) -> Unit = {}, onThreadClick: (Message) -> Unit, onGiphyActionClick: (GiphyAction) -> Unit, onImagePreviewResult: (ImagePreviewResult?) -> Unit, )</ID>
    <ID>LongParameterList:MessageContainer.kt$( messageListItem: MessageListItemState, onLongItemClick: (Message) -> Unit = {}, onReactionsClick: (Message) -> Unit = {}, onThreadClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, onImagePreviewResult: (ImagePreviewResult?) -> Unit = {}, dateSeparatorContent: @Composable (DateSeparatorState) -> Unit = { DefaultMessageDateSeparatorContent(dateSeparator = it) }, threadSeparatorContent: @Composable (ThreadSeparatorState) -> Unit = { DefaultMessageThreadSeparatorContent(threadSeparator = it) }, systemMessageContent: @Composable (SystemMessageState) -> Unit = { DefaultSystemMessageContent(systemMessageState = it) }, messageItemContent: @Composable (MessageItemState) -> Unit = { DefaultMessageItem( messageItem = it, onLongItemClick = onLongItemClick, onReactionsClick = onReactionsClick, onThreadClick = onThreadClick, onGiphyActionClick = onGiphyActionClick, onImagePreviewResult = onImagePreviewResult ) }, )</ID>
    <ID>LongParameterList:MessageContent.kt$( message: Message, modifier: Modifier = Modifier, onLongItemClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, onImagePreviewResult: (ImagePreviewResult?) -> Unit = {}, giphyEphemeralContent: @Composable () -> Unit = { DefaultMessageGiphyContent( message = message, onGiphyActionClick = onGiphyActionClick ) }, deletedMessageContent: @Composable () -> Unit = { DefaultMessageDeletedContent(modifier = modifier) }, regularMessageContent: @Composable () -> Unit = { DefaultMessageContent( message = message, onLongItemClick = onLongItemClick, onImagePreviewResult = onImagePreviewResult ) }, )</ID>
    <ID>LongParameterList:MessageInput.kt$( messageComposerState: MessageComposerState, onValueChange: (String) -> Unit, onAttachmentRemoved: (Attachment) -> Unit, modifier: Modifier = Modifier, maxLines: Int = DEFAULT_MESSAGE_INPUT_MAX_LINES, label: @Composable () -> Unit = { DefaultComposerLabel() }, innerLeadingContent: @Composable RowScope.() -> Unit = {}, innerTrailingContent: @Composable RowScope.() -> Unit = {}, )</ID>
    <ID>LongParameterList:MessageItem.kt$( messageItem: MessageItemState, onLongItemClick: (Message) -> Unit, modifier: Modifier = Modifier, onReactionsClick: (Message) -> Unit = {}, onThreadClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, onImagePreviewResult: (ImagePreviewResult?) -> Unit = {}, leadingContent: @Composable RowScope.(MessageItemState) -> Unit = { DefaultMessageItemLeadingContent(messageItem = it) }, headerContent: @Composable ColumnScope.(MessageItemState) -> Unit = { DefaultMessageItemHeaderContent( messageItem = it, onReactionsClick = onReactionsClick ) }, centerContent: @Composable ColumnScope.(MessageItemState) -> Unit = { DefaultMessageItemCenterContent( messageItem = it, onLongItemClick = onLongItemClick, onImagePreviewResult = onImagePreviewResult, onGiphyActionClick = onGiphyActionClick ) }, footerContent: @Composable ColumnScope.(MessageItemState) -> Unit = { DefaultMessageItemFooterContent(messageItem = it) }, trailingContent: @Composable RowScope.(MessageItemState) -> Unit = { DefaultMessageItemTrailingContent(messageItem = it) }, )</ID>
    <ID>LongParameterList:MessageList.kt$( currentState: MessagesState, modifier: Modifier = Modifier, lazyListState: LazyListState = rememberMessageListState(parentMessageId = currentState.parentMessageId), onMessagesStartReached: () -> Unit = {}, onLastVisibleMessageChanged: (Message) -> Unit = {}, onScrolledToBottom: () -> Unit = {}, onThreadClick: (Message) -> Unit = {}, onLongItemClick: (Message) -> Unit = {}, onReactionsClick: (Message) -> Unit = {}, onImagePreviewResult: (ImagePreviewResult?) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit = {}, loadingContent: @Composable () -> Unit = { DefaultMessageListLoadingIndicator(modifier) }, emptyContent: @Composable () -> Unit = { DefaultMessageListEmptyContent(modifier) }, helperContent: @Composable BoxScope.() -> Unit = { DefaultMessagesHelperContent(currentState, lazyListState) }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit = { DefaultMessageContainer( messageListItem = it, onLongItemClick = onLongItemClick, onThreadClick = onThreadClick, onReactionsClick = onReactionsClick, onGiphyActionClick = onGiphyActionClick, onImagePreviewResult = onImagePreviewResult ) }, )</ID>
    <ID>LongParameterList:MessageList.kt$( messageListItem: MessageListItemState, onImagePreviewResult: (ImagePreviewResult?) -> Unit, onThreadClick: (Message) -> Unit, onLongItemClick: (Message) -> Unit, onReactionsClick: (Message) -> Unit = {}, onGiphyActionClick: (GiphyAction) -> Unit, )</ID>
    <ID>LongParameterList:MessageList.kt$( viewModel: MessageListViewModel, modifier: Modifier = Modifier, lazyListState: LazyListState = rememberMessageListState(parentMessageId = viewModel.currentMessagesState.parentMessageId), onThreadClick: (Message) -> Unit = { viewModel.openMessageThread(it) }, onLongItemClick: (Message) -> Unit = { viewModel.selectMessage(it) }, onReactionsClick: (Message) -> Unit = { viewModel.selectReactions(it) }, onMessagesStartReached: () -> Unit = { viewModel.loadMore() }, onLastVisibleMessageChanged: (Message) -> Unit = { viewModel.updateLastSeenMessage(it) }, onScrollToBottom: () -> Unit = { viewModel.clearNewMessageState() }, onGiphyActionClick: (GiphyAction) -> Unit = { viewModel.performGiphyAction(it) }, onImagePreviewResult: (ImagePreviewResult?) -> Unit = { if (it?.resultType == ImagePreviewResultType.SHOW_IN_CHAT) { viewModel.focusMessage(it.messageId) } }, loadingContent: @Composable () -> Unit = { DefaultMessageListLoadingIndicator(modifier) }, emptyContent: @Composable () -> Unit = { DefaultMessageListEmptyContent(modifier) }, helperContent: @Composable BoxScope.() -> Unit = { DefaultMessagesHelperContent(viewModel.currentMessagesState, lazyListState) }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit = { messageListItem -> DefaultMessageContainer( messageListItem = messageListItem, onImagePreviewResult = onImagePreviewResult, onThreadClick = onThreadClick, onLongItemClick = onLongItemClick, onReactionsClick = onReactionsClick, onGiphyActionClick = onGiphyActionClick ) }, )</ID>
    <ID>LongParameterList:MessageListHeader.kt$( channel: Channel, currentUser: User?, modifier: Modifier = Modifier, typingUsers: List&lt;User> = emptyList(), messageMode: MessageMode = MessageMode.Normal, connectionState: ConnectionState = ConnectionState.CONNECTED, color: Color = ChatTheme.colors.barsBackground, shape: Shape = ChatTheme.shapes.header, elevation: Dp = ChatTheme.dimens.headerElevation, onBackPressed: () -> Unit = {}, onHeaderActionClick: (Channel) -> Unit = {}, leadingContent: @Composable RowScope.() -> Unit = { DefaultMessageListHeaderLeadingContent(onBackPressed = onBackPressed) }, centerContent: @Composable RowScope.() -> Unit = { DefaultMessageListHeaderCenterContent( modifier = Modifier.weight(1f), channel = channel, currentUser = currentUser, typingUsers = typingUsers, messageMode = messageMode, onHeaderActionClick = onHeaderActionClick, connectionState = connectionState ) }, trailingContent: @Composable RowScope.() -> Unit = { DefaultMessageListHeaderTrailingContent( channel = channel, currentUser = currentUser ) }, )</ID>
    <ID>LongParameterList:MessageListHeader.kt$( channel: Channel, currentUser: User?, modifier: Modifier = Modifier, typingUsers: List&lt;User> = emptyList(), messageMode: MessageMode = MessageMode.Normal, onHeaderActionClick: (Channel) -> Unit = {}, connectionState: ConnectionState = ConnectionState.CONNECTED, )</ID>
    <ID>LongParameterList:MessageListViewModel.kt$MessageListViewModel$( public val chatClient: ChatClient, private val channelId: String, private val clipboardHandler: ClipboardHandler, private val messageLimit: Int = DEFAULT_MESSAGE_LIMIT, private val enforceUniqueReactions: Boolean = true, private val showDateSeparators: Boolean = true, private val showSystemMessages: Boolean = true, private val dateSeparatorThresholdMillis: Long = TimeUnit.HOURS.toMillis(DATE_SEPARATOR_DEFAULT_HOUR_THRESHOLD), )</ID>
    <ID>LongParameterList:MessageText.kt$( text: AnnotatedString, modifier: Modifier = Modifier, style: TextStyle = TextStyle.Default, softWrap: Boolean = true, overflow: TextOverflow = TextOverflow.Clip, maxLines: Int = Int.MAX_VALUE, onTextLayout: (TextLayoutResult) -> Unit = {}, onLongPress: () -> Unit, onClick: (Int) -> Unit, )</ID>
    <ID>LongParameterList:Messages.kt$( messagesState: MessagesState, lazyListState: LazyListState, onMessagesStartReached: () -> Unit, onLastVisibleMessageChanged: (Message) -> Unit, onScrolledToBottom: () -> Unit, modifier: Modifier = Modifier, helperContent: @Composable BoxScope.() -> Unit = { DefaultMessagesHelperContent(messagesState, lazyListState) }, loadingMoreContent: @Composable () -> Unit = { DefaultMessagesLoadingMoreIndicator() }, itemContent: @Composable (MessageListItemState) -> Unit, )</ID>
    <ID>LongParameterList:MessagesScreen.kt$( channelId: String, messageLimit: Int = MessageListViewModel.DEFAULT_MESSAGE_LIMIT, showHeader: Boolean = true, enforceUniqueReactions: Boolean = true, showDateSeparators: Boolean = true, showSystemMessages: Boolean = true, onBackPressed: () -> Unit = {}, onHeaderActionClick: (channel: Channel) -> Unit = {}, )</ID>
    <ID>LongParameterList:MessagesScreen.kt$( context: Context, channelId: String, enforceUniqueReactions: Boolean, messageLimit: Int, showDateSeparators: Boolean, showSystemMessages: Boolean, )</ID>
    <ID>LongParameterList:MessagesViewModelFactory.kt$MessagesViewModelFactory$( private val context: Context, private val channelId: String, private val chatClient: ChatClient = ChatClient.instance(), private val enforceUniqueReactions: Boolean = true, private val messageLimit: Int = MessageListViewModel.DEFAULT_MESSAGE_LIMIT, private val maxAttachmentCount: Int = AttachmentConstants.MAX_ATTACHMENTS_COUNT, private val maxAttachmentSize: Long = AttachmentConstants.MAX_UPLOAD_FILE_SIZE, private val showDateSeparators: Boolean = true, private val showSystemMessages: Boolean = true, )</ID>
    <ID>LongParameterList:ReactionOptions.kt$( ownReactions: List&lt;Reaction>, onReactionOptionSelected: (ReactionOptionItemState) -> Unit, onShowMoreReactionsSelected: () -> Unit, modifier: Modifier = Modifier, numberOfReactionsShown: Int = DEFAULT_NUMBER_OF_REACTIONS_SHOWN, horizontalArrangement: Arrangement.Horizontal = Arrangement.SpaceBetween, reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), @DrawableRes showMoreReactionsIcon: Int = R.drawable.stream_compose_ic_more, itemContent: @Composable RowScope.(ReactionOptionItemState) -> Unit = { option -> DefaultReactionOptionItem( option = option, onReactionOptionSelected = onReactionOptionSelected ) }, )</ID>
    <ID>LongParameterList:ReactionsPicker.kt$( message: Message, onMessageAction: (MessageAction) -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, overlayColor: Color = ChatTheme.colors.overlay, cells: GridCells = GridCells.Fixed(5), onDismiss: () -> Unit = {}, reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), headerContent: @Composable ColumnScope.() -> Unit = {}, centerContent: @Composable ColumnScope.() -> Unit = { DefaultReactionsPickerCenterContent( message = message, onMessageAction = onMessageAction, cells = cells, reactionTypes = reactionTypes ) }, )</ID>
    <ID>LongParameterList:SearchInput.kt$( query: String, onValueChange: (String) -> Unit, modifier: Modifier = Modifier, onSearchStarted: () -> Unit = {}, leadingIcon: @Composable RowScope.() -> Unit = { DefaultSearchLeadingIcon() }, label: @Composable () -> Unit = { DefaultSearchLabel() }, )</ID>
    <ID>LongParameterList:SelectedChannelMenu.kt$( selectedChannel: Channel, isMuted: Boolean, currentUser: User?, onChannelOptionClick: (ChannelAction) -> Unit, onDismiss: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, overlayColor: Color = ChatTheme.colors.overlay, headerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedChannelMenuHeaderContent( selectedChannel = selectedChannel, currentUser = currentUser ) }, centerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedChannelMenuCenterContent( selectedChannel = selectedChannel, currentUser = currentUser, isMuted = isMuted, onChannelOptionClick = onChannelOptionClick ) }, )</ID>
    <ID>LongParameterList:SelectedMessageMenu.kt$( message: Message, messageOptions: List&lt;MessageOptionItemState>, onMessageAction: (MessageAction) -> Unit, onShowMoreReactionsSelected: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, overlayColor: Color = ChatTheme.colors.overlay, reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), @DrawableRes showMoreReactionsIcon: Int = R.drawable.stream_compose_ic_more, onDismiss: () -> Unit = {}, headerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedMessageReactionOptions( message = message, reactionTypes = reactionTypes, showMoreReactionsDrawableRes = showMoreReactionsIcon, onMessageAction = onMessageAction, showMoreReactionsIcon = onShowMoreReactionsSelected ) }, centerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedMessageOptions( messageOptions = messageOptions, onMessageAction = onMessageAction ) }, )</ID>
    <ID>LongParameterList:SelectedReactionsMenu.kt$( message: Message, currentUser: User?, onMessageAction: (MessageAction) -> Unit, onShowMoreReactionsSelected: () -> Unit, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, overlayColor: Color = ChatTheme.colors.overlay, reactionTypes: Map&lt;String, ReactionIcon> = ChatTheme.reactionIconFactory.createReactionIcons(), @DrawableRes showMoreReactionsIcon: Int = R.drawable.stream_compose_ic_more, onDismiss: () -> Unit = {}, headerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedReactionsHeaderContent( message = message, reactionTypes = reactionTypes, showMoreReactionsIcon = showMoreReactionsIcon, onMessageAction = onMessageAction, onShowMoreReactionsSelected = onShowMoreReactionsSelected ) }, centerContent: @Composable ColumnScope.() -> Unit = { DefaultSelectedReactionsCenterContent( message = message, currentUser = currentUser ) }, )</ID>
    <ID>LongParameterList:SimpleMenu.kt$( modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.bottomSheet, overlayColor: Color = ChatTheme.colors.overlay, onDismiss: () -> Unit = {}, headerContent: @Composable ColumnScope.() -> Unit = {}, centerContent: @Composable ColumnScope.() -> Unit = {}, )</ID>
    <ID>LongParameterList:UserAvatar.kt$( user: User, modifier: Modifier = Modifier, shape: Shape = ChatTheme.shapes.avatar, textStyle: TextStyle = ChatTheme.typography.title3Bold, contentDescription: String? = null, showOnlineIndicator: Boolean = true, onlineIndicatorAlignment: OnlineIndicatorAlignment = OnlineIndicatorAlignment.TopEnd, onlineIndicator: @Composable BoxScope.() -> Unit = { DefaultOnlineIndicator(onlineIndicatorAlignment) }, onClick: (() -> Unit)? = null, )</ID>
    <ID>MagicNumber:AttachmentsPicker.kt$4f</ID>
    <ID>MagicNumber:AttachmentsPicker.kt$5f</ID>
    <ID>MagicNumber:ExtendedReactionsOptions.kt$5</ID>
    <ID>MagicNumber:FileAttachmentContent.kt$0.85f</ID>
    <ID>MagicNumber:FilesPicker.kt$6f</ID>
    <ID>MagicNumber:GroupAvatar.kt$4</ID>
    <ID>MagicNumber:ImageAttachmentContent.kt$3</ID>
    <ID>MagicNumber:ImageAttachmentContent.kt$4</ID>
    <ID>MagicNumber:ImagePreviewActivity.kt$ImagePreviewActivity$3f</ID>
    <ID>MagicNumber:ImagePreviewActivity.kt$ImagePreviewActivity$8f</ID>
    <ID>MagicNumber:ImageUtils.kt$255</ID>
    <ID>MagicNumber:ImagesPicker.kt$3</ID>
    <ID>MagicNumber:MessageListViewModel.kt$MessageListViewModel$2000</ID>
    <ID>MagicNumber:Messages.kt$3</ID>
    <ID>MagicNumber:Messages.kt$5</ID>
    <ID>MagicNumber:ReactionsPicker.kt$5</ID>
    <ID>MagicNumber:SearchInput.kt$8f</ID>
    <ID>MagicNumber:TypingIndicatorAnimatedDot.kt$0.5f</ID>
    <ID>MagicNumber:UnreadCountIndicator.kt$99</ID>
    <ID>MaxLineLength:AttachmentFactory.kt$AttachmentFactory$*</ID>
    <ID>MaxLineLength:AttachmentsPicker.kt$tint = if (!hasPickedFiles &amp;&amp; !hasPickedImages) ChatTheme.colors.textLowEmphasis else ChatTheme.colors.disabled</ID>
    <ID>MaxLineLength:AttachmentsPicker.kt$tint = if (hasPickedFiles || hasPickedImages) ChatTheme.colors.primaryAccent else ChatTheme.colors.textLowEmphasis</ID>
    <ID>MaxLineLength:ChannelList.kt$*</ID>
    <ID>MaxLineLength:ChannelViewModelFactory.kt$ChannelViewModelFactory$?:</ID>
    <ID>MaxLineLength:Channels.kt$*</ID>
    <ID>MaxLineLength:ChatTheme.kt$attachmentPreviewHandlers: List&lt;AttachmentPreviewHandler> = AttachmentPreviewHandler.defaultAttachmentHandlers(LocalContext.current)</ID>
    <ID>MaxLineLength:ExtendedReactionsOptions.kt$*</ID>
    <ID>MaxLineLength:FileAttachmentFactory.kt$it.uploadId != null || it.upload != null || it.type == ModelType.attach_file || it.type == ModelType.attach_video || it.type == ModelType.attach_audio</ID>
    <ID>MaxLineLength:FilesPickerItemImage.kt$*</ID>
    <ID>MaxLineLength:MediaAttachmentPreviewHandler.kt$MediaAttachmentPreviewHandler$if (!mimeType.isNullOrEmpty() &amp;&amp; (mimeType.contains(ModelType.attach_audio) || mimeType.contains(ModelType.attach_video))) return true</ID>
    <ID>MaxLineLength:MessageComposer.kt$*</ID>
    <ID>MaxLineLength:MessageComposer.kt$tint = if (isAttachmentsButtonEnabled) ChatTheme.colors.textLowEmphasis else ChatTheme.colors.disabled</ID>
    <ID>MaxLineLength:MessageComposerViewModel.kt$MessageComposerViewModel$*</ID>
    <ID>MaxLineLength:MessageInputOptions.kt$id = if (activeAction is Reply) R.string.stream_compose_reply_to_message else R.string.stream_compose_edit_message</ID>
    <ID>MaxLineLength:MessageInputOptions.kt$painterResource(id = if (activeAction is Reply) R.drawable.stream_compose_ic_reply else R.drawable.stream_compose_ic_edit)</ID>
    <ID>MaxLineLength:MessageList.kt$*</ID>
    <ID>MaxLineLength:MessageList.kt$lazyListState: LazyListState = rememberMessageListState(parentMessageId = viewModel.currentMessagesState.parentMessageId)</ID>
    <ID>MaxLineLength:MessageListUtils.kt$*</ID>
    <ID>MaxLineLength:MessageListViewModel.kt$MessageListViewModel$is io.getstream.chat.android.offline.plugin.state.channel.MessagesState.OfflineNoResults</ID>
    <ID>MaxLineLength:MessageListViewModel.kt$MessageListViewModel.Companion$*</ID>
    <ID>MaxLineLength:MessageOptions.kt$iconPainter = painterResource(id = if (isUserMuted) R.drawable.stream_compose_ic_unmute else R.drawable.stream_compose_ic_mute)</ID>
    <ID>MaxLineLength:MessageOptions.kt$iconPainter = painterResource(id = if (selectedMessage.pinned) R.drawable.stream_compose_ic_unpin_message else R.drawable.stream_compose_ic_pin_message)</ID>
    <ID>MaxLineLength:MessageOptions.kt$title = if (selectedMessage.pinned) R.string.stream_compose_unpin_message else R.string.stream_compose_pin_message</ID>
    <ID>MaxLineLength:Messages.kt$*</ID>
    <ID>MaxLineLength:Messages.kt$if</ID>
    <ID>MaxLineLength:MessagesViewModelFactory.kt$MessagesViewModelFactory$?:</ID>
    <ID>MaxLineLength:MessagesViewModelFactory.kt$MessagesViewModelFactory$clipboardHandler = ClipboardHandlerImpl(context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager)</ID>
    <ID>MaxLineLength:OnlineIndicator.kt$*</ID>
    <ID>MaxLineLength:ReactionOptions.kt$*</ID>
    <ID>MaxLineLength:SelectedMessageMenu.kt$*</ID>
    <ID>MaxLineLength:SelectedReactionsMenu.kt$*</ID>
    <ID>MaxLineLength:ThreadParticipants.kt$*</ID>
    <ID>MaxLineLength:UploadingFooter.kt$*</ID>
    <ID>ReturnCount:DocumentAttachmentPreviewHandler.kt$DocumentAttachmentPreviewHandler$override fun canHandle(attachment: Attachment): Boolean</ID>
    <ID>ReturnCount:MediaAttachmentPreviewHandler.kt$MediaAttachmentPreviewHandler$override fun canHandle(attachment: Attachment): Boolean</ID>
    <ID>ReturnCount:MessageListViewModel.kt$MessageListViewModel$ public fun updateLastSeenMessage(message: Message)</ID>
    <ID>TooManyFunctions:ChannelList.kt$io.getstream.chat.android.compose.ui.channels.list.ChannelList.kt</ID>
    <ID>TooManyFunctions:ChannelListViewModel.kt$ChannelListViewModel : ViewModel</ID>
    <ID>TooManyFunctions:ImagePreviewActivity.kt$ImagePreviewActivity : AppCompatActivity</ID>
    <ID>TooManyFunctions:MessageComposer.kt$io.getstream.chat.android.compose.ui.messages.composer.MessageComposer.kt</ID>
    <ID>TooManyFunctions:MessageComposerViewModel.kt$MessageComposerViewModel : ViewModel</ID>
    <ID>TooManyFunctions:MessageListViewModel.kt$MessageListViewModel : ViewModel</ID>
    <ID>TopLevelPropertyNaming:TypingIndicatorAnimatedDot.kt$/** * The animation duration of each dot. */ public const val DotAnimationDurationMillis: Int = 200</ID>
    <ID>UnusedPrivateMember:Avatar.kt$ @Preview(showBackground = true, name = "Avatar Preview (With image URL)") @Composable private fun AvatarWithImageUrlPreview()</ID>
    <ID>UnusedPrivateMember:Avatar.kt$ @Preview(showBackground = true, name = "Avatar Preview (Without image URL)") @Composable private fun AvatarWithoutImageUrlPreview()</ID>
    <ID>UnusedPrivateMember:ChannelAvatar.kt$ @Preview(showBackground = true, name = "ChannelAvatar Preview (Few members)") @Composable private fun ChannelAvatarForChannelWithFewMembersPreview()</ID>
    <ID>UnusedPrivateMember:ChannelAvatar.kt$ @Preview(showBackground = true, name = "ChannelAvatar Preview (Many members)") @Composable private fun ChannelAvatarForChannelWithManyMembersPreview()</ID>
    <ID>UnusedPrivateMember:ChannelAvatar.kt$ @Preview(showBackground = true, name = "ChannelAvatar Preview (Online user)") @Composable private fun ChannelAvatarForDirectChannelWithOnlineUserPreview()</ID>
    <ID>UnusedPrivateMember:ChannelAvatar.kt$ @Preview(showBackground = true, name = "ChannelAvatar Preview (With image)") @Composable private fun ChannelWithImageAvatarPreview()</ID>
    <ID>UnusedPrivateMember:ChannelItem.kt$ @Preview(showBackground = true, name = "ChannelItem Preview (Channel with unread)") @Composable private fun ChannelItemForChannelWithUnreadMessagesPreview()</ID>
    <ID>UnusedPrivateMember:ChannelItem.kt$ @Preview(showBackground = true, name = "ChannelItem Preview (Muted channel)") @Composable private fun ChannelItemForMutedChannelPreview()</ID>
    <ID>UnusedPrivateMember:ChannelItem.kt$ @Preview(showBackground = true, name = "ChannelItem Preview (Without messages)") @Composable private fun ChannelItemForChannelWithoutMessagesPreview()</ID>
    <ID>UnusedPrivateMember:ChannelList.kt$ @Preview(showBackground = true, name = "ChannelList Preview (Content state)") @Composable private fun ChannelListForContentStatePreview()</ID>
    <ID>UnusedPrivateMember:ChannelList.kt$ @Preview(showBackground = true, name = "ChannelList Preview (Empty state)") @Composable private fun ChannelListForEmptyStatePreview()</ID>
    <ID>UnusedPrivateMember:ChannelList.kt$ @Preview(showBackground = true, name = "ChannelList Preview (Loading state)") @Composable private fun ChannelListForLoadingStatePreview()</ID>
    <ID>UnusedPrivateMember:ChannelListHeader.kt$ @Preview(name = "ChannelListHeader Preview (Connected state)") @Composable private fun ChannelListHeaderForConnectedStatePreview()</ID>
    <ID>UnusedPrivateMember:ChannelListHeader.kt$ @Preview(name = "ChannelListHeader Preview (Connecting state)") @Composable private fun ChannelListHeaderForConnectingStatePreview()</ID>
    <ID>UnusedPrivateMember:ChannelMembers.kt$ @Preview(showBackground = true, name = "ChannelMembers Preview (Many members)") @Composable private fun ManyMembersChannelMembersPreview()</ID>
    <ID>UnusedPrivateMember:ChannelMembers.kt$ @Preview(showBackground = true, name = "ChannelMembers Preview (One member)") @Composable private fun OneMemberChannelMembersPreview()</ID>
    <ID>UnusedPrivateMember:ChannelMembersItem.kt$ @Preview(showBackground = true, name = "ChannelMembersItem Preview") @Composable private fun ChannelMemberItemPreview()</ID>
    <ID>UnusedPrivateMember:ChannelOptions.kt$ @Preview(showBackground = true, name = "ChannelOptions Preview") @Composable private fun ChannelOptionsPreview()</ID>
    <ID>UnusedPrivateMember:ChannelOptionsItem.kt$ @Preview(showBackground = true, name = "ChannelOptionsItem Preview") @Composable private fun ChannelOptionsItemPreview()</ID>
    <ID>UnusedPrivateMember:MessageListHeader.kt$@Preview(name = "MessageListHeader Preview (Connected)") @Composable private fun MessageListHeaderConnectedPreview()</ID>
    <ID>UnusedPrivateMember:MessageListHeader.kt$@Preview(name = "MessageListHeader Preview (Connecting)") @Composable private fun MessageListHeaderConnectingPreview()</ID>
    <ID>UnusedPrivateMember:MessageListHeader.kt$@Preview(name = "MessageListHeader Preview (Many Members)") @Composable private fun MessageListHeaderManyMembersPreview()</ID>
    <ID>UnusedPrivateMember:MessageListHeader.kt$@Preview(name = "MessageListHeader Preview (Offline)") @Composable private fun MessageListHeaderOfflinePreview()</ID>
    <ID>UnusedPrivateMember:MessageListHeader.kt$@Preview(name = "MessageListHeader Preview (User Typing)") @Composable private fun MessageListHeaderUserTypingPreview()</ID>
    <ID>UnusedPrivateMember:MessageOptionItem.kt$ @Preview(showBackground = true, name = "MessageOptionItem Preview") @Composable private fun MessageOptionItemPreview()</ID>
    <ID>UnusedPrivateMember:MessageOptions.kt$ @Preview(showBackground = true, name = "MessageOptions Preview (Failed Message)") @Composable private fun MessageOptionsForFailedMessagePreview()</ID>
    <ID>UnusedPrivateMember:MessageOptions.kt$ @Preview(showBackground = true, name = "MessageOptions Preview (Own Message)") @Composable private fun MessageOptionsForOwnMessagePreview()</ID>
    <ID>UnusedPrivateMember:MessageOptions.kt$ @Preview(showBackground = true, name = "MessageOptions Preview (Theirs Message)") @Composable private fun MessageOptionsForTheirsMessagePreview()</ID>
    <ID>UnusedPrivateMember:MessageReactions.kt$ @Preview @Composable private fun ManyMessageReactionsPreview()</ID>
    <ID>UnusedPrivateMember:MessageReactions.kt$ @Preview @Composable private fun OneMessageReactionPreview()</ID>
    <ID>UnusedPrivateMember:MessageReadStatusIcon.kt$ @Preview(showBackground = true, name = "MessageReadStatusIcon Preview (Seen message)") @Composable private fun SeenMessageReadStatusIcon()</ID>
    <ID>UnusedPrivateMember:ReactionOptionItem.kt$ @Preview(showBackground = true, name = "ReactionOptionItem Preview (Not Selected)") @Composable private fun ReactionOptionItemNotSelectedPreview()</ID>
    <ID>UnusedPrivateMember:ReactionOptionItem.kt$ @Preview(showBackground = true, name = "ReactionOptionItem Preview (Selected)") @Composable private fun ReactionOptionItemSelectedPreview()</ID>
    <ID>UnusedPrivateMember:ReactionOptions.kt$ @Preview(showBackground = true, name = "ReactionOptions Preview") @Composable private fun ReactionOptionsPreview()</ID>
    <ID>UnusedPrivateMember:SearchInput.kt$@Preview(name = "Search input") @Composable private fun SearchInputPreview()</ID>
    <ID>UnusedPrivateMember:SelectedChannelMenu.kt$ @Preview(showBackground = true, name = "SelectedChannelMenu Preview (Bottom sheet dialog)") @Composable private fun SelectedChannelMenuBottomSheetDialogPreview()</ID>
    <ID>UnusedPrivateMember:SelectedChannelMenu.kt$ @Preview(showBackground = true, name = "SelectedChannelMenu Preview (Centered dialog)") @Composable private fun SelectedChannelMenuCenteredDialogPreview()</ID>
    <ID>UnusedPrivateMember:SelectedMessageMenu.kt$ @Preview(showBackground = true, name = "SelectedMessageMenu Preview") @Composable private fun SelectedMessageMenuPreview()</ID>
    <ID>UnusedPrivateMember:SelectedReactionsMenu.kt$ @Preview @Composable private fun ManySelectedReactionsMenuPreview()</ID>
    <ID>UnusedPrivateMember:SelectedReactionsMenu.kt$ @Preview @Composable private fun OneSelectedReactionMenuPreview()</ID>
    <ID>UnusedPrivateMember:UnreadCountIndicator.kt$ @Preview(showBackground = true, name = "UnreadCountIndicator Preview (Few unread messages)") @Composable private fun FewMessagesUnreadCountIndicatorPreview()</ID>
    <ID>UnusedPrivateMember:UnreadCountIndicator.kt$ @Preview(showBackground = true, name = "UnreadCountIndicator Preview (Many unread messages)") @Composable private fun ManyMessagesUnreadCountIndicatorPreview()</ID>
    <ID>UnusedPrivateMember:UserAvatar.kt$ @Preview(showBackground = true, name = "UserAvatar Preview (With avatar image)") @Composable private fun UserAvatarForUserWithImagePreview()</ID>
    <ID>UnusedPrivateMember:UserAvatar.kt$ @Preview(showBackground = true, name = "UserAvatar Preview (With online status)") @Composable private fun UserAvatarForOnlineUserPreview()</ID>
    <ID>UnusedPrivateMember:UserAvatar.kt$ @Preview(showBackground = true, name = "UserAvatar Preview (Without avatar image)") @Composable private fun UserAvatarForUserWithoutImagePreview()</ID>
    <ID>UnusedPrivateMember:UserReactions.kt$ @Preview @Composable private fun ManyUserReactionsPreview()</ID>
    <ID>UnusedPrivateMember:UserReactions.kt$ @Preview @Composable private fun OneUserReactionPreview()</ID>
  </CurrentIssues>
</SmellBaseline>
