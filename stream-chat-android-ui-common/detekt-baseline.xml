<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexMethod:MessageListItemLiveData.kt$MessageListItemLiveData$ private fun groupMessages(messages: List&lt;Message>?, currentUserId: String): List&lt;MessageListItem></ID>
    <ID>ComplexMethod:MessageListViewModel.kt$MessageListViewModel$ public fun onEvent(event: Event)</ID>
    <ID>ForbiddenComment:MessageListViewModelTest.kt$MessageListViewModelTest$// TODO: Review this test (https://github.com/GetStream/stream-chat-android/issues/2976)</ID>
    <ID>ForbiddenComment:StorageHelper.kt$// TODO: Attachment's title should never be null. Review AttachmentMetaData class</ID>
    <ID>ImplicitDefaultLocale:MediaStringUtil.kt$MediaStringUtil$String.format("%02d:%02d:%02d", hours, minutes, seconds)</ID>
    <ID>LongMethod:MessageListViewModel.kt$MessageListViewModel$ public fun onEvent(event: Event)</ID>
    <ID>LongParameterList:Linkify.kt$Linkify$( links: MutableList&lt;LinkSpec>, s: Spannable, pattern: Pattern, schemes: Array&lt;String>, matchFilter: Linkify.MatchFilter?, transformFilter: Linkify.TransformFilter?, )</ID>
    <ID>LongParameterList:Mother.kt$( authorName: String? = randomString(), titleLink: String? = randomString(), thumbUrl: String? = randomString(), imageUrl: String? = randomString(), assetUrl: String? = randomString(), ogUrl: String? = randomString(), mimeType: String? = randomString(), fileSize: Int = randomInt(), title: String? = randomString(), text: String? = randomString(), type: String? = randomString(), image: String? = randomString(), url: String? = randomString(), name: String? = randomString(), fallback: String? = randomString(), uploadFile: File? = null, uploadState: Attachment.UploadState? = null, extraData: MutableMap&lt;String, Any> = mutableMapOf(), authorLink: String? = randomString(), )</ID>
    <ID>LongParameterList:Mother.kt$( id: String = randomString(), cid: String = randomCID(), text: String = randomString(), html: String = randomString(), parentId: String? = randomString(), command: String? = randomString(), attachments: MutableList&lt;Attachment> = mutableListOf(), mentionedUsers: MutableList&lt;User> = mutableListOf(), replyCount: Int = randomInt(), reactionCounts: MutableMap&lt;String, Int> = mutableMapOf(), reactionScores: MutableMap&lt;String, Int> = mutableMapOf(), syncStatus: SyncStatus = randomSyncStatus(), type: String = randomString(), latestReactions: MutableList&lt;Reaction> = mutableListOf(), ownReactions: MutableList&lt;Reaction> = mutableListOf(), createdAt: Date? = randomDate(), updatedAt: Date? = randomDate(), deletedAt: Date? = randomDate(), user: User = createUser(), extraData: MutableMap&lt;String, Any> = mutableMapOf(), silent: Boolean = randomBoolean() )</ID>
    <ID>LongParameterList:Mother.kt$( id: String = randomString(), role: String = randomString(), invisible: Boolean = randomBoolean(), banned: Boolean = randomBoolean(), devices: List&lt;Device> = mutableListOf(), online: Boolean = randomBoolean(), createdAt: Date? = null, updatedAt: Date? = null, lastActive: Date? = null, totalUnreadCount: Int = positiveRandomInt(), unreadChannels: Int = positiveRandomInt(), mutes: List&lt;Mute> = mutableListOf(), teams: List&lt;String> = listOf(), channelMutes: List&lt;ChannelMute> = emptyList(), extraData: MutableMap&lt;String, Any> = mutableMapOf() )</ID>
    <ID>LongParameterList:Mother.kt$( id: String = randomString(), role: String = randomString(), invisible: Boolean = randomBoolean(), banned: Boolean = randomBoolean(), devices: List&lt;Device> = mutableListOf(), online: Boolean = randomBoolean(), createdAt: Date? = randomDate(), updatedAt: Date? = randomDate(), lastActive: Date? = randomDate(), totalUnreadCount: Int = positiveRandomInt(), unreadChannels: Int = positiveRandomInt(), mutes: List&lt;Mute> = mutableListOf(), teams: List&lt;String> = listOf(), channelMutes: List&lt;ChannelMute> = emptyList(), extraData: MutableMap&lt;String, Any> = mutableMapOf() )</ID>
    <ID>LongParameterList:Mother.kt$( user: User = createUser(), role: String = randomString(), createdAt: Date? = randomDate(), updatedAt: Date? = randomDate(), isInvited: Boolean = randomBoolean(), inviteAcceptedAt: Date? = randomDate(), inviteRejectedAt: Date? = randomDate() )</ID>
    <ID>LongParameterList:PermissionChecker.kt$PermissionChecker$( view: View, dialogTitle: String, dialogMessage: String, snackbarMessage: String, permissions: List&lt;String>, onPermissionDenied: () -> Unit, onPermissionGranted: () -> Unit, )</ID>
    <ID>LongParameterList:StreamImageLoader.kt$StreamImageLoader$( target: ImageView, data: Any?, @DrawableRes placeholderResId: Int? = null, transformation: ImageTransformation = ImageTransformation.None, onStart: () -> Unit = {}, onComplete: () -> Unit = {}, )</ID>
    <ID>LongParameterList:StreamImageLoader.kt$StreamImageLoader$( target: ImageView, data: Any?, placeholderDrawable: Drawable? = null, transformation: ImageTransformation = ImageTransformation.None, onStart: () -> Unit = {}, onComplete: () -> Unit = {}, )</ID>
    <ID>LongParameterList:StreamImageLoader.kt$StreamImageLoader$( target: ImageView, uri: Uri?, @DrawableRes placeholderResId: Int? = null, transformation: ImageTransformation = ImageTransformation.None, onStart: () -> Unit = {}, onComplete: () -> Unit = {}, )</ID>
    <ID>MagicNumber:Date.kt$60000</ID>
    <ID>MagicNumber:DefaultDateFormatter.kt$DefaultDateFormatter$6</ID>
    <ID>MagicNumber:MediaStringUtil.kt$MediaStringUtil$1024</ID>
    <ID>MagicNumber:MediaStringUtil.kt$MediaStringUtil$3600</ID>
    <ID>MagicNumber:MediaStringUtil.kt$MediaStringUtil$60</ID>
    <ID>MagicNumber:MessageComposerController.kt$MessageComposerController$1000</ID>
    <ID>MagicNumber:MessageListViewModel.kt$MessageListViewModel$1000</ID>
    <ID>MagicNumber:MessageListViewModel.kt$MessageListViewModel$4</ID>
    <ID>MagicNumber:MessageListViewModel.kt$MessageListViewModel$60</ID>
    <ID>MagicNumber:StorageHelper.kt$StorageHelper$1000</ID>
    <ID>MagicNumber:StreamFileUtil.kt$StreamFileUtil$90</ID>
    <ID>MagicNumber:StreamImageLoaderFactory.kt$StreamImageLoaderFactory$0.25</ID>
    <ID>MaxLineLength:CoilStreamImageLoader.kt$CoilStreamImageLoader$*</ID>
    <ID>MaxLineLength:CoilStreamImageLoader.kt$CoilStreamImageLoader$if</ID>
    <ID>NestedBlockDepth:Linkify.kt$Linkify$private fun pruneOverlaps(links: MutableList&lt;LinkSpec>, text: Spannable)</ID>
    <ID>NestedBlockDepth:MessageListItemLiveData.kt$MessageListItemLiveData$ private fun addReads( messages: List&lt;MessageListItem>, reads: List&lt;ChannelUserRead>?, currentUserId: String, ): List&lt;MessageListItem></ID>
    <ID>NestedBlockDepth:MessageListViewModelTest.kt$MessageListViewModelTest$@Test fun `Should display thread messages when thread mode entered`()</ID>
    <ID>NestedBlockDepth:MessageListViewModelTest.kt$MessageListViewModelTest$@Test fun `Should return from thread to normal mode on back click`()</ID>
    <ID>PrintStackTrace:StreamFileUtil.kt$StreamFileUtil$e</ID>
    <ID>ReturnCount:MediaStringUtil.kt$MediaStringUtil$@JvmStatic public fun convertFileSizeByteCount(bytes: Long): String</ID>
    <ID>ReturnCount:MessageListItemLiveData.kt$MessageListItemLiveData$ private fun addReads( messages: List&lt;MessageListItem>, reads: List&lt;ChannelUserRead>?, currentUserId: String, ): List&lt;MessageListItem></ID>
    <ID>TooManyFunctions:MessageComposerController.kt$MessageComposerController</ID>
    <ID>TooManyFunctions:MessageInputViewModel.kt$MessageInputViewModel : ViewModel</ID>
    <ID>TooManyFunctions:MessageListItemLiveData.kt$MessageListItemLiveData : MediatorLiveData</ID>
    <ID>TooManyFunctions:MessageListViewModel.kt$MessageListViewModel : ViewModel</ID>
    <ID>TooManyFunctions:StorageHelper.kt$StorageHelper</ID>
    <ID>UnusedPrivateMember:MessageInputViewModel.kt$MessageInputViewModel$private val isThread: Boolean get() = activeThread.value != null</ID>
    <ID>UnusedPrivateMember:MessageListViewModelTest.kt$MessageListViewModelTest$private val flagResult: Call&lt;Flag> = mock()</ID>
    <ID>UnusedPrivateMember:MessageListViewModelTest.kt$MessageListViewModelTest$private val loadOlderMessagesCall = TestCall(loadOlderMessagesResult)</ID>
    <ID>UnusedPrivateMember:MessageListViewModelTest.kt$MessageListViewModelTest$private val threadMessages = MutableLiveData&lt;List&lt;Message>>()</ID>
    <ID>UnusedPrivateMember:MessageListViewModelTest.kt$private const val LIMIT = 30</ID>
    <ID>UnusedPrivateMember:MessageListViewModelTest.kt$private val CHANNEL = createChannel(CID)</ID>
  </CurrentIssues>
</SmellBaseline>
