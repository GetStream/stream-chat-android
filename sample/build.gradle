import com.google.gson.Gson
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

def appVersion = "23.0"

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "io.getstream.chat.sdk"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 23
        versionName appVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            if (checkSigningEnvVars()) {
                storeFile file(System.getenv('STREAM_CHAT_RELEASE_SIGNING_STORE_FILE_PATH'))
                storePassword System.getenv('STREAM_CHAT_RELEASE_SIGNING_STORE_PASSWORD')
                keyAlias System.getenv('STREAM_CHAT_RELEASE_SIGNING_KEY_ALIAS')
                keyPassword System.getenv('STREAM_CHAT_RELEASE_SIGNING_KEY_PASSWORD')
            } else {
                logger.warn('Release env vars are not defined')
            }
        }
    }

    buildTypes {

        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "SDK_VERSION", "\"${releaseSdkVersion}\""

            def usersConfig = loadJson(true)
            buildConfigField "String", "USERS_CONFIG", '"' + usersConfig + '"'
        }

        debug {
            minifyEnabled false
            shrinkResources false

            buildConfigField "String", "SDK_VERSION", '"master"'

            def usersConfig = loadJson(false)
            buildConfigField "String", "USERS_CONFIG", '"' + usersConfig + '"'


            buildConfigField "String", "SDK_VERSION", '"master"'
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                def buildType = variant.name
                def version = variant.versionName

                if (buildType == 'debug') {
                    outputFileName = "chat-sample-[type-${buildType}]-[ver-${version}]-[sdk-master].apk"
                } else {
                    outputFileName = "chat-sample-[type-${buildType}]-[ver-${version}]-[sdk-${releaseSdkVersion}].apk"
                }

            }
        }
    }

    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "androidx.legacy:legacy-support-v4:$rootProject.legacySupportVersion"

    releaseImplementation "com.github.getstream:stream-chat-android:$releaseSdkVersion"
    debugImplementation project(':library')


    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    implementation "com.google.firebase:firebase-messaging:$rootProject.firebaseMessagingVersion"
    implementation "com.google.firebase:firebase-core:$rootProject.firebaseCoreVersion"

    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"

    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    implementation("com.crashlytics.sdk.android:crashlytics:$rootProject.crashlyticsVersion")
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"

    implementation "androidx.viewpager2:viewpager2:$rootProject.viewPagerVersion"
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"
    // Testing dependencies
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"

}
apply plugin: 'com.google.gms.google-services'

def checkSigningEnvVars() {
    def storagePath = System.getenv('STREAM_CHAT_RELEASE_SIGNING_STORE_FILE_PATH')
    def password = System.getenv('STREAM_CHAT_RELEASE_SIGNING_STORE_PASSWORD')
    def keyAlias = System.getenv('STREAM_CHAT_RELEASE_SIGNING_KEY_ALIAS')
    def keyPassword = System.getenv('STREAM_CHAT_RELEASE_SIGNING_KEY_PASSWORD')

    return storagePath != null && password != null && keyAlias != null && keyPassword != null
}

def loadJson(useDefault) {
    def defaultConfigPath = projectDir.getAbsolutePath() + "/app-config.json"
    def customConfigPath = projectDir.getAbsolutePath() + "/app-config-custom.json"
    def file = null

    if (useDefault){
        file = new File(defaultConfigPath)
    } else {
        if (new File(customConfigPath).exists()) {
            file = new File(customConfigPath)
        } else {
            file = new File(defaultConfigPath)
        }
    }



    def json = new JsonSlurper().parseText(file.text)
    println("App config: " + json)
    return ecapse(new Gson().toJson(json))
}

def ecapse(jsString) {
    return jsString.replace("\\", "\\\\")
            .replace("\"", "\\\"")
            .replace("\b", "\\b")
            .replace("\f", "\\f")
            .replace("\n", "\\n")
            .replace("\r", "\\r")
            .replace("\t", "\\t")
}

gradle.taskGraph.useFilter { task ->
    /**
     * Ignores release unit tests.
     * As it's assembled with releaseSdkVersion, which might be outdated
     */
    return task.name != 'testReleaseUnitTest'
}