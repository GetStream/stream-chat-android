import com.getstream.sdk.chat.Dependencies

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

apply from: "${rootDir}/scripts/android.gradle"

android {
    defaultConfig {
        applicationId "io.getstream.chat.sample"
        versionCode sampleAppVersionCode
        versionName sampleAppVersionName
    }

    File signFile = rootProject.file('.sign/keystore.properties')
    if (signFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signFile))
        signingConfigs {
            release {
                storeFile rootProject.file(properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
    } else {
        signingConfigs {
            release {
                storeFile rootProject.file('.sign/debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }

    signingConfigs.debug {
        storeFile rootProject.file('.sign/debug.keystore')
        storePassword 'android'
        keyAlias 'androiddebugkey'
        keyPassword 'android'
    }

    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            testCoverageEnabled true
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "version"
    productFlavors {
        demo {
            dimension "version"
        }
        full {
            dimension "version"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name == "debug" && names.contains("full")) {
            setIgnore(true)
        }
    }

    sourceSets.all {
        it.java.srcDir "src/$it.name/kotlin"
    }

    lintOptions {
        abortOnError false
        xmlReport true
        checkDependencies true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation project(":stream-chat-android")

    implementation Dependencies.kotlinStdLib

    implementation Dependencies.androidxActivityKtx
    implementation Dependencies.androidxAppCompat
    implementation Dependencies.androidxCoreKtx
    implementation Dependencies.androidxLifecycleExtensions
    implementation Dependencies.androidxPreferences
    implementation Dependencies.constraintLayout
    implementation Dependencies.androidxFragmentKtx
    implementation Dependencies.materialComponents

    implementation Dependencies.navigationRuntimeKTX
    implementation Dependencies.navigationFragmentKTX
    implementation Dependencies.navigationUIKTX

    implementation Dependencies.firebaseAnalytics
    implementation Dependencies.firebaseCrashlytics

    implementation Dependencies.coil

    implementation Dependencies.timber

    debugImplementation Dependencies.flipper
    debugImplementation Dependencies.flipperNetwork
    debugImplementation Dependencies.flipperLoader

    //debugImplementation Dependencies.leakCanary
}
