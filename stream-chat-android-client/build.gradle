import io.getstream.chat.android.Dependencies
import io.getstream.chat.android.Configuration

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.devtools.ksp'
apply plugin: "de.mannodermaus.android-junit5"

ext {
    PUBLISH_GROUP_ID = Configuration.artifactGroup
    PUBLISH_ARTIFACT_ID = 'stream-chat-android-client'
    PUBLISH_VERSION = rootVersionName
}

apply from: "${rootDir}/scripts/publish-module.gradle"
apply from: "${rootDir}/scripts/android.gradle"

android {
    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField 'String', 'STREAM_CHAT_VERSION', "\"$version\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'consumer-proguard-rules.pro'
        }
        debug {
            testCoverageEnabled false
            consumerProguardFiles 'consumer-proguard-rules.pro'
        }
    }

    resourcePrefix 'stream_'

    lintOptions {
        xmlReport false
    }

    testOptions.unitTests {
        returnDefaultValues = true
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += [
                '-progressive',
                '-Xexplicit-api=strict',
                '-opt-in=kotlin.RequiresOptIn',
                '-opt-in=io.getstream.chat.android.core.internal.InternalStreamChatApi',
        ]
        jvmTarget = JavaVersion.VERSION_11.toString()
    }
}

dependencies {
    api project(':stream-chat-android-core')

    implementation Dependencies.kotlinReflect

    implementation Dependencies.androidxAppCompat
    implementation Dependencies.androidxCoreKtx
    implementation Dependencies.androidxLifecycleProcess
    implementation Dependencies.androidxLifecycleLiveDataKtx
    implementation Dependencies.workRuntimeKtx
    implementation Dependencies.constraintLayout
    implementation Dependencies.coroutinesCore
    implementation Dependencies.coroutinesAndroid
    implementation Dependencies.retrofit
    implementation Dependencies.streamLog
    implementation Dependencies.streamLogAndroid
    debugImplementation Dependencies.streamLogAndroidFile
    implementation Dependencies.streamPushDelegate
    api Dependencies.streamPushPermissions
    implementation Dependencies.moshi
    implementation Dependencies.retrofitMoshiConverter
    ksp Dependencies.moshiCodegen
    implementation Dependencies.okhttpLoggingInterceptor
    implementation Dependencies.ok2curl
    debugImplementation Dependencies.flipper
    debugImplementation Dependencies.flipperNetwork
    debugImplementation Dependencies.flipperLoader

    // Tests
    testImplementation project(':stream-chat-android-test')
    testImplementation project(":stream-chat-android-client-test")
    testImplementation testFixtures(project(":stream-chat-android-core"))
    testImplementation Dependencies.streamResult
    testImplementation Dependencies.androidxTestJunit
    testImplementation Dependencies.androidxLifecycleTesting
    testImplementation Dependencies.junitJupiterApi
    testImplementation Dependencies.junitJupiterParams
    testRuntimeOnly Dependencies.junitJupiterEngine
    testRuntimeOnly Dependencies.junitVintageEngine

    testImplementation Dependencies.json
    testImplementation Dependencies.kluent
    testImplementation Dependencies.mockito
    testImplementation Dependencies.mockitoKotlin
    testImplementation Dependencies.okhttpMockWebserver
    testImplementation Dependencies.robolectric

    // Instrumentation tests
    androidTestImplementation Dependencies.junit4
    androidTestImplementation Dependencies.espressoCore
    androidTestImplementation Dependencies.androidxTestJunit

    detektPlugins(Dependencies.detektFormatting)
}

/* Uncomment if the Dokka page per module is required
tasks.withType(dokkaHtmlPartial.getClass()) {
    dokkaSourceSets {
        named("main") {
            moduleName.set("LLC")
            includes.from("DokkaModule.md")
        }
    }
}
*/
