<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexMethod:ChannelClient.kt$ChannelClient$private fun isRelevantForChannel(event: ChatEvent): Boolean</ID>
    <ID>ComplexMethod:EventMapping.kt$internal fun ChatEventDto.toDomain(): ChatEvent</ID>
    <ID>ComplexMethod:FilterObjectToMap.kt$internal fun FilterObject.toMap(): Map&lt;String, Any></ID>
    <ID>EmptyFunctionBlock:EventsParser.kt$EventsParser${ }</ID>
    <ID>EmptyFunctionBlock:FakeChatSocket.kt$FakeChatSocket${ }</ID>
    <ID>EmptyFunctionBlock:FakeSocketService.kt$FakeSocketService${ }</ID>
    <ID>EmptyFunctionBlock:RetroError.kt$RetroError${ }</ID>
    <ID>EmptyFunctionBlock:RetroSuccess.kt$RetroSuccess${ }</ID>
    <ID>ForbiddenComment:ChatClient.kt$ChatClient$// TODO: An InterceptedCall wrapper can be created to avoid so much code here.</ID>
    <ID>LargeClass:ChatClient.kt$ChatClient</ID>
    <ID>LargeClass:MoshiChatApi.kt$MoshiChatApi : ChatApi</ID>
    <ID>LongParameterList:BaseChatModule.kt$BaseChatModule$( private val appContext: Context, private val config: ChatClientConfig, private val notificationsHandler: NotificationHandler, private val notificationConfig: NotificationConfig, private val fileUploader: FileUploader? = null, private val tokenManager: TokenManager = TokenManagerImpl(), private val callbackExecutor: Executor?, private val customOkHttpClient: OkHttpClient? = null, private val httpClientConfig: (OkHttpClient.Builder) -> OkHttpClient.Builder = { it }, )</ID>
    <ID>LongParameterList:ChannelClient.kt$ChannelClient$( filter: FilterObject? = null, sort: QuerySort&lt;BannedUsersSort> = QuerySort.asc(BannedUsersSort::createdAt), offset: Int? = null, limit: Int? = null, createdAtAfter: Date? = null, createdAtAfterOrEqual: Date? = null, createdAtBefore: Date? = null, createdAtBeforeOrEqual: Date? = null, )</ID>
    <ID>LongParameterList:ChatApi.kt$ChatApi$( channelFilter: FilterObject, messageFilter: FilterObject, offset: Int?, limit: Int?, next: String?, sort: QuerySort&lt;Message>?, )</ID>
    <ID>LongParameterList:ChatApi.kt$ChatApi$( channelType: String, channelId: String, offset: Int, limit: Int, filter: FilterObject, sort: QuerySort&lt;Member>, members: List&lt;Member>, )</ID>
    <ID>LongParameterList:ChatApi.kt$ChatApi$( filter: FilterObject, sort: QuerySort&lt;BannedUsersSort>, offset: Int?, limit: Int?, createdAtAfter: Date?, createdAtAfterOrEqual: Date?, createdAtBefore: Date?, createdAtBeforeOrEqual: Date?, )</ID>
    <ID>LongParameterList:ChatApi.kt$ChatApi$( targetId: String, timeout: Int?, reason: String?, channelType: String, channelId: String, shadow: Boolean, )</ID>
    <ID>LongParameterList:ChatClient.kt$ChatClient$( channelFilter: FilterObject, messageFilter: FilterObject, offset: Int? = null, limit: Int? = null, next: String? = null, sort: QuerySort&lt;Message>? = null, )</ID>
    <ID>LongParameterList:ChatClient.kt$ChatClient$( channelType: String, channelId: String, offset: Int, limit: Int, filter: FilterObject, sort: QuerySort&lt;Member>, members: List&lt;Member> = emptyList(), )</ID>
    <ID>LongParameterList:ChatClient.kt$ChatClient$( filter: FilterObject, sort: QuerySort&lt;BannedUsersSort> = QuerySort.asc(BannedUsersSort::createdAt), offset: Int? = null, limit: Int? = null, createdAtAfter: Date? = null, createdAtAfterOrEqual: Date? = null, createdAtBefore: Date? = null, createdAtBeforeOrEqual: Date? = null, )</ID>
    <ID>LongParameterList:ChatClient.kt$ChatClient$( public val config: ChatClientConfig, private val api: ChatApi, private val socket: ChatSocket, @property:InternalStreamChatApi public val notifications: ChatNotifications, private val tokenManager: TokenManager = TokenManagerImpl(), private val socketStateService: SocketStateService = SocketStateService(), private val queryChannelsPostponeHelper: QueryChannelsPostponeHelper, private val userCredentialStorage: UserCredentialStorage, private val userStateService: UserStateService = UserStateService(), private val tokenUtils: TokenUtils = TokenUtils, internal val scope: CoroutineScope, internal val retryPolicy: RetryPolicy, private val initializationCoordinator: InitializationCoordinator = InitializationCoordinator.getOrCreate(), private val appSettingsManager: AppSettingManager, )</ID>
    <ID>LongParameterList:FileUploader.kt$FileUploader$( channelType: String, channelId: String, userId: String, connectionId: String, file: File, callback: ProgressCallback, )</ID>
    <ID>LongParameterList:MoshiChatApi.kt$MoshiChatApi$( private val fileUploader: FileUploader, private val userApi: UserApi, private val guestApi: GuestApi, private val messageApi: MessageApi, private val channelApi: ChannelApi, private val deviceApi: DeviceApi, private val moderationApi: ModerationApi, private val generalApi: GeneralApi, private val configApi: ConfigApi, private val coroutineScope: CoroutineScope, )</ID>
    <ID>LongParameterList:QueryMembersErrorHandler.kt$( errorHandlers: List&lt;QueryMembersErrorHandler>, channelType: String, channelId: String, offset: Int, limit: Int, filter: FilterObject, sort: QuerySort&lt;Member>, members: List&lt;Member>, )</ID>
    <ID>LongParameterList:QueryMembersErrorHandler.kt$QueryMembersErrorHandler$( originalCall: Call&lt;List&lt;Member>>, channelType: String, channelId: String, offset: Int, limit: Int, filter: FilterObject, sort: QuerySort&lt;Member>, members: List&lt;Member>, )</ID>
    <ID>LongParameterList:QueryMembersListener.kt$QueryMembersListener$( result: Result&lt;List&lt;Member>>, channelType: String, channelId: String, offset: Int, limit: Int, filter: FilterObject, sort: QuerySort&lt;Member>, members: List&lt;Member>, )</ID>
    <ID>LongParameterList:TypingEventListener.kt$TypingEventListener$( result: Result&lt;ChatEvent>, eventType: String, channelType: String, channelId: String, extraData: Map&lt;Any, Any>, eventTime: Date, )</ID>
    <ID>MagicNumber:ChatClient.kt$ChatClient$120</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.AUTHENTICATION_ERROR$5</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.CANT_PARSE_CONNECTION_EVENT$1004</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.CANT_PARSE_EVENT$1005</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.INVALID_TOKEN$1006</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.NETWORK_FAILED$1000</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.NO_ERROR_BODY$1009</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.PARSER_ERROR$1001</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.SOCKET_CLOSED$1002</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.SOCKET_FAILURE$1003</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.TOKEN_DATE_INCORRECT$42</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.TOKEN_EXPIRED$40</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.TOKEN_NOT_VALID$41</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.TOKEN_SIGNATURE_INCORRECT$43</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.UNABLE_TO_PARSE_SOCKET_EVENT$1008</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.UNDEFINED_TOKEN$1007</ID>
    <ID>MagicNumber:ChatErrorCode.kt$ChatErrorCode.VALIDATION_ERROR$4</ID>
    <ID>MagicNumber:ChatLogLevel.kt$ChatLogLevel.ERROR$3</ID>
    <ID>MagicNumber:ChatLogLevel.kt$ChatLogLevel.NOTHING$4</ID>
    <ID>MagicNumber:ChatSocketServiceImpl.kt$ChatSocketServiceImpl$500</ID>
    <ID>MagicNumber:HealthMonitor.kt$HealthMonitor$2000</ID>
    <ID>MagicNumber:HealthMonitor.kt$HealthMonitor$250</ID>
    <ID>MagicNumber:HealthMonitor.kt$HealthMonitor$25000</ID>
    <ID>MagicNumber:HealthMonitor.kt$HealthMonitor$500</ID>
    <ID>MagicNumber:HttpLoggingInterceptor.kt$HttpLoggingInterceptor$16</ID>
    <ID>MagicNumber:HttpLoggingInterceptor.kt$HttpLoggingInterceptor$64</ID>
    <ID>MagicNumber:PerformanceUtils.kt$PerformanceUtils$1000.0</ID>
    <ID>MagicNumber:SyncStatus.kt$SyncStatus.AWAITING_ATTACHMENTS$4</ID>
    <ID>MagicNumber:SyncStatus.kt$SyncStatus.IN_PROGRESS$3</ID>
    <ID>MayBeConst:EventArguments.kt$EventArguments$private val channelId = "channelId"</ID>
    <ID>MayBeConst:EventArguments.kt$EventArguments$private val channelType = "channelType"</ID>
    <ID>MayBeConst:EventArguments.kt$EventArguments$private val cid = "channelType:channelId"</ID>
    <ID>MayBeConst:EventArguments.kt$EventArguments$private val connectionId = "6cfffec7-40df-40ac-901a-6ea6c5b7fb83"</ID>
    <ID>MayBeConst:EventArguments.kt$EventArguments$private val dateString = "2020-06-29T06:14:28.000Z"</ID>
    <ID>MayBeConst:EventArguments.kt$EventArguments$private val parentMessageId = "parentMessageId"</ID>
    <ID>MayBeConst:EventArguments.kt$EventArguments$private val totalUnreadCount = 4</ID>
    <ID>MayBeConst:EventArguments.kt$EventArguments$private val unreadChannels = 5</ID>
    <ID>MayBeConst:EventArguments.kt$EventArguments$private val watcherCount = 3</ID>
    <ID>MemberNameEqualsClassName:EventArguments.kt$EventArguments$private fun eventArguments()</ID>
    <ID>NestedBlockDepth:ChatParser.kt$ChatParser$fun toError(okHttpResponse: Response): ChatNetworkError</ID>
    <ID>ProtectedMemberInFinalClass:RetrofitCall.kt$RetrofitCall$protected var canceled = AtomicBoolean(false)</ID>
    <ID>ReturnCount:AttachmentHelper.kt$AttachmentHelper$public fun hasValidImageUrl(attachment: Attachment): Boolean</ID>
    <ID>ReturnCount:HttpLoggingInterceptor.kt$HttpLoggingInterceptor$private fun Buffer.isProbablyUtf8(): Boolean</ID>
    <ID>ReturnCount:MoshiChatParser.kt$MoshiChatParser$override fun &lt;T : Any> fromJson(raw: String, clazz: Class&lt;T>): T</ID>
    <ID>ReturnCount:MoshiChatParser.kt$MoshiChatParser$override fun toJson(any: Any): String</ID>
    <ID>SpreadOperator:ChannelClientExtensions.kt$(*javaClassTypes, listener = listener)</ID>
    <ID>SpreadOperator:ChannelClientExtensions.kt$(lifecycleOwner, *javaClassTypes, listener = listener)</ID>
    <ID>SpreadOperator:ClientExtensions.kt$(*javaClassTypes, listener = listener)</ID>
    <ID>SpreadOperator:ClientExtensions.kt$(lifecycleOwner, *javaClassTypes, listener = listener)</ID>
    <ID>SwallowedException:ChatParser.kt$ChatParser$t: Throwable</ID>
    <ID>SwallowedException:DateAdapter.kt$DateAdapter$t: Throwable</ID>
    <ID>SwallowedException:SocketFactory.kt$SocketFactory$throwable: Throwable</ID>
    <ID>SwallowedException:TokenManagerImpl.kt$TokenManagerImpl$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:ChatParser.kt$ChatParser$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:DateAdapter.kt$DateAdapter$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:EventsParser.kt$EventsParser$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:HttpLoggingInterceptor.kt$HttpLoggingInterceptor$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MoshiChatParser.kt$MoshiChatParser$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MoshiErrorLogging.kt$&lt;no name provided>$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:QueryChannelsPostponeHelper.kt$QueryChannelsPostponeHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RetrofitCall.kt$RetrofitCall$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:SocketFactory.kt$SocketFactory$throwable: Throwable</ID>
    <ID>TooGenericExceptionCaught:TokenAuthInterceptor.kt$TokenAuthInterceptor$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:TokenManagerImpl.kt$TokenManagerImpl$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:TokenUtils.kt$TokenUtils$e: Exception</ID>
    <ID>TooManyFunctions:BaseChatModule.kt$BaseChatModule</ID>
    <ID>TooManyFunctions:ChannelApi.kt$ChannelApi</ID>
    <ID>TooManyFunctions:ChannelClient.kt$ChannelClient</ID>
    <ID>TooManyFunctions:ChannelRepository.kt$ChannelRepository</ID>
    <ID>TooManyFunctions:ChatApi.kt$ChatApi</ID>
    <ID>TooManyFunctions:ChatClient.kt$ChatClient</ID>
    <ID>TooManyFunctions:ChatClient.kt$ChatClient$Builder : ChatClientBuilder</ID>
    <ID>TooManyFunctions:ChatLoggerImpl.kt$ChatLoggerImpl : ChatLogger</ID>
    <ID>TooManyFunctions:ChatNotificationHandler.kt$ChatNotificationHandler : NotificationHandler</ID>
    <ID>TooManyFunctions:ChatNotifications.kt$ChatNotificationsImpl : ChatNotifications</ID>
    <ID>TooManyFunctions:ChatSocketServiceImpl.kt$ChatSocketServiceImpl : ChatSocketService</ID>
    <ID>TooManyFunctions:EventsParser.kt$EventsParser : WebSocketListener</ID>
    <ID>TooManyFunctions:ExtraDataValidator.kt$ExtraDataValidator : ChatApi</ID>
    <ID>TooManyFunctions:Filters.kt$Filters$Filters</ID>
    <ID>TooManyFunctions:MessageApi.kt$MessageApi</ID>
    <ID>TooManyFunctions:MessagingStyleNotificationHandler.kt$MessagingStyleNotificationHandler : NotificationHandler</ID>
    <ID>TooManyFunctions:MoshiChatApi.kt$MoshiChatApi : ChatApi</ID>
    <ID>TooManyFunctions:QueryChannelRequest.kt$QueryChannelRequest : ChannelRequest</ID>
    <ID>TooManyFunctions:QuerySort.kt$QuerySort&lt;T : Any></ID>
    <ID>UnnecessaryAbstractClass:CustomObjectDtoAdapter.kt$CustomObjectDtoAdapter&lt;Value : Any></ID>
    <ID>UnnecessaryAbstractClass:InitConnectionListener.kt$InitConnectionListener</ID>
    <ID>UnusedPrivateMember:ChannelsApiCallsTests.kt$ChannelsApiCallsTests$val event = MessageReadEvent( EventType.MESSAGE_READ, Date(), User(), "${mock.channelType}:${mock.channelId}", mock.channelType, mock.channelId, )</ID>
    <ID>UnusedPrivateMember:HttpLoggingInterceptor.kt$HttpLoggingInterceptor$i</ID>
    <ID>UtilityClassWithPublicConstructor:ModelFields.kt$ModelFields</ID>
  </CurrentIssues>
</SmellBaseline>
